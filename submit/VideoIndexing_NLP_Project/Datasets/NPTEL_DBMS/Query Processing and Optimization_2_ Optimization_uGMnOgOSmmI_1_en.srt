1
00:00:12,830 --> 00:00:20,118
Welcome to module 39 of database management
systems, we have been discussing about query

2
00:00:20,118 --> 00:00:23,870
processing and optimization, in the last ah
module.

3
00:00:23,870 --> 00:00:31,550
We talked about ah the basic issues of ah
query processing, what is the overview and

4
00:00:31,550 --> 00:00:39,090
ah the measures of query cost that would be
used ah in terms of ah disk seek time and

5
00:00:39,090 --> 00:00:46,379
disk access ah time the read write time and
we agreed ah we assume that we will ignore

6
00:00:46,378 --> 00:00:49,929
the CPU and other time for the time being.

7
00:00:49,929 --> 00:00:57,969
And then we took a look into how the certain
ah SQL queries like the selection, the sorting

8
00:00:57,969 --> 00:01:05,319
which is required for other operations, different
join operations and ah other aggregation and

9
00:01:05,319 --> 00:01:10,509
those kind of operations can be processed
in a structured way.

10
00:01:10,510 --> 00:01:17,890
In view of this ah in this module we would
like to understand the basic issues of optimizing

11
00:01:17,890 --> 00:01:18,890
queries.

12
00:01:18,890 --> 00:01:25,010
So, that the same query as we have seen little
bit can be ah performed executed in multiple

13
00:01:25,010 --> 00:01:30,830
ways and we would like to choose the one which
is ah the least cost possibly estimated cost

14
00:01:30,829 --> 00:01:31,929
should be the least.

15
00:01:31,930 --> 00:01:39,390
So, we would ah need to understand 2 aspects,
one is given a query how do I generate alternate

16
00:01:39,390 --> 00:01:46,099
queries that is ah in terms of the relational
expression how a particular expression can

17
00:01:46,099 --> 00:01:51,329
be transformed into equivalent expressions
and then we choose from these equivalence

18
00:01:51,329 --> 00:01:53,189
expressions for optimization.

19
00:01:53,189 --> 00:01:54,620
So, these are the 2 topics to discuss.

20
00:01:54,620 --> 00:02:02,719
So, to introduce on the query optimization
let us ah take a simple example.

21
00:02:02,719 --> 00:02:09,340
So, I am referring to the university database
ah that we have discussed earlier, it has

22
00:02:09,340 --> 00:02:17,569
ah 3 relations as ah listed above and ah using
that we want to do the perform the query where

23
00:02:17,568 --> 00:02:24,789
we join instructor teaches and course these
3 ah relations and do a selection on that

24
00:02:24,789 --> 00:02:27,169
based on department name.

25
00:02:27,169 --> 00:02:35,789
So, this will give us ah naturally the instructors
who are in teaching some course in the ah

26
00:02:35,789 --> 00:02:41,929
the instructor is in music department and
is teaching ah some course there and we want

27
00:02:41,930 --> 00:02:45,310
the name and title of ah these.

28
00:02:45,310 --> 00:02:50,640
So, we want the name of the instruction instructor
and the title of the course that the person

29
00:02:50,639 --> 00:02:51,639
is teaching.

30
00:02:51,639 --> 00:02:58,769
So, if we write the ah query in equivalent
relational form this is what ah we will get

31
00:02:58,770 --> 00:03:04,760
to see and this is ah ah this basically is
a first join happening here then the next

32
00:03:04,759 --> 00:03:10,879
join happening, find next the selection and
finally, the projection happening here which

33
00:03:10,879 --> 00:03:14,060
will give us the result of this query.

34
00:03:14,060 --> 00:03:19,370
Now what we observe is it is possible that
if you look at carefully the department name

35
00:03:19,370 --> 00:03:21,080
ah should be music.

36
00:03:21,080 --> 00:03:28,900
So, if we look into these ah relations then
we can ah easily figure out that instructor

37
00:03:28,900 --> 00:03:31,620
has the department name name attribute.

38
00:03:31,620 --> 00:03:38,050
So, in this after this joint if a tuple has
to qualify through this selection then the

39
00:03:38,050 --> 00:03:46,370
instructors ah in the instructor relation
the department name of that ah join people

40
00:03:46,370 --> 00:03:49,050
must be music otherwise it will not get selected.

41
00:03:49,050 --> 00:03:54,660
So, what if instead of ah doing the join and
then doing the selection as we are doing here

42
00:03:54,659 --> 00:04:02,479
if we first do a selection on the instructor
ah relation itself and then join it with the

43
00:04:02,479 --> 00:04:07,969
join of teachers and courses and finally,
do the projection we should actually get the

44
00:04:07,969 --> 00:04:08,969
same result.

45
00:04:08,969 --> 00:04:14,280
So, these are what is it is a simple example
of what are equivalent relational expressions

46
00:04:14,280 --> 00:04:20,199
that we can make use of in terms of ah our
query processing.

47
00:04:20,199 --> 00:04:26,189
So, what given that this is another example
we were showing.

48
00:04:26,189 --> 00:04:37,509
So, here the query is to find the the teacher
and instructor and the course name for back

49
00:04:37,509 --> 00:04:42,788
the instructor is from department of the music
and the course he taught is in the year 2009.

50
00:04:42,788 --> 00:04:50,058
So, we want these and ah corresponding to
the equivalent at ah SQL if we write the ah

51
00:04:50,059 --> 00:04:54,400
relational expression then the in relational
algebra this is what it looks like.

52
00:04:54,399 --> 00:05:02,748
So, what we can ah eventually observe from
this that ah again as we observed last time

53
00:05:02,749 --> 00:05:04,650
department name is an is an instructor.

54
00:05:04,649 --> 00:05:11,459
So, if we are doing a final selection based
on department name is equal to is ah music

55
00:05:11,459 --> 00:05:16,989
then it is possible that I can first filter
the instructor relation with the department

56
00:05:16,990 --> 00:05:20,389
name being music that should not affect the
result.

57
00:05:20,389 --> 00:05:26,439
At the same time ah the other select condition
we have is year is 2000, which happens only

58
00:05:26,439 --> 00:05:28,360
in the teacher's relation.

59
00:05:28,360 --> 00:05:34,580
So, instead of actually filtering it after
the join I can filter the teachers relation

60
00:05:34,579 --> 00:05:43,588
with ah year being 2009 and then use these
2 in terms of the join and finally, join that

61
00:05:43,588 --> 00:05:47,218
with the course and finally, do the ah projection.

62
00:05:47,218 --> 00:05:54,019
So, here what we show that ah along with this
ah tree the parse tree of the query in relational

63
00:05:54,019 --> 00:05:59,478
algebra we are also trying to put some annotations
to say how this ah particular query will be

64
00:05:59,478 --> 00:06:00,478
processed.

65
00:06:00,478 --> 00:06:08,209
So, if we want to find out ah the tuples where
the year is 2009 and there is no specific

66
00:06:08,209 --> 00:06:13,839
index on that or anything to for doing this
selection as we have seen earlier the best

67
00:06:13,839 --> 00:06:16,008
way would be to use a linear scan.

68
00:06:16,009 --> 00:06:23,468
Whereas, if I am trying to do a selection
with department name is equal to is ah music

69
00:06:23,468 --> 00:06:29,089
ah there will be a could be an index one the
secondary index based on the department name.

70
00:06:29,089 --> 00:06:33,408
So, I will be able to use that ah index to
find this.

71
00:06:33,408 --> 00:06:38,778
So, these when we are doing this putting and
that here we will use this index, here we

72
00:06:38,778 --> 00:06:44,860
will use linear scan these are what is called
annotations which tell the query processing

73
00:06:44,860 --> 00:06:48,639
engine that how the query should actually
be executed.

74
00:06:48,639 --> 00:06:53,478
Then they will be pipelined in the sense that
this will be put one after the other actually

75
00:06:53,478 --> 00:07:00,878
these 2 can happen in parallel and then we
will use a merge join to join these 2 ah then

76
00:07:00,879 --> 00:07:07,860
this merge that is joined result would be
joined with course ah ah based on now the

77
00:07:07,860 --> 00:07:15,210
course is already indexed in course id and
this joined relation of instructor and teachers

78
00:07:15,209 --> 00:07:21,778
will have id and course id on which ah they
they will ah have index.

79
00:07:21,778 --> 00:07:26,709
So, we can use a hash join on that we did
not discuss about merge join, hash join as

80
00:07:26,709 --> 00:07:32,359
processing steps in detail, but ah right now
just assume that these are different ways

81
00:07:32,360 --> 00:07:38,830
of doing join which can make things efficient
and these are the annotations which are generated

82
00:07:38,829 --> 00:07:40,769
in the process.

83
00:07:40,769 --> 00:07:47,519
And such a query tree such a query parse tree
with the annotation is called an execution

84
00:07:47,519 --> 00:07:52,688
plan so, that or the evaluation plan which
the query processing engine would be able

85
00:07:52,689 --> 00:07:56,669
to use to actually execute and find the results.

86
00:07:56,668 --> 00:08:03,899
So, this is the basic ah approach so, for
optimization what we need to do we need to

87
00:08:03,899 --> 00:08:11,178
find out that particular evaluation plan,
that particular order of ah we the evaluation

88
00:08:11,178 --> 00:08:17,848
and the use of algorithms, the use of indexes
which will ah make the query possibly most

89
00:08:17,848 --> 00:08:18,848
efficient.

90
00:08:18,848 --> 00:08:23,978
And that cost difference could be really really
huge in a real database it could vary between

91
00:08:23,978 --> 00:08:30,019
seconds in one way of doing the query or in
terms of number of days if we do it in a non

92
00:08:30,019 --> 00:08:33,038
optimal way in a non optimized way.

93
00:08:33,038 --> 00:08:38,918
So, ah typical steps in this kind of query
based optimization would be to first generate

94
00:08:38,918 --> 00:08:45,500
the candidates I am sorry first generate the
candidates that is generate the equivalent

95
00:08:45,500 --> 00:08:50,350
expressions that is given a query I have one
relational expression and we would like to

96
00:08:50,350 --> 00:08:54,720
generate equivalent expression using a set
of equivalence rules we will see what these

97
00:08:54,720 --> 00:08:56,100
equivalence rules are.

98
00:08:56,100 --> 00:09:03,460
So, that this equivalent queries expressions
can any one of them can be actually executed

99
00:09:03,460 --> 00:09:10,259
and ah we then annotate them to with the ah
result ah the resultant expression we annotate

100
00:09:10,259 --> 00:09:15,120
to get different query plans evaluation plans.

101
00:09:15,120 --> 00:09:20,080
And then we put the cost estimates based on
the cost structure that say we had used in

102
00:09:20,080 --> 00:09:26,690
the other ah in the earlier module and ah
from these alternate evaluation plans we will

103
00:09:26,690 --> 00:09:30,060
choose the one that will have the least estimated
cost.

104
00:09:30,059 --> 00:09:35,569
So, the cost can be based on as we had seen
earlier it could be based on number of tuples,

105
00:09:35,570 --> 00:09:41,710
number of distinct values frequently used
attributes and so, on and we will use ah statistics

106
00:09:41,710 --> 00:09:47,841
ah for also intermediate results that if there
are intermediate results to be stored we will

107
00:09:47,841 --> 00:09:53,139
make estimates of what would be the size of
that result because it needs to fit into memory

108
00:09:53,139 --> 00:09:59,049
for optimal execution, the cost formula for
different algorithms ah will also be used

109
00:09:59,049 --> 00:10:00,049
through statistics.

110
00:10:00,049 --> 00:10:05,969
So, based on all these estimation ah which
will have an estimated cost and based on that

111
00:10:05,970 --> 00:10:12,310
we will choose the particular evaluation plan
which looks to be the best and that is the

112
00:10:12,309 --> 00:10:15,049
crux of the query optimization strategy.

113
00:10:15,049 --> 00:10:21,689
So, as we have seen the first step is to be
able to generate alternate expressions equivalent

114
00:10:21,690 --> 00:10:22,900
expressions through transformations.

115
00:10:22,899 --> 00:10:27,039
So, we look through the relational algebra
operators again.

116
00:10:27,039 --> 00:10:33,259
And ah check what are what is meant by equivalence
of 2 relational expressions.

117
00:10:33,259 --> 00:10:38,689
So, 2 relational expressions are equivalent
if they generate the same set of tuples for

118
00:10:38,690 --> 00:10:44,990
any instance of the database, it is not enough
to just show that for one instance it gives

119
00:10:44,990 --> 00:10:46,019
the same result.

120
00:10:46,019 --> 00:10:52,149
So, 2 expressions are equivalent for in if
I take any legal instance of the database

121
00:10:52,149 --> 00:10:57,720
then it must be equivalent and in this process
we can note that the order of tuples are really

122
00:10:57,720 --> 00:11:06,240
relevant that we have ah told repeatedly and
also we would make sure that the results are

123
00:11:06,240 --> 00:11:12,810
same provided the database ah provided ah
the relation satisfy all the integrity constraints.

124
00:11:12,809 --> 00:11:17,750
If they violate integrity constraints then
it is a problem of the user then we the database

125
00:11:17,750 --> 00:11:23,450
really does not care if the 2 expressions
will give equivalent or equal results.

126
00:11:23,450 --> 00:11:30,090
Ah we also note that in SQL input output could
be multisets so, the same thing has to be

127
00:11:30,090 --> 00:11:32,170
satisfied in terms of multisets.

128
00:11:32,169 --> 00:11:38,799
So, based on this we define an equivalence
a set of equivalence rule that say that 2

129
00:11:38,799 --> 00:11:44,189
expressions are equivalent so, you can use
that rule to transform one expression by the

130
00:11:44,190 --> 00:11:45,910
other and vice versa.

131
00:11:45,909 --> 00:11:52,649
So, let us take a look into this expression
so, ah most of these expressions are relatively

132
00:11:52,649 --> 00:11:54,419
easy to understand.

133
00:11:54,419 --> 00:12:01,799
They can be ah ah formally proved using the
corresponding set theoretic ah condition of

134
00:12:01,799 --> 00:12:03,209
the relational expressions.

135
00:12:03,210 --> 00:12:08,300
So, for every relational expression we had
a set theoretic condition that we had studied

136
00:12:08,299 --> 00:12:14,000
so, using those you can prove that we will
not do the proof of these equivalence relations

137
00:12:14,000 --> 00:12:17,500
here, but ah it you should be able to do that
very easily.

138
00:12:17,500 --> 00:12:24,470
So, he said if we have a conjunctive selection
of a relation based on 2 conditions theta

139
00:12:24,470 --> 00:12:31,370
1 and theta 2, then ah we should be able to
apply the selection first based on theta 2

140
00:12:31,370 --> 00:12:37,730
and then based on theta 1 or actually vice
versa because conjunction is commutative so,

141
00:12:37,730 --> 00:12:39,590
the selection operation is also commutative.

142
00:12:39,590 --> 00:12:46,490
So, this gives us 2 transformation rules and
ah we might ah want to use any so, these all

143
00:12:46,490 --> 00:12:48,570
will give equivalent form.

144
00:12:48,570 --> 00:12:54,340
So, applying these 2 rules we get 3 relational
expressions which are all equivalent this,

145
00:12:54,340 --> 00:12:59,810
this and this are all equivalent, but if you
actually think in terms of processing the

146
00:12:59,809 --> 00:13:07,279
query and the cost involved you will be able
to ah figure out that naturally the cost of

147
00:13:07,279 --> 00:13:13,929
doing this may be relatively more involved
because ah you have the relation and then

148
00:13:13,929 --> 00:13:19,459
on the whole relation you are applying the
conditions, but here if you do for example,

149
00:13:19,460 --> 00:13:24,980
if you first do say first apply theta 2 certainly
by that selection the relation would become

150
00:13:24,980 --> 00:13:25,980
much smaller.

151
00:13:25,980 --> 00:13:31,279
So, applying theta 1 on that would be easier
or vice versa depending on whichever is a

152
00:13:31,279 --> 00:13:36,039
smaller set ah there could be other for example,
if you have a sequence of projections then

153
00:13:36,039 --> 00:13:42,099
naturally in that sequence the last projection
that you have done is what is retained.

154
00:13:42,100 --> 00:13:47,250
So, if we have a sequence of projections that
is simply doing the last projection all other

155
00:13:47,250 --> 00:13:49,730
projections can actually be ignored.

156
00:13:49,730 --> 00:13:55,810
The selection can be combined with Cartesian
product and theta join also that is taking

157
00:13:55,809 --> 00:14:02,528
a Cartesian product and then doing a selection
is equivalent to doing a theta join ah this

158
00:14:02,528 --> 00:14:04,620
of course, is almost the definition.

159
00:14:04,620 --> 00:14:12,419
And if I have a join by theta join by theta
2 and then do a selection with theta 1 it

160
00:14:12,419 --> 00:14:17,479
is equivalent to doing a theta join with theta
1 conjunction theta 2.

161
00:14:17,480 --> 00:14:21,990
So, these are all equivalent forms so, these
are equivalent in the sense that left hand

162
00:14:21,990 --> 00:14:24,299
side and right hand side are interchangeable.

163
00:14:24,299 --> 00:14:28,120
So, it does not mean that the left hand side
implies the right hand side or vice versa

164
00:14:28,120 --> 00:14:34,879
it means that either of them implies the other,
they are really equivalent in that sense.

165
00:14:34,879 --> 00:14:39,409
Then theta join operation are natural or natural
join operations are commutative, we can change

166
00:14:39,409 --> 00:14:40,819
interchange their relations.

167
00:14:40,820 --> 00:14:46,560
So, this might impact for example, you have
ah seen the algorithms of nested join and

168
00:14:46,559 --> 00:14:53,039
block join block nested join algorithms; obviously,
depending on the size of the relations the

169
00:14:53,039 --> 00:15:02,399
cost of doing theta 1 E1 theta join E 2 or
E1 natural join E2 and E2 natural join E1

170
00:15:02,399 --> 00:15:06,980
may be different and we would choose the one
which has a lesser cost.

171
00:15:06,980 --> 00:15:12,990
Next set of transformation rules tell us that
the join operation is associative which is

172
00:15:12,990 --> 00:15:19,000
obvious ah theta joins are associative in
the in this specific manner also, that is

173
00:15:19,000 --> 00:15:25,278
if I do a theta join with condition theta
1 and then I do a theta join with condition

174
00:15:25,278 --> 00:15:32,509
theta 2 and theta 3 then we may be able to
take out the condition theta 3 outside ah

175
00:15:32,509 --> 00:15:40,789
provided ah theta 2 the condition theta 2
uses only the attributes of theta E1 and E2

176
00:15:40,789 --> 00:15:44,139
so, it should be possible to do that ah.

177
00:15:44,139 --> 00:15:50,449
Look here that on on the left hand side that
restriction is not there on the ah condition

178
00:15:50,450 --> 00:15:56,470
theta 2 it could also use ah attributes of
E1, but if it does not then it is possible

179
00:15:56,470 --> 00:16:02,040
to simplify it in this manner and these are
the equivalent rules that we have.

180
00:16:02,039 --> 00:16:08,322
So, often we will draw the rules in this form
so, just to explain you one so, this ah shows

181
00:16:08,322 --> 00:16:11,570
the associativity of join.

182
00:16:11,570 --> 00:16:16,310
So, here what you are saying is first you
do E1, E2 and with the result you join E3,

183
00:16:16,309 --> 00:16:20,269
here you are saying first you do E2, E3 and
then you join with E1.

184
00:16:20,269 --> 00:16:26,439
So, this is basically associativity this basically
is commutativity of theta join.

185
00:16:26,440 --> 00:16:33,480
So, we will often draw them in such forms
of ah parse trees and show the equivalence

186
00:16:33,480 --> 00:16:40,370
that becomes ah easy to understand for example,
in this case you are doing a join ah and then

187
00:16:40,370 --> 00:16:44,870
doing the selection and here you are doing
it select early you are doing a select early

188
00:16:44,870 --> 00:16:50,490
on this relation E1 of course, you will be
able to do this provided theta contents only

189
00:16:50,490 --> 00:16:56,190
attribute from E1, if theta contains attributes
from both E1 and E2 this transformation will

190
00:16:56,190 --> 00:16:59,600
not be applicable this transformation will
not be possible.

191
00:16:59,600 --> 00:17:05,970
So, these are some more of the transformation
rules the selection operation distributes

192
00:17:05,970 --> 00:17:07,798
over theta join operation.

193
00:17:07,798 --> 00:17:13,359
So, I can you can ah I can see here that there
is a theta join and then I am doing a selection.

194
00:17:13,359 --> 00:17:21,109
So, I can first do the selection and then
do the theta join of course, for the selection

195
00:17:21,109 --> 00:17:27,078
it must involve only the attributes of E1,
otherwise this will not be valid.

196
00:17:27,078 --> 00:17:33,678
And similarly, another ah distribution rule
is shown here where you are doing a selection

197
00:17:33,679 --> 00:17:40,869
on conjunction on theta 1, theta 2 on a theta
join by theta then you should be able to actually

198
00:17:40,868 --> 00:17:47,209
ah distribute based on the condition theta
1 and theta 2, if theta 1 involves only the

199
00:17:47,210 --> 00:17:50,929
attributes of E1 and theta 2 involves only
the attributes of E2.

200
00:17:50,929 --> 00:17:56,410
These are these are pretty straightforward
rules if you ah think about the corresponding

201
00:17:56,410 --> 00:17:59,538
set theoretic ah reason.

202
00:17:59,538 --> 00:18:07,069
So, ah the other rules are will be in terms
of projection so, you can have if you have

203
00:18:07,069 --> 00:18:14,058
union projection like this then you would
be able to break it down ah over to do separate

204
00:18:14,058 --> 00:18:24,079
projections and their theta join and in case
you have a theta join of E1, E2 based on theta

205
00:18:24,079 --> 00:18:28,689
and if L1 and L2 are the attributes of these
2 relations.

206
00:18:28,690 --> 00:18:36,929
So, if L3 be the attributes of E1 that are
involved in the join condition theta and L4

207
00:18:36,929 --> 00:18:37,929
are water.

208
00:18:37,929 --> 00:18:38,929
So, you have the join condition theta.

209
00:18:38,929 --> 00:18:44,499
So, what you are saying that the attributes
3 of you are not involved here and attributes

210
00:18:44,499 --> 00:18:53,368
L4 of E2 are involved here ah, but they are
not so, in terms of L1 union L2 so, then this

211
00:18:53,368 --> 00:19:00,879
kind of ah I should be able to ah distribute
the projection in steps and make the results

212
00:19:00,880 --> 00:19:01,880
smaller.

213
00:19:01,880 --> 00:19:07,750
So, this is another possible transformation
that now finally, the set theoretic operations

214
00:19:07,750 --> 00:19:13,069
have their normal set rules so, union and
intersection are commutative, naturally set

215
00:19:13,069 --> 00:19:18,000
difference is not commutative, union intersection
are associative as well.

216
00:19:18,000 --> 00:19:24,490
The selection operation distributes over union,
intersection and ah set difference and ah

217
00:19:24,490 --> 00:19:26,788
the projection also distributes over union.

218
00:19:26,788 --> 00:19:30,369
So, you can see the exceptions here you can
reason that out.

219
00:19:30,369 --> 00:19:37,729
So, we have ah in short we have presented
a set of ah different transformation rules

220
00:19:37,730 --> 00:19:43,538
by each which you can make equivalent expressions
and between 2 equivalent expressions or more

221
00:19:43,538 --> 00:19:49,669
equivalent expressions our objective will
always be to choose the one whose evaluation

222
00:19:49,669 --> 00:19:51,940
plan will have a lesser cost.

223
00:19:51,940 --> 00:19:57,519
So, as an exercise I have left that you can
create equivalence rules that involve group

224
00:19:57,519 --> 00:20:02,009
by or aggregation operations or ah different
kinds of outer join, left outer join, right

225
00:20:02,009 --> 00:20:05,179
outer join and so, on so, please work those
out.

226
00:20:05,179 --> 00:20:11,659
Let us move on to a couple of ah examples
so, here is a query here the relations ah

227
00:20:11,659 --> 00:20:16,159
from the university database, here is a query
find the names of all instructors in the music

228
00:20:16,159 --> 00:20:19,299
department along with the titles of the course
they teach.

229
00:20:19,298 --> 00:20:25,730
So, a while ago we saw this so, this is what
the query is in ah the relational algebra

230
00:20:25,730 --> 00:20:33,329
form and if you use the transformation rule
of select early the rule 7a, whose transformation

231
00:20:33,329 --> 00:20:40,028
I have just shown here then you should be
able to hear what you are doing is you are

232
00:20:40,028 --> 00:20:44,619
first doing a join of teaches and the projection
of course.

233
00:20:44,619 --> 00:20:49,298
And then joining instructor with that and
finally, doing the selection, but you should

234
00:20:49,298 --> 00:20:56,308
you would be able to do this select early
because it involves ah the attribute ah department

235
00:20:56,308 --> 00:21:01,759
name which is ah the attribute of instructor
alone here.

236
00:21:01,759 --> 00:21:10,490
So, you should be able to first do this selection,
mind you ah here courses also show that there

237
00:21:10,490 --> 00:21:16,058
is an attribute department name, but actually
the courses is being used after projection.

238
00:21:16,058 --> 00:21:20,009
So, after projection in the projected relation
there is no department name.

239
00:21:20,009 --> 00:21:23,109
So, department name is involved only the instructor.

240
00:21:23,109 --> 00:21:29,769
So, I can first I can take this do early,
I can do this selection early and take this

241
00:21:29,769 --> 00:21:32,849
out and then do the final join operation.

242
00:21:32,849 --> 00:21:39,118
So, in that process ah possibly ah the this
will reduce the size of the relation to be

243
00:21:39,118 --> 00:21:44,158
joined significantly because you do not naturally
expect to be to have too many instructors

244
00:21:44,159 --> 00:21:45,659
in the music department.

245
00:21:45,659 --> 00:21:50,049
So, the instructor relation after the selection
would become much smaller.

246
00:21:50,048 --> 00:21:55,839
So, this is one example ah, this is another
example query we are taking find the names

247
00:21:55,839 --> 00:22:00,918
of all instructors in the music department,
we have taught a course in 2009 along with

248
00:22:00,919 --> 00:22:07,259
the titles of the course they taught.

249
00:22:07,259 --> 00:22:12,869
So, here is a the corresponding here is ah
the corresponding relational ah query which

250
00:22:12,869 --> 00:22:16,709
you can convince yourself is indeed the same.

251
00:22:16,710 --> 00:22:22,669
And then we can transform using the rule 6a
which I have shown here which is basically

252
00:22:22,669 --> 00:22:29,639
the associativity of joint because there are
2 join relations and we are using the associativity

253
00:22:29,638 --> 00:22:35,979
of join to first join the here then second
and third relations are joined first and then

254
00:22:35,980 --> 00:22:37,700
the first relation is joined with that.

255
00:22:37,700 --> 00:22:43,620
Here we are using associativity of ah joining
the first and second and then using the third,

256
00:22:43,619 --> 00:22:50,488
now if you join first and second and then
it is possible that the department name actually

257
00:22:50,489 --> 00:22:58,470
ah the department name is an instructor and
the other condition is here which is in the

258
00:22:58,470 --> 00:22:59,470
teaches.

259
00:22:59,470 --> 00:23:03,499
So, this department name is in the instruction
here is in the teaches.

260
00:23:03,499 --> 00:23:09,669
So, I should be able to do select early, I
should be able to select on the instructor

261
00:23:09,669 --> 00:23:16,269
based only on the department name being music
and also select early on the teachers by using

262
00:23:16,269 --> 00:23:19,970
a year as 2009 and then do their joint.

263
00:23:19,970 --> 00:23:25,839
So, naturally each one of these will become
much smaller corresponding to the whole instructor

264
00:23:25,839 --> 00:23:28,868
or teaches relation therefore, their join
will also be smaller.

265
00:23:28,868 --> 00:23:36,999
So, which means eventually this part this
part of the query will become much smaller

266
00:23:36,999 --> 00:23:42,700
in size in the result and the consequent second
join would be much smaller to perform.

267
00:23:42,700 --> 00:23:48,000
So, this will naturally give it whereas, if
we had done all of these join earlier we would

268
00:23:48,000 --> 00:23:52,359
have used the whole of the teaches and the
instructor ah relations and that would have

269
00:23:52,359 --> 00:23:56,028
been quite a lot of ah tuples would have been
there.

270
00:23:56,028 --> 00:24:02,028
So, these are different example so, this is
a the same example being shown in terms of

271
00:24:02,028 --> 00:24:07,669
the 3 parts tree structure so, we can convince
yourself by using the transformation rules

272
00:24:07,669 --> 00:24:10,330
that they are actually equivalent.

273
00:24:10,329 --> 00:24:15,849
And then certainly they give you a significant
advantage and now ah this is an example which

274
00:24:15,849 --> 00:24:18,349
show that you can push the projection.

275
00:24:18,349 --> 00:24:25,128
So, here is what you wanted to do and ah while
we compute this we will get a relation of

276
00:24:25,128 --> 00:24:34,099
ah this form and we can push, we can use these
rules rule 8a and 8b, this is rule 8a, this

277
00:24:34,099 --> 00:24:40,058
is rule 8b by this we can push the projections
inside and make the relations smaller because

278
00:24:40,058 --> 00:24:45,298
now if you push the projection then you are
actually cutting down on the ah on the number

279
00:24:45,298 --> 00:24:46,298
of columns.

280
00:24:46,298 --> 00:24:51,628
So, your relation becomes smaller that will
make the with the projection this will reduce

281
00:24:51,628 --> 00:24:56,329
and when you project also there will be duplicates
which will get removed so, in every way your

282
00:24:56,329 --> 00:25:04,019
relation becomes smaller in size and your
subsequent join operations would be more efficient

283
00:25:04,019 --> 00:25:06,899
.
You can also the these are examples where

284
00:25:06,898 --> 00:25:12,469
you can ah take care of the fact that you
can reorder joining to get ah better result

285
00:25:12,470 --> 00:25:18,808
for example, the you can if I have to do join
3 relations like this, I could do either this

286
00:25:18,808 --> 00:25:20,470
first or this first.

287
00:25:20,470 --> 00:25:25,679
Now if I do this first then this is a temporary
relation which I will need to maintain in

288
00:25:25,679 --> 00:25:28,610
memory and then join with r1.

289
00:25:28,609 --> 00:25:33,278
If I do this first then this will be a temporary
relation and then I will join it with r3.

290
00:25:33,278 --> 00:25:41,519
So, if this is large enough then compared
to this then I will be better off by doing

291
00:25:41,519 --> 00:25:46,909
this and will be able to have a more optimized
execution of the query.

292
00:25:46,909 --> 00:25:51,278
So, here is ah an example of that again 2
joints.

293
00:25:51,278 --> 00:25:58,679
So, what we are trying to show is ah when
we are having this instead of actually are

294
00:25:58,679 --> 00:26:05,629
actually trying to compute this join first
because we expect that this set to be much

295
00:26:05,628 --> 00:26:10,089
smaller, if this set is much smaller then
naturally this joint would be much smaller

296
00:26:10,089 --> 00:26:15,939
and it is more likely to fit into the memory
then if we had just done teaches and course

297
00:26:15,940 --> 00:26:19,419
id's which I expected to be large relations.

298
00:26:19,419 --> 00:26:28,139
So, basically ah therefore, the strategy turns
out that given a query you will have to ah

299
00:26:28,138 --> 00:26:30,279
generate it whole lot of equivalent expressions.

300
00:26:30,279 --> 00:26:34,319
So, the number of equivalent expressions could
be really really large.

301
00:26:34,319 --> 00:26:40,858
So, we will have to systematically generate
all these alternate equivalent expressions

302
00:26:40,858 --> 00:26:48,350
and apply by applying these transformation
rules that we have just seen and ah we will

303
00:26:48,351 --> 00:26:54,109
have to continue till no new expression can
be generated and then we have to evaluate

304
00:26:54,108 --> 00:26:57,089
each one of them based on their evaluation
plan.

305
00:26:57,089 --> 00:27:02,548
So, this could be very expensive because the
number of alternates could be really really

306
00:27:02,548 --> 00:27:03,910
large ah.

307
00:27:03,910 --> 00:27:11,720
So, the optimize plan generation is ah also
based on the transformation rules and we may

308
00:27:11,720 --> 00:27:16,899
have only different special kits approaches
to take care of the common optimization plans

309
00:27:16,898 --> 00:27:18,469
that we might have.

310
00:27:18,470 --> 00:27:28,360
Now, one way to do that is for example, if
we are ah looking at say the the join of 2

311
00:27:28,359 --> 00:27:36,069
relations E1 and E2 here then; obviously,
ah if we do certain transformations with this

312
00:27:36,069 --> 00:27:42,788
join ah that does not change the way E1 and
E2 are actually evaluated.

313
00:27:42,788 --> 00:27:49,220
So, if ah that be the case then in terms of
generating the alternate we do not really

314
00:27:49,220 --> 00:27:56,169
need to keep or evaluate all of the expressions
the whole of the expression in every alternate.

315
00:27:56,169 --> 00:28:03,350
We could actually do something like ah sorry
ah we could actually do something like we

316
00:28:03,349 --> 00:28:13,349
could ah have a join and then instead of really
replicating the whole of the evaluation of

317
00:28:13,349 --> 00:28:20,230
E1 and evaluation of E2, we can simply make
pointers to the same sub trees which are called

318
00:28:20,230 --> 00:28:22,778
basically sub expression optimization.

319
00:28:22,778 --> 00:28:29,249
If you have studied ah the expression optimization
in compiler at any point of time you will

320
00:28:29,249 --> 00:28:33,450
understand this very well, this is the same
strategy which is used here.

321
00:28:33,450 --> 00:28:39,509
So, if you can detect duplicate sub expressions
then you can have only one copy and you can

322
00:28:39,509 --> 00:28:43,249
make the things more ah efficient to run.

323
00:28:43,249 --> 00:28:49,129
So, the general strategy for doing this is
a dynamic programming we would not be able

324
00:28:49,128 --> 00:28:56,599
to cover that in the current course, but just
know that ah all these explosion of generating

325
00:28:56,599 --> 00:29:01,469
alternate and choosing the best one is usually
handled in terms of dynamic programming which

326
00:29:01,470 --> 00:29:06,929
is a strategy to make sure that if we have
solved a sub earlier then I do not need to

327
00:29:06,929 --> 00:29:13,080
solve that sub problem again we can just reuse
that same ah earlier result and go ahead with

328
00:29:13,079 --> 00:29:14,079
that.

329
00:29:14,079 --> 00:29:19,470
So, by this way we can common sub expressions
we may only find the plan for a best plan

330
00:29:19,470 --> 00:29:24,259
for a common sub expression only once and
then use it subsequently again.

331
00:29:24,259 --> 00:29:31,490
So, in this module ah covered starting ah
from the notions of query processing in the

332
00:29:31,490 --> 00:29:39,599
earlier module, we have ah discussed the basic
issues of optimizing queries and we have shown

333
00:29:39,599 --> 00:29:46,738
that ah using a set of simple transformational
rules you can convert a relational expression

334
00:29:46,739 --> 00:29:50,489
into a number of equivalent relational expressions.

335
00:29:50,489 --> 00:29:55,690
And then you can evaluate them based on the
estimated cost that the model that you are

336
00:29:55,690 --> 00:30:00,538
using and choose the best one and dynamic
programming is usually a good way of doing

337
00:30:00,538 --> 00:30:01,538
that.

338
00:30:01,538 --> 00:30:07,749
So, in through the previous module and this
one we have taken a very elementary look I

339
00:30:07,749 --> 00:30:15,069
should say, but this will give you ah some
idea of how actually an SQL query is transformed

340
00:30:15,069 --> 00:30:22,928
into relational algebra ah parsed and translated
into relational algebra and how equivalent

341
00:30:22,929 --> 00:30:27,139
expressions for that relational algebra expression
is generated and evaluated.

342
00:30:27,138 --> 00:30:32,888
And finally, an evaluation plan is met where
specific choice is made for the different

343
00:30:32,888 --> 00:30:37,939
algorithms for doing different operations
and that final plan which is which has the

344
00:30:37,940 --> 00:30:44,150
best cost is passed on to the query processing
engine to query evaluation engine and that

345
00:30:44,150 --> 00:30:50,409
ah then goes forward and does the b tree and
disk operations in according to the plan and

346
00:30:50,409 --> 00:30:54,749
produces the best result in possibly the best
shot is possible time period.

