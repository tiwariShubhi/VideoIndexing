WEBVTT

1
00:00:01.190 --> 00:00:06.030
For our next three queries,
we're going to switch to the terrorist

2
00:00:06.030 --> 00:00:08.820
data set that we had used in
our previous demonstration.

3
00:00:10.740 --> 00:00:15.480
Our first query involves finding
the types of a particular node.

4
00:00:15.480 --> 00:00:19.740
So, as you may recall in the terrorist
data set there were node types

5
00:00:19.740 --> 00:00:22.010
corresponding to a country.

6
00:00:22.010 --> 00:00:25.240
So, in this case we
want to match all nodes,

7
00:00:25.240 --> 00:00:28.420
where the name is equal to Afghanistan.

8
00:00:28.420 --> 00:00:33.450
And we will return the labels for
that particular match.

9
00:00:33.450 --> 00:00:35.990
And the results for
this query are relatively simple.

10
00:00:35.990 --> 00:00:41.450
The label for the node named Afghanistan
is country, as you might expect.

11
00:00:44.685 --> 00:00:48.650
Next, we're going to do something
similar but with an edge.

12
00:00:48.650 --> 00:00:51.740
In this case, we want to find the label

13
00:00:51.740 --> 00:00:56.690
of a edge associated with
a node named Afghanistan.

14
00:00:56.690 --> 00:01:01.230
And also, if you can recall from that
particular network, the label for

15
00:01:01.230 --> 00:01:08.038
an edge associated with a country named
Afghanistan would be an IS_FROM label.

16
00:01:11.218 --> 00:01:16.330
And the final query, we would like to
demonstrate with this terrorist data set,

17
00:01:16.330 --> 00:01:19.500
involves finding all of
the properties of a node.

18
00:01:20.590 --> 00:01:24.520
Now, based on how we defined
our data import script,

19
00:01:25.540 --> 00:01:29.370
we defined all of our
nodes to be of type Actor.

20
00:01:29.370 --> 00:01:33.430
So in this query, we're going to
search for all nodes of type Actor and

21
00:01:33.430 --> 00:01:38.700
then, we're going to return all of the
properties associated with those nodes.

22
00:01:38.700 --> 00:01:39.990
But, since there are thousands of nodes,

23
00:01:39.990 --> 00:01:42.630
we're going to limit
the results to the first 20.

24
00:01:42.630 --> 00:01:45.920
So, let's go ahead and submit our query.

25
00:01:46.970 --> 00:01:48.980
And here are the results.

26
00:01:48.980 --> 00:01:54.750
Each node represents a terrorist and
if we look at the rows data

27
00:01:54.750 --> 00:02:00.030
behind the scenes we can see the various
properties associated with each node.

28
00:02:00.030 --> 00:02:01.920
Each node has a name.

29
00:02:01.920 --> 00:02:05.330
Each node has aliases,
one or more aliases.

30
00:02:05.330 --> 00:02:07.960
And they have a type property.

31
00:02:07.960 --> 00:02:11.090
Now, depending on how we defined our
import script in the first place,

32
00:02:11.090 --> 00:02:14.820
these nodes could have
different types of properties.

33
00:02:14.820 --> 00:02:17.950
In this case, we only defined them
to have three different properties.

34
00:02:22.091 --> 00:02:26.460
For our next two queries,
we're going to use a different data set,

35
00:02:26.460 --> 00:02:31.149
it's a biological data set consisting
of genetics data representing

36
00:02:31.149 --> 00:02:33.960
interactions between genes.

37
00:02:33.960 --> 00:02:36.690
We will be providing the data for
you to download.

38
00:02:36.690 --> 00:02:39.280
In fact, there are two separate data sets.

39
00:02:39.280 --> 00:02:44.150
One is a complete data set
consisting of 250,000 rows,

40
00:02:44.150 --> 00:02:48.425
and the other data set consists
of the first 50,000 rows,

41
00:02:48.425 --> 00:02:51.780
and that's what we'll be using for
this demonstration.

42
00:02:51.780 --> 00:02:55.060
So, let's take a look at
a small sample of the data.

43
00:02:55.060 --> 00:03:00.390
Here you see a graph network
in which each node is a gene.

44
00:03:00.390 --> 00:03:03.540
And each edge represents
the association between genes.

45
00:03:05.200 --> 00:03:10.248
To load this data set, this is the smaller

46
00:03:10.248 --> 00:03:15.152
data set, required 1446 seconds,

47
00:03:15.152 --> 00:03:19.768
and it consists of 9656 labels and

48
00:03:19.768 --> 00:03:23.388
46621 relationships.

49
00:03:23.388 --> 00:03:28.133
So, the first query involves finding
loops in the data which represent genes

50
00:03:28.133 --> 00:03:30.980
that have associations
with there own types.

51
00:03:32.200 --> 00:03:35.257
So, it's a very simple query
in which the source node and

52
00:03:35.257 --> 00:03:39.335
the target node are the same and we'll
be returning those along the edges and

53
00:03:39.335 --> 00:03:41.644
we'll limit our results to the first ten.

54
00:03:41.644 --> 00:03:43.920
So, here are the results of our query.

55
00:03:43.920 --> 00:03:45.840
We can see a few different loops.

56
00:03:46.870 --> 00:03:52.600
If we look at the rows, our query returned
not only the node but the edge type.

57
00:03:53.610 --> 00:03:57.234
So, on the left we see the particular
gene and on the right,

58
00:03:57.234 --> 00:03:59.201
we see the type of association.

59
00:03:59.201 --> 00:04:01.616
And there are a range of different types.

60
00:04:05.749 --> 00:04:08.560
So, this data set also
contains multigraphs.

61
00:04:08.560 --> 00:04:12.520
If you recall from a previous lecture,
the definition of a multigraph

62
00:04:12.520 --> 00:04:17.370
is any two nodes which have two or
more edges between them.

63
00:04:17.370 --> 00:04:22.370
So in this case, we'll be matching
two separate node edge relationships.

64
00:04:22.370 --> 00:04:27.190
And we'll apply a constraint in which
the edges must be different for

65
00:04:27.190 --> 00:04:28.940
the same pairs of nodes.

66
00:04:28.940 --> 00:04:32.490
And then we will return those nodes and
those edges.

67
00:04:32.490 --> 00:04:34.610
We'll limit our results to the first ten.

68
00:04:34.610 --> 00:04:36.120
And here's the results.

69
00:04:36.120 --> 00:04:41.377
Here we see a set of four genes, and
there are two pairs that have three

70
00:04:41.377 --> 00:04:46.738
edges between them and another pair
that has four edges between them.

71
00:04:50.360 --> 00:04:54.189
Our final query addresses something that
is not necessarily been fully covered

72
00:04:54.189 --> 00:04:57.329
in previous lectures, but
it is useful enough to address here and

73
00:04:57.329 --> 00:05:00.835
you'll get an understanding of it by
going through this query example.

74
00:05:02.285 --> 00:05:06.855
We're going to essentially
extract a subset of nodes and

75
00:05:06.855 --> 00:05:10.205
edges from the graph that
we've been working with.

76
00:05:10.205 --> 00:05:12.445
And this is called an induced subgraph.

77
00:05:13.470 --> 00:05:18.330
In which, if we provide a set of nodes,
we want to return

78
00:05:18.330 --> 00:05:22.970
the network that consists only of those
nodes and their associated edges.

79
00:05:22.970 --> 00:05:28.000
So, my first line of code is very
familiar, we're matching nodes and

80
00:05:28.000 --> 00:05:30.910
edges, it's a very basic node and
edge match.

81
00:05:32.570 --> 00:05:36.660
The second line of code is where
the constraints are explicitly stated.

82
00:05:36.660 --> 00:05:41.540
A resulting network must consist
of edges in which the source node

83
00:05:41.540 --> 00:05:46.520
must be constrained to this
subset of node labels.

84
00:05:46.520 --> 00:05:51.180
And the target node must also be
constrained to be a part of the subset of

85
00:05:51.180 --> 00:05:53.290
nodes with just these labels.

86
00:05:53.290 --> 00:05:55.410
And then we return the nodes and
the edges.

87
00:05:56.890 --> 00:05:59.010
So, let's see the resulting graph.

88
00:05:59.010 --> 00:06:00.050
And here it is.

89
00:06:00.050 --> 00:06:01.040
So, as we would expect,

90
00:06:01.040 --> 00:06:05.650
we're seeing the five nodes that were
defined in our query constraints.

91
00:06:05.650 --> 00:06:09.850
And the edges corresponding to them,
retain the network structure.

92
00:06:09.850 --> 00:06:13.902
So, this concludes our review of
some of the basic queries you can do

93
00:06:13.902 --> 00:06:16.974
with Neo4j using the cipher
scripting language.