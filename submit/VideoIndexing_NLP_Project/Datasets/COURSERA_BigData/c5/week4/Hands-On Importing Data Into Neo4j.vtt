WEBVTT

1
00:00:01.100 --> 00:00:05.230
In this segment, we're going to
learn how to import data into Neo4j.

2
00:00:06.780 --> 00:00:11.440
We will begin by using a fairly simple
spreadsheet consisting of only a few

3
00:00:11.440 --> 00:00:15.550
rows and three columns in a format
that's fairly typical for

4
00:00:15.550 --> 00:00:17.630
importing into a graph database.

5
00:00:17.630 --> 00:00:23.180
We will review the Neo4j CYPHER
script used to perform this import.

6
00:00:23.180 --> 00:00:26.340
And then we'll run the script and
validate the resulting graph.

7
00:00:26.340 --> 00:00:28.790
Then we'll demonstrate
a similar process but

8
00:00:28.790 --> 00:00:32.060
with a more challenging dataset,
consisting of terrorist network data.

9
00:00:33.210 --> 00:00:35.060
We will review this dataset and

10
00:00:35.060 --> 00:00:38.900
the script commands necessary for
performing the import.

11
00:00:38.900 --> 00:00:41.100
And we'll run the script and
explore the resulting graph.

12
00:00:42.180 --> 00:00:46.953
And finally, we will review a third
dataset that you will use yourself to

13
00:00:46.953 --> 00:00:49.780
perform similar data inport operations.

14
00:00:54.323 --> 00:00:57.440
First, let's take a look
at our sample dataset.

15
00:00:57.440 --> 00:01:01.890
This spreadsheet consists of just
a few rows and three columns.

16
00:01:01.890 --> 00:01:03.480
Each column has a heading.

17
00:01:03.480 --> 00:01:08.034
The first column heading is Source,
the second column heading is Target, and

18
00:01:08.034 --> 00:01:10.324
the third column heading is distance.

19
00:01:10.324 --> 00:01:14.762
You can imagine that this might represent
data from a simple road network in which

20
00:01:14.762 --> 00:01:17.570
the Source and
Target values represent towns, and

21
00:01:17.570 --> 00:01:21.963
the distance values represent the actual
distance in miles between the towns.

22
00:01:25.333 --> 00:01:28.492
So let's take a look at
the Neo4j CYPHER script and

23
00:01:28.492 --> 00:01:32.110
see what we will need to do to
import our spreadsheet data.

24
00:01:32.110 --> 00:01:36.010
The first line of code
performs the actual import.

25
00:01:36.010 --> 00:01:40.340
The other three lines of code provide
constraints to the formatting

26
00:01:40.340 --> 00:01:41.670
of that data.

27
00:01:41.670 --> 00:01:45.350
Since our data file is
a comma separated values or

28
00:01:45.350 --> 00:01:49.170
CSV file,
we will need to specify that in our code.

29
00:01:49.170 --> 00:01:51.530
Our file also contains headers.

30
00:01:51.530 --> 00:01:53.718
And if you're using
a Windows operating system,

31
00:01:53.718 --> 00:01:55.758
your file path will look
something like this.

32
00:01:55.758 --> 00:02:00.609
Since we're running Neo4j in a browser,
the file path needs

33
00:02:00.609 --> 00:02:05.365
to conform to the HTTP address
conventions of the word file,

34
00:02:05.365 --> 00:02:10.030
followed by a colon,
followed by three forward slashes and

35
00:02:10.030 --> 00:02:16.307
then the hard disk letter where the file
is located, plus the path to that file.

36
00:02:16.307 --> 00:02:20.046
If you're using Mac OSX,
your command will be similar, but

37
00:02:20.046 --> 00:02:24.490
the file path will probably
look something more like this.

38
00:02:24.490 --> 00:02:28.280
The next three lines specify which
nodes will be the source nodes and

39
00:02:28.280 --> 00:02:30.810
which nodes will be the target nodes.

40
00:02:30.810 --> 00:02:36.020
And the properties will attach to them as
well as defining the relationships and

41
00:02:36.020 --> 00:02:38.860
the properties we will
attach to the relationships.

42
00:02:38.860 --> 00:02:43.800
As we read each line of data n,
we're going to use keyword line,

43
00:02:43.800 --> 00:02:47.330
to specify the individual line
we're currently working on.

44
00:02:47.330 --> 00:02:51.120
We use that here at the end
of our load command and so

45
00:02:51.120 --> 00:02:54.800
we'll have to continue to use it
in the subsequent merge commands.

46
00:02:56.000 --> 00:02:58.990
Our source node variable
is going to be n and

47
00:02:58.990 --> 00:03:03.010
we'll use the MyNode type,
which we've made up ourselves.

48
00:03:03.010 --> 00:03:07.150
We're going to add a Name property
to each of our source nodes.

49
00:03:07.150 --> 00:03:12.880
And we're going to attach the value in
the Source column to that particular node.

50
00:03:12.880 --> 00:03:17.350
Likewise for our target nodes,
we'll use a variable m.

51
00:03:17.350 --> 00:03:19.930
We'll define them as the same type,
MyNode.

52
00:03:21.330 --> 00:03:25.820
We will give them a Name and we will
extract that name from the Target column

53
00:03:25.820 --> 00:03:28.300
on the particular line we're working with.

54
00:03:28.300 --> 00:03:31.590
Finally, we need to define
our edge relationships.

55
00:03:31.590 --> 00:03:34.870
We're going to give each
edge a label of the word TO,

56
00:03:34.870 --> 00:03:40.360
and we're going to add a property called
dist, which represents the distance.

57
00:03:40.360 --> 00:03:43.150
And we'll attach the values
in the distance column

58
00:03:43.150 --> 00:03:45.950
from the particular line
we're currently working on.

59
00:03:45.950 --> 00:03:52.050
So let's go ahead and copy this code and
paste it into Neo4j, and see what happens.

60
00:03:52.050 --> 00:03:54.868
Now, I'm working on a Mac OSX machine, so

61
00:03:54.868 --> 00:03:59.663
I'm going to copy this code down here and
perform the import operation.

62
00:04:02.380 --> 00:04:07.986
So I've pasted the line
of code into Neo4j and

63
00:04:07.986 --> 00:04:10.740
I'll click Execute.

64
00:04:10.740 --> 00:04:12.190
And it takes a few moments to run.

65
00:04:12.190 --> 00:04:16.410
There's not too much data so it shouldn't
take more than just a few seconds.

66
00:04:16.410 --> 00:04:20.794
And now we get the results in which
11 labels, 11 nodes have been added,

67
00:04:20.794 --> 00:04:25.057
25 properties have been set and
14 relationships have been created.

68
00:04:25.057 --> 00:04:27.320
So let's take a look
at this graph network.

69
00:04:27.320 --> 00:04:31.540
We can see that the nodes are listed
all as MyNode and there's our graph.

70
00:04:32.590 --> 00:04:36.345
The edge relationships should all
have different distance values and

71
00:04:36.345 --> 00:04:38.833
each node should be named
a different letter.

72
00:04:38.833 --> 00:04:41.887
Okay, so
let's try a more difficult dataset.

73
00:04:44.849 --> 00:04:48.135
Here is the spreadsheet
containing terrorist data.

74
00:04:48.135 --> 00:04:53.175
The spreadsheet consists of seven
columns with headings such as Country,

75
00:04:53.175 --> 00:04:57.897
ActorName, ActorType, AffiliationTo,
AffiliationStartDate,

76
00:04:57.897 --> 00:05:04.300
AffiliationEndDate, and any aliases
associated with that particular terrorist.

77
00:05:04.300 --> 00:05:09.880
This dataset consists of
over 100,000 rows of data.

78
00:05:09.880 --> 00:05:14.350
Since that could take a very long
time to load into Neo4j, we will be

79
00:05:14.350 --> 00:05:19.980
working with a subset of this dataset
consisting of the first 1,000 rows.

80
00:05:19.980 --> 00:05:23.246
That much data will still
include three countries,

81
00:05:23.246 --> 00:05:26.296
which should be plenty of data for
our purposes.

82
00:05:29.953 --> 00:05:34.911
So here is the script we're going to use
to import the subset of terrorist data,

83
00:05:34.911 --> 00:05:39.420
which shares similarities with
the script we used previously.

84
00:05:39.420 --> 00:05:42.030
But since there are more
columns in our dataset,

85
00:05:42.030 --> 00:05:46.810
we're going to include some additional
properties into our graph network.

86
00:05:46.810 --> 00:05:50.160
The first line of code is very similar

87
00:05:50.160 --> 00:05:53.610
to the load command we've
used in previous datasets.

88
00:05:53.610 --> 00:06:00.720
The second line of code will use
a variable c and a label Country for

89
00:06:00.720 --> 00:06:04.155
the particular nodes representing
the individual countries in the dataset.

90
00:06:05.300 --> 00:06:09.280
In this particular case, we're going to
use the keyword row instead of line to

91
00:06:09.280 --> 00:06:11.990
read our data n, but
it really doesn't matter.

92
00:06:11.990 --> 00:06:16.397
We could use either word as long we
are consistent from command to command.

93
00:06:16.397 --> 00:06:21.136
So we're using the term row and
associating the value in the Country

94
00:06:21.136 --> 00:06:25.891
column with the node that we're
working on in that particular row.

95
00:06:25.891 --> 00:06:30.375
We will do something similar with
nodes that are intended to represent

96
00:06:30.375 --> 00:06:33.570
the actors or
the actual individual terrorists.

97
00:06:33.570 --> 00:06:39.670
We're going to use a variable a and
we will associate a property

98
00:06:39.670 --> 00:06:45.140
called Name, and associate
the ActorName with that property.

99
00:06:45.140 --> 00:06:49.410
We'll also associate
a property named Aliases, and

100
00:06:49.410 --> 00:06:53.250
associate the value in the Aliases
column with that property.

101
00:06:54.590 --> 00:06:59.580
And finally,
we will define a property called Type and

102
00:06:59.580 --> 00:07:03.580
associate the values in the ActorType
column with that property.

103
00:07:04.650 --> 00:07:08.110
We're going to create nodes
representing organizations as well and

104
00:07:08.110 --> 00:07:13.700
we will use the variable o, and
the label Organization for those nodes.

105
00:07:13.700 --> 00:07:18.800
We will attach a single property
to these nodes called Name and

106
00:07:18.800 --> 00:07:23.968
we'll assign the values in
the AffiliationTo column to that property.

107
00:07:23.968 --> 00:07:27.862
Then we're going to define
relationships between the Actors and

108
00:07:27.862 --> 00:07:30.700
the Organizations they're affiliated with.

109
00:07:32.030 --> 00:07:35.835
The relationship label is
going to be AFFILIATED_TO and

110
00:07:35.835 --> 00:07:39.350
we'll define a property called Start.

111
00:07:39.350 --> 00:07:43.525
And we'll assign the values in the
AffiliationStartDate with that property.

112
00:07:43.525 --> 00:07:48.210
Likewise, we will define
a property called End and

113
00:07:48.210 --> 00:07:52.800
assign the values in
the AffiliationEndDate with that property.

114
00:07:52.800 --> 00:07:57.500
And finally, we're going to create
relationships between the countries and

115
00:07:57.500 --> 00:07:59.160
the actors.

116
00:07:59.160 --> 00:08:04.160
In this case, we will define relationships
with the label IS_FROM that will

117
00:08:04.160 --> 00:08:09.890
describe the fact that a particular
actor is from a particular country.

118
00:08:09.890 --> 00:08:13.711
So if all this makes sense,
let's go ahead and copy this script and

119
00:08:13.711 --> 00:08:16.250
paste it into Neo4j, and see the results.

120
00:08:19.270 --> 00:08:22.926
So here we are in Neo4j, and
I'm going to go ahead and

121
00:08:22.926 --> 00:08:27.619
paste that script into the command line,
and we will execute it.

122
00:08:29.951 --> 00:08:37.021
We loaded 1,000 rows of data, which
consists of 658 labels and 658 nodes.

123
00:08:37.021 --> 00:08:42.401
3,464 properties and
1,403 relationships and

124
00:08:42.401 --> 00:08:45.809
it took about two and a half seconds.

125
00:08:45.809 --> 00:08:50.376
So let's look at a small
subset of this network.

126
00:08:55.795 --> 00:09:01.090
Here, we see the equivalent of
the first 25 rows of the dataset.

127
00:09:01.090 --> 00:09:05.120
There's only enough data
such that 1 Country,

128
00:09:05.120 --> 00:09:09.067
8 Actors and 15 Organizations are visible.

129
00:09:09.067 --> 00:09:12.874
Let's go ahead and
change this command to 250.

130
00:09:12.874 --> 00:09:16.550
By clicking on the line of
code in the top of our panel,

131
00:09:16.550 --> 00:09:20.653
it automatically gets pasted
into the command line above.

132
00:09:20.653 --> 00:09:26.085
So all we need to do is add a zero on the
end of our command and execute that again.

133
00:09:26.085 --> 00:09:30.752
Now we have a much larger,
more complex graph,

134
00:09:30.752 --> 00:09:34.262
but we still only have one country.

135
00:09:34.262 --> 00:09:36.918
In order to see more than one country,

136
00:09:36.918 --> 00:09:43.010
we'll need to render the entire 1,000
rows of our terrorist data subset.

137
00:09:43.010 --> 00:09:46.710
But in so doing, we will have a difficult
time viewing the entire graph.

138
00:09:47.720 --> 00:09:51.950
The community edition of Neo4j
is limited in its ability to

139
00:09:51.950 --> 00:09:53.810
navigate a graph network.

140
00:09:53.810 --> 00:09:56.440
But I'm going to show you
a little trick by editing

141
00:09:56.440 --> 00:10:00.290
the HTML behind the scenes to
scale the view of our graph.

142
00:10:01.770 --> 00:10:04.862
So let's go ahead and
render all 1,000 rows.

143
00:10:10.923 --> 00:10:15.473
So most recent versions of the major
browsers provide the ability to go behind

144
00:10:15.473 --> 00:10:18.080
the scenes and edit the HTML.

145
00:10:18.080 --> 00:10:23.024
So the trick is to find a place on
the viewing panel that does not have

146
00:10:23.024 --> 00:10:24.096
any objects.

147
00:10:24.096 --> 00:10:27.971
So that when you right-click and
inspect the element,

148
00:10:27.971 --> 00:10:30.864
you'll be inspecting the viewing area.

149
00:10:30.864 --> 00:10:33.257
Neo4j uses SVG graphics, or

150
00:10:33.257 --> 00:10:38.360
Scalable Vector Graphics to
render its graph networks.

151
00:10:38.360 --> 00:10:42.373
And SVG uses a g element,
which can be seen here on the right.

152
00:10:42.373 --> 00:10:48.452
So in order to change the scale of our
view, we simply need to double-click and

153
00:10:48.452 --> 00:10:53.903
add scale, open parentheses, and
the scale factor that we'd like.

154
00:10:53.903 --> 00:11:00.938
We hit Return and
the graph network now is zoomed out.

155
00:11:00.938 --> 00:11:06.823
I'm going to try to position it so
we can see at least two countries,

156
00:11:06.823 --> 00:11:09.610
and I'll close my HTML panel.

157
00:11:10.920 --> 00:11:12.371
And so now we can view two countries.

158
00:11:12.371 --> 00:11:18.456
We can see Albania in the upper region,
and Afghanistan in the lower right.

159
00:11:18.456 --> 00:11:21.388
And we can see that there are actors and

160
00:11:21.388 --> 00:11:26.970
organizations that have
relationships with both countries.

161
00:11:26.970 --> 00:11:31.384
Now there are add ons to Neo4j that
make navigating a graph network a little

162
00:11:31.384 --> 00:11:32.155
easier, but

163
00:11:32.155 --> 00:11:37.074
this trick is convenient for those of you
who have not added any Neo4j extensions.

164
00:11:40.998 --> 00:11:45.355
The last thing that we're going to do
is take a look at the sample dataset of

165
00:11:45.355 --> 00:11:50.208
gene-disease associations, and give you
an idea what's going to be expected of

166
00:11:50.208 --> 00:11:53.930
you in the accompanying assignment for
this module.

167
00:11:53.930 --> 00:11:58.060
This data consists of
information associating

168
00:11:58.060 --> 00:12:01.200
different genes with different diseases.

169
00:12:01.200 --> 00:12:05.638
The spreadsheet consists of
columns with headings for geneId,

170
00:12:05.638 --> 00:12:10.610
geneSymbol, geneName, diseaseId,

171
00:12:10.610 --> 00:12:15.870
the diseaseName, the score that
represents the extent to which that gene

172
00:12:15.870 --> 00:12:19.302
is associated with that
particular disease.

173
00:12:19.302 --> 00:12:25.554
The NumberofPubmed articles
containing that information.

174
00:12:25.554 --> 00:12:26.944
The associationTypes,

175
00:12:26.944 --> 00:12:31.584
there are up to three different types of
associations between a gene and a disease.

176
00:12:31.584 --> 00:12:34.113
And then the sources of data and

177
00:12:34.113 --> 00:12:39.084
information that confirm this
gene disease relationship.

178
00:12:39.084 --> 00:12:44.830
Now this dataset contains
over 400,000 rows of data.

179
00:12:44.830 --> 00:12:48.322
So if you have difficulty
importing this entire dataset,

180
00:12:48.322 --> 00:12:53.810
then you'll be better off extracting
the first few thousand rows.

181
00:12:53.810 --> 00:12:57.507
So you're goal will be to
define the load statement,

182
00:12:57.507 --> 00:13:02.437
which includes a CSV with headers,
that will allow you to import enough

183
00:13:02.437 --> 00:13:07.384
data into Neo4j to give you an idea
that you've done it successfully.