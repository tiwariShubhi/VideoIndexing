WEBVTT

1
00:00:03.582 --> 00:00:06.800
The third component of
a data model is constraints.

2
00:00:08.080 --> 00:00:10.418
A constraint is a logical statement.

3
00:00:10.418 --> 00:00:15.770
That means one can compute and test
whether the statement is true or false.

4
00:00:16.980 --> 00:00:21.130
Constraints are part of the data model
because they can specify something about

5
00:00:21.130 --> 00:00:24.240
the semantics, that is,
the meaning of the data.

6
00:00:24.240 --> 00:00:27.705
For example,
the constraint that a week has seven and

7
00:00:27.705 --> 00:00:32.402
only seven days is something that a data
system would not know unless this

8
00:00:32.402 --> 00:00:36.025
knowledge is passed on to it
in the form of a constraint.

9
00:00:36.025 --> 00:00:39.531
Another constraint, shown here,

10
00:00:42.132 --> 00:00:46.690
Tells the system that the number of
titles for a movie is restricted to one.

11
00:00:49.740 --> 00:00:50.800
Different data models,

12
00:00:50.800 --> 00:00:54.260
as we'll see in the next module,
will have different kinds of constraints.

13
00:00:56.140 --> 00:00:58.760
There may be many different
kinds of constraints.

14
00:01:00.020 --> 00:01:04.039
A value constraint is a logical
statement about data values.

15
00:01:05.520 --> 00:01:09.600
On a previous slide we have said,
that the age, that is,

16
00:01:09.600 --> 00:01:13.540
the value of data elements representing
the age of an entity can not be negative.

17
00:01:16.310 --> 00:01:20.840
We also saw an example of
uniqueness constraint when we said

18
00:01:20.840 --> 00:01:23.880
every movie can have only one title.

19
00:01:25.200 --> 00:01:27.120
In the words of logic,

20
00:01:27.120 --> 00:01:32.460
there should exist no data object that's
a movie and has more than one title.

21
00:01:33.860 --> 00:01:37.719
It's easy to see that enforcing
these constraints requires us

22
00:01:37.719 --> 00:01:41.446
to count the number of titles and
then verify that it's one.

23
00:01:41.446 --> 00:01:46.490
Now, one can generalize this to count
the number of values associated with

24
00:01:46.490 --> 00:01:51.310
each object and check whether it lies
between an upper and lower bound.

25
00:01:52.380 --> 00:01:56.010
This is often called a cardinality
constraint of data property.

26
00:01:59.530 --> 00:02:04.388
In a medical example here,
the constraint has a lower limit of 0 and

27
00:02:04.388 --> 00:02:05.931
an upper limit of 3.

28
00:02:10.390 --> 00:02:15.253
A different kind of value constraint can
be enforced by restricting the type of

29
00:02:15.253 --> 00:02:17.030
the data allowed in a field.

30
00:02:18.620 --> 00:02:23.210
If we do not have such a constraint we
can put any type of data in the field.

31
00:02:23.210 --> 00:02:28.300
For example, you can have -99 as
the value of the last name of a person,

32
00:02:28.300 --> 00:02:30.680
of course that would be wrong.

33
00:02:30.680 --> 00:02:34.750
To ensure that this does not happen,
we can enforce the type of the last name

34
00:02:35.780 --> 00:02:40.300
to be a non-numeric alphabetic string.

35
00:02:40.300 --> 00:02:45.420
This example shows a logical
expression for this constraint.

36
00:02:45.420 --> 00:02:50.840
A type constraint is a special
kind of domain constraint.

37
00:02:50.840 --> 00:02:52.420
The domain of a data property or

38
00:02:52.420 --> 00:02:57.900
attribute is the possible set of values
that are allowed for that attribute.

39
00:02:57.900 --> 00:03:01.026
For example, the possible values for

40
00:03:01.026 --> 00:03:05.624
the day part of the date field
can be between 1 and 31.

41
00:03:05.624 --> 00:03:09.746
While a month may have
the value between 1 and 12.

42
00:03:09.746 --> 00:03:16.200
Or, alternately, a value from the set
January, February, ect till December.

43
00:03:17.870 --> 00:03:21.697
Now, one can devise a more complex
constraint, where the value of the date

44
00:03:21.697 --> 00:03:26.099
for April, June, and September and
November, are restricted between 1 and 30.

45
00:03:26.099 --> 00:03:30.609
And if you think about it,
all three constraints that we have

46
00:03:30.609 --> 00:03:35.420
described in the last slide
are value constraints.

47
00:03:35.420 --> 00:03:39.380
So they only state how to restrict
the values of some data property.

48
00:03:40.470 --> 00:03:45.392
In sharp contrast, structural properties
restrict the structure of the data.

49
00:03:45.392 --> 00:03:48.700
We'll choose a more complex example for
this.

50
00:03:50.320 --> 00:03:53.952
Suppose we are a matrix,
as shown in the example, and

51
00:03:53.952 --> 00:03:56.794
we've restricted to be a square matrix.

52
00:03:56.794 --> 00:04:00.919
So the number of columns is exactly
equal to the number of rows.

53
00:04:03.230 --> 00:04:06.570
We have not put any restriction
on the number of rows or columns.

54
00:04:06.570 --> 00:04:07.910
But just that they have to be the same.

55
00:04:09.280 --> 00:04:11.560
Now this constrains
the structure of the matrix and

56
00:04:11.560 --> 00:04:16.140
implies that the number of entries in
the structure will be a squared number.

57
00:04:17.480 --> 00:04:22.600
If we convert this matrix to a three
column table as shown, and impose

58
00:04:22.600 --> 00:04:28.000
the same squareness constraint, it will
translate to a more complex condition.

59
00:04:28.000 --> 00:04:31.540
That the number of data
rows will be the square of

60
00:04:31.540 --> 00:04:34.200
the number of unique values
in column one of the table.

61
00:04:35.900 --> 00:04:39.410
We'll encounter some more structural
constraints in the next module.