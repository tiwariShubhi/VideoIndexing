WEBVTT

1
00:00:03.208 --> 00:00:07.770
The second component of a data model is
a set of operations that can be performed

2
00:00:07.770 --> 00:00:09.390
on the data.

3
00:00:09.390 --> 00:00:10.250
And in this module,

4
00:00:10.250 --> 00:00:15.650
we'll discuss the operations without
considering the bigness aspect.

5
00:00:15.650 --> 00:00:17.110
In course three,

6
00:00:17.110 --> 00:00:20.710
we'll come back to the issue of performing
these operations when the data is large.

7
00:00:22.515 --> 00:00:25.830
Now,operations specified
the methods to manipulate the data.

8
00:00:26.840 --> 00:00:31.220
SInce different data models are typically
associated with different structures,

9
00:00:31.220 --> 00:00:34.210
the operations on them will be different.

10
00:00:34.210 --> 00:00:39.410
But some types of operations are usually
performed across all data models.

11
00:00:39.410 --> 00:00:41.030
We'll describe a few of them here.

12
00:00:43.320 --> 00:00:50.818
One common operation extract a part of
a collection based on the condition.

13
00:00:50.818 --> 00:00:54.422
In the example here,
we have a set of records and

14
00:00:54.422 --> 00:00:59.110
we're looking for a sub set that
satisfies the condition that

15
00:00:59.110 --> 00:01:03.548
the fifth field has a value
greater than 100,000.

16
00:01:03.548 --> 00:01:07.603
The only one record
satisfies this requirement.

17
00:01:07.603 --> 00:01:11.580
Note that we called this operation
subsetting rather loosely.

18
00:01:12.940 --> 00:01:17.210
Depending on the context,
it's also called selection or filtering.

19
00:01:20.410 --> 00:01:26.300
The next common operation is retrieving
a part of a structure that is specified.

20
00:01:26.300 --> 00:01:29.440
In this case,
we specify that we are interested

21
00:01:29.440 --> 00:01:33.130
in just the first two fields
of a collection off records.

22
00:01:34.880 --> 00:01:40.340
But this produces a new collection of
records which has only these fields.

23
00:01:41.350 --> 00:01:44.460
This operation like before has many names.

24
00:01:44.460 --> 00:01:46.910
The most dominant name is projection.

25
00:01:48.340 --> 00:01:52.204
In the next module, we'll see several
versions of this operation for

26
00:01:52.204 --> 00:01:53.588
different data models.

27
00:01:56.108 --> 00:02:00.176
The next two operations are about
combining two collections

28
00:02:00.176 --> 00:02:01.460
into a larger one.

29
00:02:02.540 --> 00:02:06.450
The term combine may be
interpreted in various ways.

30
00:02:06.450 --> 00:02:08.830
The most straightforward
of them is said union.

31
00:02:09.910 --> 00:02:12.500
The assumption behind the union operation

32
00:02:12.500 --> 00:02:15.930
is that the two collections
involved have the same structure.

33
00:02:15.930 --> 00:02:22.050
In other words, if one collection has
four fields and another has 14 fields, or

34
00:02:22.050 --> 00:02:27.230
if one has four fields on people and
the dates of birth, and the other has four

35
00:02:27.230 --> 00:02:31.350
things about countries and their capitols,
they cannot be combined through union.

36
00:02:33.650 --> 00:02:37.340
In the example here,
their two collections have three and

37
00:02:37.340 --> 00:02:42.620
two records, respectively, with one
record that's common between them.

38
00:02:42.620 --> 00:02:43.120
The green one.

39
00:02:45.100 --> 00:02:48.170
The result collection has four record,

40
00:02:48.170 --> 00:02:53.300
because duplicates are disallowed
because it's a set operation.

41
00:02:53.300 --> 00:02:58.110
There is indeed another version of
union where duplicates are allowed and

42
00:02:58.110 --> 00:03:00.540
will produce five records instead of four.

43
00:03:03.040 --> 00:03:08.020
The second kind of combining,
called a Join, can be done when

44
00:03:08.020 --> 00:03:12.460
the two collections have different data
content but have some common elements.

45
00:03:14.430 --> 00:03:16.290
In the example shown,

46
00:03:16.290 --> 00:03:19.920
the first field is the common element
between the two collections on the left.

47
00:03:21.040 --> 00:03:24.630
In this kind of data combination
there are two stages.

48
00:03:24.630 --> 00:03:30.380
First, for each data item think
of a record of collection one,

49
00:03:30.380 --> 00:03:33.490
one finds a set of matching
data items in collection two.

50
00:03:35.120 --> 00:03:38.960
Thus, the first records of
the two collections match

51
00:03:38.960 --> 00:03:40.060
based on the first field.

52
00:03:41.490 --> 00:03:43.750
In the second phase of the operation,

53
00:03:43.750 --> 00:03:46.710
all fields of the matching
record pairs are put together.

54
00:03:47.780 --> 00:03:51.170
In the first record of the result
collection shown on the right,

55
00:03:51.170 --> 00:03:54.890
one gets the first four fields
on the first collection and

56
00:03:54.890 --> 00:03:57.230
the remaining two fields
from the second collection.

57
00:03:58.500 --> 00:04:04.380
Now in this one example, we found one pair
of matching records from the collections.

58
00:04:04.380 --> 00:04:07.790
In general, one would find more
than one matching record pairs.

59
00:04:09.260 --> 00:04:12.415
As you can see,
this operation is more complex and

60
00:04:12.415 --> 00:04:16.863
can be very expensive when the size
of the true collections are large.