WEBVTT

1
00:00:02.986 --> 00:00:05.186
Now we move to another Apache product for

2
00:00:05.186 --> 00:00:07.720
large scale text data
searching called Solr.

3
00:00:09.100 --> 00:00:10.430
Systems like Solr, and

4
00:00:10.430 --> 00:00:16.300
its underlying text indexing engine, are
typically designed for search problems.

5
00:00:16.300 --> 00:00:18.629
So they would typically be
part of a search engine.

6
00:00:19.860 --> 00:00:21.410
But before we talk about Solr or

7
00:00:21.410 --> 00:00:26.770
large scale text, we need to first
appreciate some fundamental challenges

8
00:00:26.770 --> 00:00:29.590
when it comes to storing,
indexing, and matching text data.

9
00:00:31.690 --> 00:00:36.030
The basic challenge comes from
the numerous ways in which

10
00:00:36.030 --> 00:00:40.660
a text string may vary, making it
hard to define what a good match is.

11
00:00:41.830 --> 00:00:43.560
Let us show some of these challenges.

12
00:00:44.750 --> 00:00:49.810
Remember in each case,
we're asking whether the strings shown on

13
00:00:49.810 --> 00:00:52.560
either side of the double
tilde sign should match.

14
00:00:55.100 --> 00:00:58.541
The first issue is about spelling
variations and capitalization.

15
00:01:02.049 --> 00:01:05.600
The second issue relates
structured strings.

16
00:01:05.600 --> 00:01:10.080
Where different parts of a string
represent different kind of information.

17
00:01:10.080 --> 00:01:16.420
We have seen this before for file paths,
URLs, and like in this case, product IDs.

18
00:01:16.420 --> 00:01:21.081
The problem is that the searcher may
not always know the structure or

19
00:01:21.081 --> 00:01:24.775
my job on misposition,
the internal punctuations.

20
00:01:28.014 --> 00:01:32.674
The next problem is very common with
proper nouns which are represented in

21
00:01:32.674 --> 00:01:38.248
various ways, including dropping a part of
the string, picking up only the initials.

22
00:01:38.248 --> 00:01:43.497
But consider the last variation, should
BH Obama really match the full name?

23
00:01:46.797 --> 00:01:50.120
The next example is about
frequently used synonyms.

24
00:01:51.210 --> 00:01:55.512
If the document has one of the synonyms,
while the query uses another,

25
00:01:55.512 --> 00:01:56.742
should they match?

26
00:01:59.679 --> 00:02:03.400
Example 5 illustrates
a very common problem.

27
00:02:03.400 --> 00:02:05.710
People use abbreviations all the time.

28
00:02:06.970 --> 00:02:09.160
If we look at text and social media and

29
00:02:09.160 --> 00:02:12.930
instant messaging, we see a much
wider variety of abbreviations.

30
00:02:14.270 --> 00:02:17.270
How well should they met with
the real correct version of the term?

31
00:02:19.580 --> 00:02:22.510
Now problem six is a special
case of problem five.

32
00:02:24.350 --> 00:02:26.690
Many long nouns are shortened

33
00:02:26.690 --> 00:02:30.440
because we take the first initial
letter of each significant word.

34
00:02:31.570 --> 00:02:37.580
We say significant because we
drop words like of as shown here.

35
00:02:37.580 --> 00:02:38.870
This is called initialism.

36
00:02:40.390 --> 00:02:44.490
Just so you know, when an initialism
can be said like a real word,

37
00:02:44.490 --> 00:02:45.480
it's called an acronym.

38
00:02:46.480 --> 00:02:51.620
Thus IBM is an initialization,
but NATO is an acronym.

39
00:02:53.160 --> 00:02:58.250
Now problem seven and
problem eight show two

40
00:02:58.250 --> 00:03:02.690
different situation where we first must
decide what to do with the period sign.

41
00:03:04.100 --> 00:03:09.322
In the first case, we should not
find a match because students and

42
00:03:09.322 --> 00:03:13.250
American are in two different
sentences punctuated by a period sign.

43
00:03:14.720 --> 00:03:18.330
But in the second case we should
find a match because the period

44
00:03:18.330 --> 00:03:20.310
does not designate a sentence boundary.

45
00:03:23.055 --> 00:03:28.510
Lucene, the engine on which Solr is
built is effectively not a database,

46
00:03:28.510 --> 00:03:30.030
but a modern inverted index.

47
00:03:31.040 --> 00:03:32.020
What's an inverted index?

48
00:03:33.620 --> 00:03:37.590
Let's first define a vocabulary
as a collection of terms.

49
00:03:37.590 --> 00:03:42.090
Where a term may be a single word or
it can be multiple words.

50
00:03:42.090 --> 00:03:45.030
It can a single term or
it can be a collection of synonyms.

51
00:03:46.510 --> 00:03:48.730
But how would a search
engine know what a term is?

52
00:03:49.795 --> 00:03:52.558
We'll revisit this question
in a couple of slides.

53
00:03:52.558 --> 00:03:57.390
For now, let's just say that if we
have a corpus of documents, we can

54
00:03:57.390 --> 00:04:01.690
extract most of the terms and construct
a vocabulary for that collection.

55
00:04:03.500 --> 00:04:08.080
We can then define occurrence, as a list

56
00:04:08.080 --> 00:04:12.270
containing all the information necessary
for each term in the vocabulary.

57
00:04:13.780 --> 00:04:17.790
It would include information like,
which documents have the term?

58
00:04:17.790 --> 00:04:21.050
The positions in the document
where the term occurs.

59
00:04:21.050 --> 00:04:25.404
We can then go on to compute the count of
the term in the document and the corpus.

60
00:04:26.540 --> 00:04:30.760
Referring back to a previous module
in this course, we can also compute

61
00:04:30.760 --> 00:04:34.370
the term frequency and inverse
document frequency for the collection.

62
00:04:36.470 --> 00:04:40.250
An inverted index is
essentially an index which for

63
00:04:40.250 --> 00:04:45.850
every term stores at least the ID of
the document where the term occurs.

64
00:04:45.850 --> 00:04:48.440
Practically, other computed numbers or

65
00:04:48.440 --> 00:04:52.060
properties associated with the terms
will also be included in the index.

66
00:04:54.570 --> 00:04:58.820
Solr is an open source
enterprise search platform.

67
00:04:58.820 --> 00:05:04.190
The heart of Solr is its search
functionality built for full text search.

68
00:05:04.190 --> 00:05:07.110
However, Solr provides much
more than tech search.

69
00:05:08.620 --> 00:05:14.780
It can take any structured document,
even CSV files

70
00:05:14.780 --> 00:05:19.490
which can be broken up into fields,
and can index each field separately.

71
00:05:20.850 --> 00:05:24.640
Full text indexes where text columns
are supplemented by indexes for

72
00:05:24.640 --> 00:05:29.735
other types of data, including numeric
data, dates, geographic coordinates, and

73
00:05:29.735 --> 00:05:33.390
fields where domains are limited
to an emergent set of values.

74
00:05:35.190 --> 00:05:40.230
Solr provides other facilities
like faceted search and

75
00:05:40.230 --> 00:05:43.440
highlighting of terms that match a query.

76
00:05:43.440 --> 00:05:46.970
Now if you're not familiar
with the term faceted search,

77
00:05:46.970 --> 00:05:50.550
let's look at the screenshot
from amazon.com.

78
00:05:50.550 --> 00:05:52.960
I performed a search on the string,
Dell laptop.

79
00:05:54.260 --> 00:05:56.680
Consider the highlighted
part of the image.

80
00:05:58.400 --> 00:06:02.230
Each laptop record carries a lot of
attributes like the display size,

81
00:06:02.230 --> 00:06:04.499
the processor speed,
the amount of memory, and so forth.

82
00:06:05.680 --> 00:06:10.480
These attributes can be put into builds
like processor type has Intel i5, i7, etc.

83
00:06:11.950 --> 00:06:17.098
Faceted search essentially extracts
the individual values of these fields and

84
00:06:17.098 --> 00:06:22.188
displays them back to the user, usually
with a count of the number of records.

85
00:06:22.188 --> 00:06:26.466
We see this in the upper
part of the marked portion,

86
00:06:26.466 --> 00:06:31.452
which says there are 5619
laptops per 411 tablets.

87
00:06:31.452 --> 00:06:32.600
These are called facets.

88
00:06:33.750 --> 00:06:37.810
If a user clicks on a facet,
documents with only those values,

89
00:06:37.810 --> 00:06:40.250
that's just the tablets,
will be presented back to the user.

90
00:06:42.380 --> 00:06:45.860
Now let's get back to the question
of what a term is, and

91
00:06:45.860 --> 00:06:47.550
how a Solr system should know it.

92
00:06:49.870 --> 00:06:55.730
Solr allows the system designer to
specify how to parse a document,

93
00:06:55.730 --> 00:07:01.770
by instructing how to tokenize
a document and how to filter it.

94
00:07:01.770 --> 00:07:06.720
Tokenization is the process of
breaking down the characters read.

95
00:07:06.720 --> 00:07:10.540
For example, one can break
the stream at white spaces, and

96
00:07:10.540 --> 00:07:13.170
get all the words as tokens.

97
00:07:13.170 --> 00:07:17.803
Then, it can filter out the punctuation
like the period, the apostrophe, and so

98
00:07:17.803 --> 00:07:19.631
on, just to get the pure words.

99
00:07:21.984 --> 00:07:24.410
The code snippet on the right
essentially achieves this.

100
00:07:25.510 --> 00:07:29.960
It uses a standard tokenizer that gets
the words with immediate punctuation.

101
00:07:31.100 --> 00:07:34.730
The first filter removes the punctuations.

102
00:07:34.730 --> 00:07:38.040
The second filter turns
everything into lowercase.

103
00:07:38.040 --> 00:07:41.960
And the third filter uses
a synonym file to ensure that

104
00:07:41.960 --> 00:07:46.140
all the synonyms get the same
token after ignoring the case.

105
00:07:46.140 --> 00:07:50.828
The last filter removes common
English words like a and the.

106
00:07:52.401 --> 00:07:56.330
While a similar process would need to
happen when we get the query string.

107
00:07:58.080 --> 00:08:01.245
It will also need to go through a
tokenization and token filtering process.

108
00:08:03.933 --> 00:08:07.918
In the query analyzer example, there
are six filters within the tokenizer.

109
00:08:09.060 --> 00:08:12.130
We use a pattern tokenizer which
will remove the white spaces and

110
00:08:12.130 --> 00:08:15.020
periods and semi-colon.

111
00:08:15.020 --> 00:08:19.710
The common grams filter creates
tokens out of pairs of terms, and

112
00:08:19.710 --> 00:08:23.470
in doing so, makes sure that words
in the stopword file are used.

113
00:08:23.470 --> 00:08:24.750
So if we have the string,

114
00:08:24.750 --> 00:08:29.560
the cat, the term the should
not be ignored in this filter.

115
00:08:31.240 --> 00:08:34.520
Now, the filters here
are executed in order.

116
00:08:36.180 --> 00:08:39.720
After the common grams
filter is already done,

117
00:08:39.720 --> 00:08:42.500
the next filter removes all
the stopwords in the file.

118
00:08:44.320 --> 00:08:49.190
The fifth filter makes sure that if
the queries coming from a web form,

119
00:08:49.190 --> 00:08:51.240
all the HTML characters are stripped off.

120
00:08:52.490 --> 00:08:57.360
Finally, the remaining words are stemmed,
so that runs and

121
00:08:57.360 --> 00:09:01.440
running in the query would match
the word run in the document.

122
00:09:04.170 --> 00:09:08.935
We'll end this section with a discussion
on Solr queries, that is searches.

123
00:09:12.370 --> 00:09:16.450
We present a CSV file with nine
records and seven attributes.

124
00:09:18.280 --> 00:09:23.900
We issue queries against
the system by posing a web query.

125
00:09:23.900 --> 00:09:27.850
In these examples, we show some of
the queries one can post to the system.

126
00:09:29.060 --> 00:09:32.187
This will be covered in more detail
during the hands-on session.

127
00:09:33.220 --> 00:09:39.200
Just notice that the q equal to is a query
and the fl is what you want to back.