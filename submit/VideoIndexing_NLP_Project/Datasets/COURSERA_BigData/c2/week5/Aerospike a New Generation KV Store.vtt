WEBVTT

1
00:00:02.380 --> 00:00:03.730
In a previous lecture,

2
00:00:03.730 --> 00:00:08.440
we said that new interesting solutions are
emerging in the big data product space.

3
00:00:09.780 --> 00:00:13.718
While these solutions do not have
the full fledged power of a DBMS,

4
00:00:13.718 --> 00:00:18.800
they offer novel feature combinations that
suit some application space just right.

5
00:00:19.970 --> 00:00:23.380
One of these products is Aerospike,

6
00:00:23.380 --> 00:00:28.040
which calls itself a distributed
NoSQL database and

7
00:00:28.040 --> 00:00:32.340
key value store, and
goes on to say that it is architected for

8
00:00:32.340 --> 00:00:36.700
the performance needs of
today's web scale applications.

9
00:00:36.700 --> 00:00:40.630
The diagram here is from
an Aerospike whitepaper.

10
00:00:41.920 --> 00:00:45.990
It shows how Aerospike relates to
the ecosystem for which it is designed.

11
00:00:47.340 --> 00:00:52.585
The top layer shows several applications
for real time consumer facing systems,

12
00:00:52.585 --> 00:00:57.115
such as travel recommendation systems,
pricing engines used for

13
00:00:57.115 --> 00:01:00.455
stock market applications,
real time decision systems that

14
00:01:00.455 --> 00:01:04.145
analyze data to figure out whether
an investment should be done and so forth.

15
00:01:05.405 --> 00:01:08.215
Now, all of these systems
have the common need

16
00:01:08.215 --> 00:01:12.385
that large amounts of data should be
accessible to them at any point of time.

17
00:01:14.090 --> 00:01:18.939
The Aerospike system can interoperate
with Hadoop-based systems, so

18
00:01:18.939 --> 00:01:23.170
Spark, or a Legacy database, or
even a real time data source.

19
00:01:23.170 --> 00:01:27.761
It can exchange large volumes
of data with any such source and

20
00:01:27.761 --> 00:01:32.274
serve fast lookups and
queries to the applications above.

21
00:01:32.274 --> 00:01:36.420
Now that translates to a very
high availability robust and

22
00:01:36.420 --> 00:01:38.460
strong consistency needs.

23
00:01:40.720 --> 00:01:46.600
The figure here presents a high level
architecture diagram of Aerospike.

24
00:01:46.600 --> 00:01:51.010
The first item to notice here
is what they call a fast bat,

25
00:01:52.410 --> 00:01:55.500
which essentially refers to
the left side of the architecture.

26
00:01:57.200 --> 00:02:00.700
The client system processes transactions.

27
00:02:00.700 --> 00:02:05.730
That is data that are primarily managed in
a primary index that is a key value store.

28
00:02:07.180 --> 00:02:11.950
This index stays in memory for
operational purposes.

29
00:02:11.950 --> 00:02:16.430
However, the server also interacts with
the storage layer for persistence.

30
00:02:17.910 --> 00:02:21.290
The storage layer uses three
kinds of storage systems,

31
00:02:22.770 --> 00:02:27.940
in memory with a dynamic RAM or
DRAM, a regular spinning disk,

32
00:02:29.040 --> 00:02:34.190
and flash/SSD, which is solid state device
for fast loading of data when needed.

33
00:02:35.410 --> 00:02:38.160
In fact the Aerospike system

34
00:02:38.160 --> 00:02:42.210
has optimized its performance with
characteristics of an SSD in mind.

35
00:02:44.320 --> 00:02:48.890
For those of who are not sure
what an SSD is, you can think of

36
00:02:48.890 --> 00:02:53.500
an SSD as a kind of storage device
whose random read performance is much

37
00:02:53.500 --> 00:02:57.610
faster than speeding hard disk and the
write performance is just a little slower.

38
00:02:59.150 --> 00:03:04.556
One vendor recently advertised its SSD
has sequence share read speeds of up to

39
00:03:04.556 --> 00:03:09.980
2,500 MBPS and the sequential write
speeds as fast as 1,500 MBPS.

40
00:03:12.435 --> 00:03:14.810
Now why is this important
in a big data discussion?

41
00:03:16.890 --> 00:03:21.300
When we speak of scalability, grade
efficiency, fast transactions, and so

42
00:03:21.300 --> 00:03:25.940
forth, we often do not mention
that part of the performance

43
00:03:25.940 --> 00:03:29.950
guarantee is governed by the combination
of hardware and software.

44
00:03:31.200 --> 00:03:36.200
So the ability to offer more efficient
persistent storage with fast IO

45
00:03:36.200 --> 00:03:41.540
implies that while a significant amount
of information can be stored on disk,

46
00:03:41.540 --> 00:03:45.714
it can be done without compromising
the overall system performance for

47
00:03:45.714 --> 00:03:48.819
an environment that
needs fast data loading.

48
00:03:51.490 --> 00:03:55.410
The second point of uniqueness
is a secondary index there.

49
00:03:56.760 --> 00:04:01.022
Aerospike built secondary index
fields that are non-primary keys.

50
00:04:01.022 --> 00:04:05.192
A non-primary key is a key attribute
that makes a tuple unique,

51
00:04:05.192 --> 00:04:07.560
but it has not been
chosen as a primary key.

52
00:04:08.940 --> 00:04:12.980
In Aerospike, secondary indices
are stored in main memory.

53
00:04:12.980 --> 00:04:17.770
They are built on every node in a cluster
and co-located with the primary index.

54
00:04:18.960 --> 00:04:23.224
Each secondary index entry
contains references to records,

55
00:04:23.224 --> 00:04:25.196
which are local to the node.

56
00:04:27.240 --> 00:04:32.414
As a key value store,
Aerospike uses standard database like

57
00:04:32.414 --> 00:04:39.450
scalar types like integer, string, and
so forth, as well as lists like Reddis.

58
00:04:39.450 --> 00:04:46.340
The map type is similar to the hashtag of
Reddis and contains attribute value pairs.

59
00:04:46.340 --> 00:04:52.390
Since it is focused on real time web
application, it supports geospatial data,

60
00:04:52.390 --> 00:04:56.930
like places with latitude and
longitude values or regency polygons.

61
00:04:59.020 --> 00:05:04.300
This allows them to perform KV store
operations, for example, like is

62
00:05:04.300 --> 00:05:09.640
the location of this in La Jolla,
which is a point-in-polygon query.

63
00:05:09.640 --> 00:05:14.120
Or a distance query, like find hotels
within three miles of my location.

64
00:05:15.700 --> 00:05:18.230
KV queries are constructed
programmatically.

65
00:05:19.750 --> 00:05:26.506
Now interestingly, Aerospike also provides
a more declarative language called AQL.

66
00:05:26.506 --> 00:05:31.840
AQL looks very similar to SQL,

67
00:05:31.840 --> 00:05:34.520
the Standard Query Language for
relational databases.

68
00:05:35.830 --> 00:05:37.360
A query like select name and

69
00:05:37.360 --> 00:05:43.460
age from user star profiles projects
out the name and age values

70
00:05:43.460 --> 00:05:48.250
from the profile's record set that
belongs to the ding space called users.

71
00:05:49.750 --> 00:05:53.080
The language also allows
advocate functions, like sum and

72
00:05:53.080 --> 00:05:56.800
average, and other user defined functions,

73
00:05:56.800 --> 00:06:00.379
which the system may evaluate through
a map produced time operation.

74
00:06:03.160 --> 00:06:06.880
We mentioned earlier that while most
medium assists today offer base

75
00:06:06.880 --> 00:06:11.850
guarantees, Aerospike, despite being
a distributor information system,

76
00:06:11.850 --> 00:06:13.740
actually offers ACID guarantees.

77
00:06:14.750 --> 00:06:17.250
This is accomplished using
a number of techniques.

78
00:06:19.338 --> 00:06:23.100
We'll consider a few of them to give you
a flavor of the mechanisms that current

79
00:06:23.100 --> 00:06:28.380
systems use to balance between
large scale data management and

80
00:06:28.380 --> 00:06:32.010
transaction management in a cluster
where nodes can join or leave.

81
00:06:33.800 --> 00:06:37.499
You may recall that consistency
means two different things,

82
00:06:38.640 --> 00:06:42.460
one is to ensure that all constraints,
like domain constraints, are satisfied.

83
00:06:43.940 --> 00:06:46.905
The second meaning is applied
to distributor systems and

84
00:06:46.905 --> 00:06:51.320
ensures all copies of a data
item in a cluster are in sync.

85
00:06:52.950 --> 00:06:56.040
For operations and
single keys with replication and

86
00:06:56.040 --> 00:07:01.070
secondary indices,
Aerospike provides immediate consistency

87
00:07:01.070 --> 00:07:04.720
using synchronous writes to
replicas within the cluster.

88
00:07:05.860 --> 00:07:10.083
Synchronous write means the write
process will be considered

89
00:07:10.083 --> 00:07:13.420
successful only if
the replica is all subdated.

90
00:07:14.768 --> 00:07:18.829
No other write is allowed on the record
while the object of replica is pending.

91
00:07:20.520 --> 00:07:24.949
So what happens if there is an increase
in the number of write operations due to

92
00:07:24.949 --> 00:07:26.800
an increase in ingestion rate?

93
00:07:27.890 --> 00:07:33.490
In Aerospike, it is possible to relax
this immediate consistency condition

94
00:07:33.490 --> 00:07:37.950
by bypassing some of
the consistency checks.

95
00:07:37.950 --> 00:07:42.670
But if this is done, eventual
consistency will still be enforced.

96
00:07:45.080 --> 00:07:50.890
Durability is achieved by storing data
in the flash SSD on every node and

97
00:07:50.890 --> 00:07:52.530
performing direct reads from the flash.

98
00:07:54.000 --> 00:07:57.920
Now durability is also maintained through
the process of replication because we have

99
00:07:57.920 --> 00:07:59.790
multiple copies of data.

100
00:07:59.790 --> 00:08:05.870
So even if one node fails, the latest copy
of the last data is available from one or

101
00:08:05.870 --> 00:08:08.190
more replica nodes in the same cluster,

102
00:08:08.190 --> 00:08:11.350
as well as in nodes residing
in remote clusters.

103
00:08:13.550 --> 00:08:16.250
But does that just
contradict the CAP theorem?

104
00:08:17.525 --> 00:08:22.700
The CAP theorem holds when
the network is partitioned.

105
00:08:24.220 --> 00:08:27.700
That means when nodes in
different parts of the network

106
00:08:27.700 --> 00:08:29.360
have different data content.

107
00:08:30.810 --> 00:08:35.750
Aerospike reduces and tries to completely
eliminate the situation by making

108
00:08:35.750 --> 00:08:41.250
sure that the master knows exactly
where all the other nodes are.

109
00:08:41.250 --> 00:08:44.260
And the replication is
happening properly even when

110
00:08:44.260 --> 00:08:46.300
the new nodes are joining the network.