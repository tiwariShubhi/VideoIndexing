WEBVTT

1
00:00:01.510 --> 00:00:05.380
So now from MongoDB we will go to
Aerospike which is a key value store.

2
00:00:07.030 --> 00:00:09.120
Key value stores typically offer an API.

3
00:00:10.480 --> 00:00:14.630
That is the way to access data using a
programming language like Python or Java.

4
00:00:15.850 --> 00:00:19.620
We will take a very brief look
at Aerospike, which offers both

5
00:00:19.620 --> 00:00:23.550
a programmatic access and
a limited amount of query access to data.

6
00:00:25.550 --> 00:00:27.910
The data model of Aerospike
is illustrated here.

7
00:00:29.310 --> 00:00:34.960
Data are organized in lean spaces which
can be in memory or on flash disks.

8
00:00:36.410 --> 00:00:38.840
Name spaces are top level data containers.

9
00:00:39.980 --> 00:00:45.080
The way you collect data in name spaces
relates to how data is stored and managed.

10
00:00:46.270 --> 00:00:50.395
So name space contains records,
indexes, and policies.

11
00:00:50.395 --> 00:00:55.130
Now policies dictate name space
behavior like how data is stored,

12
00:00:55.130 --> 00:00:57.790
whether it's on RAM or disk, or

13
00:00:57.790 --> 00:01:02.150
how how many replicas exist for
a record, and when records expire.

14
00:01:04.840 --> 00:01:08.606
A name space can contain sets,
you can think of them as tables.

15
00:01:08.606 --> 00:01:11.470
So here there are two sets,
people and places,

16
00:01:11.470 --> 00:01:15.140
and a set of records
which are not in any set.

17
00:01:16.750 --> 00:01:20.620
Within a record,
data is stored in one or many bins.

18
00:01:21.980 --> 00:01:25.490
Bins consist of a name and a value.

19
00:01:27.820 --> 00:01:31.970
The example written here is in Java, and

20
00:01:31.970 --> 00:01:34.230
you don't have to know Java to
follow the main point here.

21
00:01:36.068 --> 00:01:40.470
Here we are creating indexes on key
value data that's handled by Aerospike.

22
00:01:41.780 --> 00:01:43.500
This data set comes from Twitter.

23
00:01:44.990 --> 00:01:50.310
Each field of a tweet is extracted and
put into Aerospike as a key value pair.

24
00:01:50.310 --> 00:01:55.420
So we declare the namespace to be

25
00:01:55.420 --> 00:01:59.880
example, and the record set to be tweet.

26
00:02:01.510 --> 00:02:07.460
The name of the index to be TestIndex,
and the name of the bin as user name.

27
00:02:09.490 --> 00:02:14.330
Since this index is stored
on disk an SQL-like command,

28
00:02:14.330 --> 00:02:18.638
like SHOW INDEX, shows the content
of the index as you can see here.

29
00:02:18.638 --> 00:02:23.220
This routine shows

30
00:02:23.220 --> 00:02:27.419
how data can be inserted into
Aerospike programmatically.

31
00:02:27.419 --> 00:02:31.500
Again, the goal is to point out a few
salient aspects of data insertion

32
00:02:31.500 --> 00:02:33.090
regardless of the syntax of the language.

33
00:02:33.090 --> 00:02:38.120
Now since this is a key value store,
one first needs to define the key.

34
00:02:40.220 --> 00:02:45.414
This line here says that the key in
the namespace call example, and set call

35
00:02:45.414 --> 00:02:50.699
tweet, is the value of the function getId,
which returns the ID of a tweet.

36
00:02:53.288 --> 00:02:57.028
When the data is populated,
we are essentially creating bins.

37
00:02:57.028 --> 00:03:01.500
Here, user name is the attribute and

38
00:03:01.500 --> 00:03:04.290
the screen name obtained
from the tweet is the value.

39
00:03:05.510 --> 00:03:09.440
The actual insertion
happens here in the client.

40
00:03:11.200 --> 00:03:15.574
The client.put statement,
where we need to mention the key and

41
00:03:15.574 --> 00:03:18.510
the bins we have just created.

42
00:03:18.510 --> 00:03:21.260
Now why are we inserting
two bins at a time?

43
00:03:21.260 --> 00:03:23.140
Two bins with two ids and user name?

44
00:03:24.150 --> 00:03:27.180
This is an idiosyncrasy
of the Aerospike client.

45
00:03:29.810 --> 00:03:34.190
After data is inserted one can
create other data using AQL

46
00:03:34.190 --> 00:03:35.450
which is very much like SQL.

47
00:03:36.870 --> 00:03:41.920
This screenshot shows a part of
the output of a simple select star query.

48
00:03:44.680 --> 00:03:49.100
Now in your hands-on exercise, you'll be
able to play with the Aerospike data.

49
00:03:50.520 --> 00:03:56.740
This is just a screenshot showing
the basic query syntax of AQL,

50
00:03:56.740 --> 00:04:00.110
that is Aerospike Query Language,
and a few examples.

51
00:04:01.370 --> 00:04:04.960
The last two lines show a couple of
interesting features of the language.

52
00:04:06.090 --> 00:04:12.200
The operation between 0 and 99,
is a nicer way of stating a range query,

53
00:04:12.200 --> 00:04:14.850
which gives a lower and
upper limits on a variable.

54
00:04:16.030 --> 00:04:20.550
The last line shows the operation cost,

55
00:04:20.550 --> 00:04:24.670
which transforms one type
of data to another type.

56
00:04:24.670 --> 00:04:29.047
Here it transforms coordinates,
that is latitude and longitude data,

57
00:04:29.047 --> 00:04:33.784
to a JSON format called GeoJSON which is
designed to represent geographic data

58
00:04:33.784 --> 00:04:35.092
in a JSON structure.

59
00:04:38.762 --> 00:04:42.421
We will finish our coverage of queries
with a quick reference to an advanced

60
00:04:42.421 --> 00:04:44.870
topic, which is beyond
the scope of this course.

61
00:04:46.068 --> 00:04:50.780
Now you have seen in prior courses that
streaming data is complex to process

62
00:04:50.780 --> 00:04:53.310
because a stream is infinite in nature.

63
00:04:54.480 --> 00:04:57.640
Now does this have any impact on
query languages and evaluation?

64
00:04:58.790 --> 00:05:01.840
The answer is that it absolutely does.

65
00:05:01.840 --> 00:05:03.590
We'll mention one such impact here.

66
00:05:05.150 --> 00:05:08.700
This shows a pictorial
depiction of streaming data.

67
00:05:09.890 --> 00:05:14.170
The data is segmented into five pieces,
shown in the white boxes in the upper row.

68
00:05:15.620 --> 00:05:20.280
These can be gathered, for example every
few seconds, or every 200 data objects.

69
00:05:21.980 --> 00:05:24.970
The query defines a window to select

70
00:05:24.970 --> 00:05:27.770
key of these data objects
as a unit of processing.

71
00:05:27.770 --> 00:05:28.860
Here case three.

72
00:05:30.000 --> 00:05:34.120
So three units of data
are picked up in a window unit.

73
00:05:34.120 --> 00:05:37.020
To get the next window it
is moved by two units,

74
00:05:38.030 --> 00:05:40.280
this is called a slide of the window.

75
00:05:41.970 --> 00:05:46.030
Since the window size is three and
the slide is two,

76
00:05:46.030 --> 00:05:50.130
one unit of information overlaps
between the two consecutive windows.

77
00:05:51.450 --> 00:05:56.056
The lower line in this diagram shows
the initialized item, let's ignore it,

78
00:05:56.056 --> 00:06:03.980
followed by two window sets of
data records for processing.

79
00:06:05.090 --> 00:06:08.670
Thus the query language therefore,
will have to specify a query

80
00:06:08.670 --> 00:06:14.650
that's an SQL query, over a window,
which is also specified in the query.

81
00:06:14.650 --> 00:06:18.980
Now in a traffic data stream example,
the SQL statement might look like this.

82
00:06:20.330 --> 00:06:23.490
Where the window size is 30 second, and

83
00:06:23.490 --> 00:06:26.520
the slide is the same size as window
giving output every 30 seconds.

84
00:06:27.760 --> 00:06:32.650
So streaming data results in changes
in both the query language and

85
00:06:32.650 --> 00:06:34.560
the way queries are processed.