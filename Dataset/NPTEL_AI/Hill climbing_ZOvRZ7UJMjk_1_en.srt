1
00:00:10,789 --> 00:00:26,100
So, we were looking at heuristic search and
you saw this algorithm column best first

2
00:00:26,100 --> 00:00:44,210
search. So, the way that this algorithm works
is that it is the heuristic function h of

3
00:00:44,210 --> 00:00:54,820
n
which gives you an estimate of the distance

4
00:00:54,820 --> 00:01:07,500
to the goal and what essentially best first
search does is that it sorts the open list.

5
00:01:07,500 --> 00:01:15,109
So, let us say new is a set of nodes that
is

6
00:01:15,109 --> 00:01:21,469
generated by Mogen and the basic difference
between best first and early algorithm if

7
00:01:21,469 --> 00:01:37,780
we
saw was that open is modified as follows.

8
00:01:37,780 --> 00:01:57,090
If we do not have this sort h then you would
simply have offend the new loads to the tail

9
00:01:57,090 --> 00:02:01,689
of open and then it is behavior would have
been like depth first search, now what you

10
00:02:01,689 --> 00:02:03,530
are
doing is that we are sorting on this heuristic

11
00:02:03,530 --> 00:02:11,319
function h. So, the best nodes come to the
head of the lets see we always speak node

12
00:02:11,319 --> 00:02:28,218
that strategy is does not change we always
pick the node from the head of the open. Then,

13
00:02:28,218 --> 00:02:33,280
start does all the processing that we do
and eventually add the new nodes open in sort.

14
00:02:33,280 --> 00:02:39,438
.Now, when I say sort we essentially mean
conceptually we have sorting it, but of course

15
00:02:39,438 --> 00:02:45,009
from the computational point of you it would
be quite silly to sort open this every time

16
00:02:45,009 --> 00:02:59,658
and, but we really do is that in set we maintain
open is a priority cube. This is an efficient

17
00:02:59,658 --> 00:03:04,509
way of maintaining a sorted list of elements
and you can keep adding new elements to

18
00:03:04,509 --> 00:03:11,789
that, now if you look at the behavior of best
first search.

19
00:03:11,789 --> 00:03:12,789
.

20
00:03:12,789 --> 00:03:20,568
What it does is it is starts with some node
then it puts it into closed and adds it is

21
00:03:20,568 --> 00:03:27,128
successes to the open list. So, the single
circles are open and the double circles are

22
00:03:27,128 --> 00:03:30,718
closed
then it picks one of them whichever has the

23
00:03:30,718 --> 00:03:40,218
best h value and expands that 
now

24
00:03:40,218 --> 00:03:44,370
everything else everything in single circles
season open list.

25
00:03:44,370 --> 00:03:50,579
It can take any one of them depending on the
h value, so let us say that it expands this

26
00:03:50,579 --> 00:03:58,748
node next and I am assuming here a branching
factor 4 and the search proceeds in this

27
00:03:58,748 --> 00:04:08,579
fashion may be this is the next one that it
expands. Since it always looking at the

28
00:04:08,579 --> 00:04:12,930
heuristic function it not necessary that it
will expand one of these four any one of them

29
00:04:12,930 --> 00:04:15,959
could suddenly turn out to be better than
that. This is because this is my gradually

30
00:04:15,959 --> 00:04:20,610
become worst and worst in terms of heuristic
value and is possible that after this doing

31
00:04:20,610 --> 00:04:23,090
this it suddenly goes off in the different
direction.

32
00:04:23,089 --> 00:04:36,759
.So, it expands this and then may be it expands
this, so the search can, so the jump around

33
00:04:36,759 --> 00:04:49,539
this entire list of nodes is essentially open
list 

34
00:04:49,540 --> 00:04:55,060
if you can make this out. So, the open list
is basically a list of all possible candidates

35
00:04:55,060 --> 00:04:59,120
that it is generated which could be inspect
that

36
00:04:59,120 --> 00:05:10,840
some later point of time. It is a global list
and best first search is a global search

37
00:05:10,839 --> 00:05:18,779
algorithm. So, what are the properties of
this algorithm that we have looked at properties

38
00:05:18,779 --> 00:05:20,279
from four perspective?

39
00:05:20,279 --> 00:05:21,279
.

40
00:05:21,279 --> 00:05:43,439
This is time space quality and completeness,
so if you look at this algorithm from this

41
00:05:43,439 --> 00:05:47,469
four qualities we can say that it is complete
because the only thing it does differently

42
00:05:47,470 --> 00:05:51,320
from best first search. Best first search
is there it is sorts opened this; otherwise

43
00:05:51,319 --> 00:05:54,180
it will
always take one node from open and expand

44
00:05:54,180 --> 00:05:57,740
it and so on. So, put at least for finite
spaces

45
00:05:57,740 --> 00:06:08,759
it is complete the quality of the solution
as we saw is not necessarily an optimal path.

46
00:06:08,759 --> 00:06:09,759
..

47
00:06:09,759 --> 00:06:20,150
So, an example of that is if this is the start
node and it has let us say some source and

48
00:06:20,149 --> 00:06:23,539
the
goal is somewhere here then it slightly that

49
00:06:23,540 --> 00:06:27,860
this best of search will go along this path.
So,

50
00:06:27,860 --> 00:06:34,050
maybe it will expand this next generated structure
source may be it will expand this

51
00:06:34,050 --> 00:06:39,310
generated structure source and so on. So,
it will find some path to the goal which will

52
00:06:39,310 --> 00:06:44,230
have some number of nodes where is this possible
in that this one had a direct link to the

53
00:06:44,230 --> 00:06:48,890
goal in which case it would not have on this
path of length to.

54
00:06:48,889 --> 00:06:53,449
Remember that we are not counting we are not
allocating any h cost we are viewing.

55
00:06:53,449 --> 00:06:58,479
Simply counting how many states are there
in the solution first and this situation it

56
00:06:58,480 --> 00:07:00,930
will
not find the shortest path, which is this

57
00:07:00,930 --> 00:07:03,439
one or it will go in this direction.

58
00:07:03,439 --> 00:07:09,389
We also saw in the example that if you have
if you have a city map and suddenly there

59
00:07:09,389 --> 00:07:11,740
is
a river on the way. Then, the first best first

60
00:07:11,740 --> 00:07:15,939
search will drive it towards the goal and
suddenly see that there is a no bridge and

61
00:07:15,939 --> 00:07:18,569
it will have to take a and find the longer
path

62
00:07:18,569 --> 00:07:26,019
decision. So, quality is not guarantee we
do not necessarily get an optimized path now

63
00:07:26,019 --> 00:07:29,899
as
to time and space complexity. It really depends

64
00:07:29,899 --> 00:07:40,209
upon h 
if the heuristic function is good

65
00:07:40,209 --> 00:07:46,399
then it will drive the search towards this
goal directly and you will find goal in linear

66
00:07:46,399 --> 00:07:50,509
time requiring linear space it is like a algorithm.

67
00:07:50,509 --> 00:07:56,259
.If it will directly goes straight towards
the goal, but in factors of course that does

68
00:07:56,259 --> 00:07:57,649
not
happen in factors it is very difficult to

69
00:07:57,649 --> 00:08:00,549
devise heuristic function which has so good
and in

70
00:08:00,550 --> 00:08:11,590
practice it tense to be exponential. So, this
is something that we want to try and that

71
00:08:11,589 --> 00:08:13,519
we
do not want algorithm which are exponential

72
00:08:13,519 --> 00:08:20,959
in nature, so what can we do to devise
algorithm which will require lesser space

73
00:08:20,959 --> 00:08:24,168
and lesser time complexity.

74
00:08:24,168 --> 00:08:25,168
.

75
00:08:25,168 --> 00:08:47,318
So, let us look at this variation of this
algorithm in which we modify as follows we

76
00:08:47,318 --> 00:08:56,969
simply do this that open is the sorted version
of the new nodes that we have generated.

77
00:08:56,970 --> 00:09:06,180
So, what have we done here we thrown away
all this nodes that we have generated

78
00:09:06,179 --> 00:09:07,179
earlier.

79
00:09:07,179 --> 00:09:08,179
..

80
00:09:08,179 --> 00:09:18,739
So, in this case the open list is set of includes
this nodes it is big list nodes that we have

81
00:09:18,740 --> 00:09:22,470
generated sometime in the past and nodes that
we have just generated everything is

82
00:09:22,470 --> 00:09:29,610
included into the open list. So, this is like
a search there is now what we are saying is

83
00:09:29,610 --> 00:09:35,879
do
not do that just maintain just look at the

84
00:09:35,879 --> 00:09:38,659
latest note that what they would generated
the

85
00:09:38,659 --> 00:09:43,740
new the newest note that was generated and
just pick the best amongst them.

86
00:09:43,740 --> 00:09:44,740
.

87
00:09:44,740 --> 00:09:51,539
.So, what is the behavior of this algorithm
you start with some search some start node

88
00:09:51,539 --> 00:09:54,879
and
let us assume that we keep that of the parent

89
00:09:54,879 --> 00:10:03,470
point you generate the children. You pick
one of them let us say the same heuristic

90
00:10:03,470 --> 00:10:09,329
function we are using we take this node, but
we

91
00:10:09,328 --> 00:10:18,429
generated children. Now, this algorithm is
saying that the set of candidates is only

92
00:10:18,429 --> 00:10:21,679
these
children of this node that we have generated

93
00:10:21,679 --> 00:10:25,368
and we have forgotten about those are the
nodes. So, in effect we have deleted them,

94
00:10:25,369 --> 00:10:29,670
so those nodes no longer exist, so open as
we

95
00:10:29,669 --> 00:10:36,599
can see is going to be a shorter list then
we generate the third load form here generated

96
00:10:36,600 --> 00:10:44,620
children and we throw away this.

97
00:10:44,620 --> 00:10:54,119
So, what is happened with this variation is
that the search has access only to the latest

98
00:10:54,119 --> 00:11:00,990
nodes that have been generated only to the
neighbors of the current node it is infect.

99
00:11:00,990 --> 00:11:05,259
Once we are going to do this, you do not your
need to sort this thing we can simply

100
00:11:05,259 --> 00:11:18,389
modify the algorithm as follows that next
and next is a name of a node it is simply

101
00:11:18,389 --> 00:11:35,110
the
best of current. So, essentially what we are

102
00:11:35,110 --> 00:11:37,639
saying is at if you are at current node, so
for

103
00:11:37,639 --> 00:11:46,360
example, if this is the current node then
you move to the next node which is this let

104
00:11:46,360 --> 00:11:51,070
us
say this one. So, you have a here and then

105
00:11:51,070 --> 00:11:54,990
you simply move to this one and that is the
move that you make here.

106
00:11:54,990 --> 00:12:03,589
So, that is current and this is next you see
because we do not want to waste time sorting

107
00:12:03,589 --> 00:12:07,420
because we are not going to use those anywhere
later you see once you decided this is

108
00:12:07,419 --> 00:12:12,719
the best of the of this current. We can directly
select that and this can be done in linear

109
00:12:12,720 --> 00:12:32,670
time of first and we just put this in a loop
while next is better than current, we just

110
00:12:32,669 --> 00:12:35,979
keep
doing this as long as we can see a better

111
00:12:35,980 --> 00:12:44,000
node move to the better node. So, one thing
that

112
00:12:44,000 --> 00:12:50,578
we have done here is that we have changed
the domination criteria when we are doing

113
00:12:50,578 --> 00:13:05,719
best first search the domination criteria
was either goal test or open empty.

114
00:13:05,720 --> 00:13:12,899
This means that either we have found paths
to the goal or they are no more candidates

115
00:13:12,899 --> 00:13:16,070
left in which case there is no path to the
goal because the algorithm is a complete

116
00:13:16,070 --> 00:13:24,360
algorithm. You would terminate in the positive
piece only when the goal test function

117
00:13:24,360 --> 00:13:31,230
returns true now we have these criteria while
next is better than current.

118
00:13:31,230 --> 00:13:32,230
..

119
00:13:32,230 --> 00:13:36,308
So, what we mean that better this that in
the case of heuristic function that we were

120
00:13:36,308 --> 00:13:41,009
talking about it simply means the heuristic
value of next is better than the heuristic

121
00:13:41,009 --> 00:13:47,860
value
of current in. If the heuristic value of the

122
00:13:47,860 --> 00:13:51,360
goal is 0, then it should be lower than the
value

123
00:13:51,360 --> 00:13:54,480
of the current node decision.

124
00:13:54,480 --> 00:13:59,600
So, you have changed the termination criteria
simply and we have converted this into an

125
00:13:59,600 --> 00:14:16,519
optimization problem, we are saying that optimize
the value of heuristic function. So,

126
00:14:16,519 --> 00:14:21,509
instead of a state space search algorithm,
we have now converted into an optimization

127
00:14:21,509 --> 00:14:28,318
problem and said find the node with a best
value rich if you see and we keep moving

128
00:14:28,318 --> 00:14:34,928
forward till we find the better value of this.

129
00:14:34,928 --> 00:14:35,928
..

130
00:14:35,928 --> 00:14:43,360
Now, if you consider your situation, there
you are blind folded and you are standing

131
00:14:43,360 --> 00:14:46,879
on
the slop of a hill side and you have been

132
00:14:46,879 --> 00:14:50,769
told to go to the top of the hill then what
is the

133
00:14:50,769 --> 00:15:01,659
algorithm that you would follow is, so this
is you standing blind folded. The algorithm

134
00:15:01,659 --> 00:15:10,118
that you would follow is that you would pose
possibly take a step in all direction well

135
00:15:10,119 --> 00:15:15,790
some income this set of direction. Then, move
forward to that direction which seems to

136
00:15:15,789 --> 00:15:20,969
be going up, now this is a two dimensional
world or a one dimensional world in which

137
00:15:20,970 --> 00:15:22,990
you can only move left or right.

138
00:15:22,990 --> 00:15:27,159
Then, you can see that if you go right you
will be going higher if you go left you will

139
00:15:27,159 --> 00:15:31,509
be
going lower, so you go right, which is exactly

140
00:15:31,509 --> 00:15:35,990
what this algorithm is doing that it set of
look exploring the neighborhood of the current

141
00:15:35,990 --> 00:15:36,990
state.

142
00:15:36,990 --> 00:15:42,039
Then, saying that if there is a better neighbor
it moves to that state next is best of this

143
00:15:42,039 --> 00:16:01,439
thing and you keep doing this still next is
better than current actually to be more precise.

144
00:16:01,440 --> 00:16:05,889
You should have the check at this stage itself
that you should check whether next is

145
00:16:05,889 --> 00:16:14,339
better and then only move to the next in principle
what you are doing is you are moving

146
00:16:14,339 --> 00:16:19,310
along the steepest gradient. In this example,
we can say that we are doing steepest

147
00:16:19,309 --> 00:16:36,438
gradient ascent 

148
00:16:36,438 --> 00:16:41,549
and it is not surprising that this algorithm
is actually call hill climbing.

149
00:16:41,549 --> 00:16:55,539
So, if I remove this version now becomes a
little clear to watch, so this algorithm called

150
00:16:55,539 --> 00:16:56,909
.hill climbing algorithm.

151
00:16:56,909 --> 00:17:01,238
Essentially, it is analogous to climbing a
hill blind folded and we just move in the

152
00:17:01,239 --> 00:17:05,910
direction of the speakers flow and hope to
reach the maximum. So, this means that if

153
00:17:05,910 --> 00:17:12,179
you
reach here and then you terminate and then

154
00:17:12,179 --> 00:17:20,480
you allowed to open your eyes and 
see if we

155
00:17:20,480 --> 00:17:25,150
have a local maxima then we will stopped the
local maxima exactly how will that will

156
00:17:25,150 --> 00:17:29,410
ever reached the global maxima exactly. So,
that is what I would just about to illustrate

157
00:17:29,410 --> 00:17:34,610
here, so this is the figure that I am trying
to draw that you have done this climbing and

158
00:17:34,609 --> 00:17:39,589
you have reached the place where I all the
neighbors are not better than the current

159
00:17:39,589 --> 00:17:40,589
neighbor.

160
00:17:40,589 --> 00:17:46,449
So, initially of course you have a smile on
your face saying that you have reach the

161
00:17:46,450 --> 00:17:55,380
maxima, but when you open your eyes then the
smile turns into a because then you will

162
00:17:55,380 --> 00:18:01,390
discovered that actually this. So, precisely
the problem that you have pointing out that

163
00:18:01,390 --> 00:18:07,810
this algorithm will take it to maxima or a
minima if you are minimizing because it should

164
00:18:07,809 --> 00:18:17,559
be analogous. You will get start in this local
maxima and that is the problem that terms

165
00:18:17,559 --> 00:18:22,740
because of the fact that this algorithm is
a local search algorithm. It only looks in

166
00:18:22,740 --> 00:18:26,259
the
neighborhood of a current state to decide

167
00:18:26,259 --> 00:18:30,650
where to go next unlike the best first search
algorithm which maintains a global list of

168
00:18:30,650 --> 00:18:32,080
open candidates.

169
00:18:32,079 --> 00:18:37,539
It could always move to a better candidate,
but never does says must to be said about

170
00:18:37,539 --> 00:18:42,240
this
algorithm why because of the complexity issues

171
00:18:42,240 --> 00:18:50,370
involved time space complexity
completeness as we have just observed it is

172
00:18:50,369 --> 00:18:56,729
not complete. So, hill climbing cannot take
you to the global optima it is not complete,

173
00:18:56,730 --> 00:18:59,740
it will get back of the local maxima quality
of

174
00:18:59,740 --> 00:19:01,779
the solution.

175
00:19:01,779 --> 00:19:09,139
Also, you cannot even talk of completeness,
so you cannot even talk of quality again,

176
00:19:09,140 --> 00:19:11,680
but
time and space complexity. So, what is the

177
00:19:11,680 --> 00:19:15,279
space complexity of this algorithm in a it
is

178
00:19:15,279 --> 00:19:23,420
log n if we take a bindery tree see in that
log n. So, similarly by space complexity we

179
00:19:23,420 --> 00:19:28,060
mean the size of the open disk how many nodes
does it need to keep in the memory only

180
00:19:28,059 --> 00:19:32,470
those mean number of open it explore by this
heuristic function this heuristic function

181
00:19:32,470 --> 00:19:36,420
is
there's the best. So, next on you go on incrementing

182
00:19:36,420 --> 00:19:39,950
only one node at a time is present in
the priority queue one plus four in this case

183
00:19:39,950 --> 00:19:44,500
1 plus 4. So, it is constant space complexity,

184
00:19:44,500 --> 00:19:52,609
.so this is the single major advantage of
this algorithm is that it requires constant

185
00:19:52,609 --> 00:19:55,990
space as
appose to best first and the entire algorithm

186
00:19:55,990 --> 00:19:56,990
that we saw.

187
00:19:56,990 --> 00:20:01,200
We said that is general require exponential
space off course well does not require

188
00:20:01,200 --> 00:20:11,269
exponential space, but best first search does
because it could not it had no sense of

189
00:20:11,269 --> 00:20:18,349
direction. It would say and hill climbing
also games on time because it only moves along

190
00:20:18,349 --> 00:20:23,389
the gradient it will stop moving once the
gradient becomes negative. So, in some sense

191
00:20:23,390 --> 00:20:25,800
it
will require linear time that it will take

192
00:20:25,799 --> 00:20:29,529
a if it takes n steps, it just about takes
the n steps

193
00:20:29,529 --> 00:20:35,680
and communicates with that essential. So,
the question is what is this surface appear

194
00:20:35,680 --> 00:20:41,180
talking about this hill that we are talking
about where does this surface come from.

195
00:20:41,180 --> 00:20:46,750
The answer is that this surface is defined
by the heuristic function that we are using

196
00:20:46,750 --> 00:20:48,829
to
guide such thing. So, I would want to take

197
00:20:48,829 --> 00:20:54,059
a couple of examples one example to illustrate
that you can have two different heuristic

198
00:20:54,059 --> 00:21:00,179
functions and they will define different
surfaces. Now, if the surface of the that

199
00:21:00,180 --> 00:21:08,990
you what in the space that you are searching
were to be smooth if the surface was like

200
00:21:08,990 --> 00:21:12,829
this then you can see that this algorithm
would

201
00:21:12,829 --> 00:21:17,189
have taken you to the global maxima that is
the global maxima. So, it really depends on

202
00:21:17,190 --> 00:21:20,850
nature of the problem if the nature of the
problem is searched that the heuristic function

203
00:21:20,849 --> 00:21:25,410
defines a smooth and monotonic surface then
hill climbing will work, otherwise it will

204
00:21:25,411 --> 00:21:27,259
get struck to on a local maxima.

205
00:21:27,259 --> 00:21:28,259
..

206
00:21:28,259 --> 00:21:35,940
So, let us take an example from the blocks
world domain which is a domain which is

207
00:21:35,940 --> 00:21:47,120
often used to illustrate many ideas in e i
and the domain consist of a set of children

208
00:21:47,119 --> 00:21:54,889
blocks. So, for example, you may have a b
set of blocks which are arranged like this,

209
00:21:54,890 --> 00:21:57,790
so
you can keep only one block on another block,

210
00:21:57,789 --> 00:22:03,000
so here we have free blocks and filled up
one top of the other. Then, there is the table

211
00:22:03,000 --> 00:22:12,829
and then we have two more blocks filled up
like this, so this is the start state given

212
00:22:12,829 --> 00:22:19,069
to us and the goal state is let us say state
which

213
00:22:19,069 --> 00:22:30,470
looks like this that you on a to sit on D
and then D to sit on B and b to sit on C and

214
00:22:30,470 --> 00:22:32,860
let E
be like this.

215
00:22:32,859 --> 00:22:41,059
So, this is the goal state what are the moves
available to you we have only one move

216
00:22:41,059 --> 00:22:53,389
which we will say is like this move block
x let us call it commas source to destination

217
00:22:53,390 --> 00:23:01,470
and source can be a top of. So, this move
can only be done if you can pick up of block,

218
00:23:01,470 --> 00:23:07,180
which means it must near the top of a stack
all around the table and you can put it down

219
00:23:07,180 --> 00:23:12,720
either on the top of another block or on the
table. So, the source can be only the top

220
00:23:12,720 --> 00:23:17,039
of a
stack or the top most blocks in the stack

221
00:23:17,039 --> 00:23:19,309
and the destination also can be only a top
most

222
00:23:19,309 --> 00:23:28,569
block in this stack. So, for example, in this
situation we can do the following moves we

223
00:23:28,569 --> 00:23:31,429
can say move this to top of b.

224
00:23:31,430 --> 00:23:44,160
So, you would get a situation like this 

225
00:23:44,160 --> 00:23:46,910
that is one possible move you can then another

226
00:23:46,910 --> 00:23:56,580
.move we can make is we can put a down. So,
this B and C remain like this D is here and

227
00:23:56,579 --> 00:24:05,399
A is here, A third move that you can make
is we can move D. So, only A and D are the

228
00:24:05,400 --> 00:24:08,700
two blocks we can move here because they are
of the only once on the top of the stack.

229
00:24:08,700 --> 00:24:22,789
So, you can put D on top of a, whereas E remains
here and the fourth possible move is

230
00:24:22,789 --> 00:24:37,649
that you can put D down. So, you will get
these are the four possible moves, so this

231
00:24:37,650 --> 00:24:41,030
is the
neighborhood of this state and you want to

232
00:24:41,029 --> 00:24:47,680
use hill climbing algorithm to decide which
state to move.

233
00:24:47,680 --> 00:24:52,890
So, now, it means to design the heuristic
function, so what is what can be a heuristic

234
00:24:52,890 --> 00:25:07,570
function that you can use here, so I want
to discuss two functions. They are as follows

235
00:25:07,569 --> 00:25:17,909
the first function says that if a block is
sitting on a correct destination block. Then,

236
00:25:17,910 --> 00:25:20,740
you
add one further block what do your destination

237
00:25:20,740 --> 00:25:25,019
block A should be sitting on D should be
sitting on B and B should be sitting on C

238
00:25:25,019 --> 00:25:27,220
and C should be on the table and likewise
for E

239
00:25:27,220 --> 00:25:29,019
should be on the table.

240
00:25:29,019 --> 00:25:30,019
.

241
00:25:30,019 --> 00:25:50,960
So, let us call this h one of n it says add
one if block on i just use a term block, so

242
00:25:50,960 --> 00:25:56,500
in
general we mean either block or the table

243
00:25:56,500 --> 00:26:16,460
and we subtract 1 if it is on, so this gives
a

244
00:26:16,460 --> 00:26:20,279
such function which only looks at a state.
So, the idea of a heuristic function in that

245
00:26:20,279 --> 00:26:22,509
it
should be computationally cheap pieces just

246
00:26:22,509 --> 00:26:25,450
look at the state and get a value out of it.
So,

247
00:26:25,450 --> 00:26:31,160
.let us just give heuristic values for all
this functions, so let us start with a goal,

248
00:26:31,160 --> 00:26:34,720
so for this
we will have plus one for this plus one for

249
00:26:34,720 --> 00:26:41,470
this plus one for everything because
everything is on the correct place. So, the

250
00:26:41,470 --> 00:26:49,650
heuristic value of the goal is 5 or plus 5
whatever the start state.

251
00:26:49,650 --> 00:26:55,891
The start state we will have plus 1 for this
plus 1 for this minus 1 for this because a

252
00:26:55,891 --> 00:27:03,029
should be on D, but it is on b plus 1 for
this minus 1 for this because d should be

253
00:27:03,029 --> 00:27:06,190
on b in
the goal state, but it is sitting on e. So,

254
00:27:06,190 --> 00:27:10,240
if we add this entire sub you will get a value
of

255
00:27:10,240 --> 00:27:18,640
plus one 
now what about the other states. So, let us

256
00:27:18,640 --> 00:27:25,009
look at this value this is a, b, c this
ends to plus one here plus one for this and

257
00:27:25,009 --> 00:27:28,309
minus one for this. So, just let me know if
I

258
00:27:28,309 --> 00:27:37,409
making a mistake this state am plus one here
it is minus one for this minus one for this

259
00:27:37,410 --> 00:27:44,269
plus one for this plus one for this. So, this
cancel, so and e, so this is also plus 1 for

260
00:27:44,269 --> 00:27:48,549
this 1
plus 1 for this plus one for this minus 1

261
00:27:48,549 --> 00:27:53,619
for this plus 1 for this minus 1 for this.
So, this is

262
00:27:53,619 --> 00:28:03,909
also plus 1 in this case it is plus 1 for
this plus 1 for this plus 1 for this plus

263
00:28:03,910 --> 00:28:04,910
1 for this.

264
00:28:04,910 --> 00:28:09,330
Notice because a sitting on d and in the goal
you want to a to be sitting on d and minus

265
00:28:09,329 --> 00:28:21,159
one for this. So, this value turns out to
be plus c, so these are the four states this

266
00:28:21,160 --> 00:28:25,560
is one
state this is another state this is the third

267
00:28:25,559 --> 00:28:29,460
state this is the fourth state that this move
gun

268
00:28:29,460 --> 00:28:35,740
function generates and heuristic function
tells. So, the algorithm says look at the

269
00:28:35,740 --> 00:28:42,359
neighbors if one of the neighbors is better
than if at least one neighbor is better than

270
00:28:42,359 --> 00:28:45,189
the
current state then choose a best among the

271
00:28:45,190 --> 00:28:47,340
neighbors, in this example three neighbors
are

272
00:28:47,339 --> 00:28:52,250
equal to plus 1. So, we do not consider that
where we consider this one which is better

273
00:28:52,250 --> 00:28:57,539
than, so the first move hill climbing will
make this heuristic function is this one it

274
00:28:57,539 --> 00:29:02,029
will
complete, so from here what are the options?

275
00:29:02,029 --> 00:29:07,480
Again, we do the move gun function, so you
can move either d or you can move a if you

276
00:29:07,480 --> 00:29:13,289
move a one thing is you can go back to this
state you can take a from here and put it

277
00:29:13,289 --> 00:29:17,079
on
top of b or you can take a from here put it

278
00:29:17,079 --> 00:29:23,339
down here which is you will go to this state.

279
00:29:23,339 --> 00:29:29,639
The other options are you can take b on top
put it on a, so you will get this state and

280
00:29:29,640 --> 00:29:36,530
you
must tell me that heuristic value of this.

281
00:29:36,529 --> 00:29:47,730
So, plus 1 for this minus 1 for this plus
1 for this

282
00:29:47,730 --> 00:29:53,319
minus 1 for this plus 1 for this, so this
whole thing comes to plus 1 so that is one

283
00:29:53,319 --> 00:29:55,230
move
from here and one more move is that you can

284
00:29:55,230 --> 00:29:57,670
pick up b and put it down on the table. So,

285
00:29:57,670 --> 00:30:12,880
.you would get B C and A A D E, so this minus
1 for this plus 1 for this plus 1 plus 1 and

286
00:30:12,880 --> 00:30:18,620
minus 1, so this is also plus 1 is that correct.

287
00:30:18,619 --> 00:30:25,579
So, here we are sitting on a state which has
the heuristic value of plus 3 and it has four

288
00:30:25,579 --> 00:30:29,070
neighbors this has the value of plus 1 we
have completed earlier this has the value

289
00:30:29,070 --> 00:30:31,369
of plus
1 we have completed earlier and these two

290
00:30:31,369 --> 00:30:36,629
also have a value of plus 1. So, you can see
that this is the maxima and the algorithm

291
00:30:36,630 --> 00:30:41,620
will terminate here without reaching the goal
state that we are interested.

292
00:30:41,619 --> 00:30:42,619
.

293
00:30:42,619 --> 00:30:49,139
So, let us have a different heuristic function
and this function is as follows. So, let us

294
00:30:49,140 --> 00:31:01,920
call
it h two of n and this says add one for 

295
00:31:01,920 --> 00:31:11,550
every block in a structure. So, we are looking
at

296
00:31:11,549 --> 00:31:26,759
the whole structure that the block is sitting
on 

297
00:31:26,759 --> 00:31:40,150
and subtract one for every block. So, the
difference between that is that you adding

298
00:31:40,150 --> 00:31:42,930
O W either you adding 1 or subtracting 1.

299
00:31:42,930 --> 00:31:48,150
In this case, you may an a add of many things,
so you are adding one for every block in

300
00:31:48,150 --> 00:31:54,120
the correct structure. So, if it is entire
structure below the block is correct then

301
00:31:54,119 --> 00:31:57,569
for every
element in the structure, you will add one

302
00:31:57,569 --> 00:32:00,119
if it is a long structure, for every element
you

303
00:32:00,119 --> 00:32:07,750
will subtract 1. So let us together start
with the goal, so will start with plus 1 here

304
00:32:07,750 --> 00:32:11,500
plus 2
here because it is on c and c is on the table

305
00:32:11,500 --> 00:32:14,640
likewise plus 3 here because d is on b and
b is

306
00:32:14,640 --> 00:32:19,720
.on c and c is on table, so three things below
we factor it and plus four here and this is

307
00:32:19,720 --> 00:32:32,279
plus 1. So, this is 10 plus 1, 11, let us
look at the start state you will add a plus

308
00:32:32,279 --> 00:32:39,200
1 for c
plus 2 for b minus 3 for a because it is a

309
00:32:39,200 --> 00:32:42,069
long structure it should have been on A D
B C,

310
00:32:42,069 --> 00:32:45,139
it is on a b c a b c is not a correct structure.

311
00:32:45,140 --> 00:32:50,770
So, three things below it along, so we have
two minus three for here likewise we do

312
00:32:50,769 --> 00:32:55,779
minus 2 for this because it is on a wrong
structure and plus one for this. So, this

313
00:32:55,779 --> 00:32:59,349
three and
three canceled out this canceled out, so this

314
00:32:59,349 --> 00:33:07,639
is minus 1, the start state you can see the
same force nodes are generated by the same

315
00:33:07,640 --> 00:33:11,509
move gun function which is that you can
move this thing. So, let us see valuate the

316
00:33:11,509 --> 00:33:14,579
values for this four states here as before,
so in

317
00:33:14,579 --> 00:33:21,359
this case as we have seen this adds to 0 plus
1 plus 2 minus 3, so this is 0 this is plus

318
00:33:21,359 --> 00:33:25,889
one
and this will be minus 1. So, this will end

319
00:33:25,890 --> 00:33:32,170
of 0 in this case these 3 add up to minus
0 as

320
00:33:32,170 --> 00:33:37,250
before this will add another minus 4 to that
because it is in a wrong structure which is

321
00:33:37,250 --> 00:33:38,299
fourth in below that.

322
00:33:38,299 --> 00:33:49,220
So, minus 4 here plus 1 here, so this will
be minus 3 this 1 plus 1 plus 2 plus 3 for

323
00:33:49,220 --> 00:33:56,400
this
plus 4 for this minus one for this and minus

324
00:33:56,400 --> 00:34:03,720
2 for this. So, his will be plus 1 and this
last

325
00:34:03,720 --> 00:34:19,519
one which is 
plus 3 for these 2 plus 1 for this 4 minus

326
00:34:19,519 --> 00:34:26,070
2 for this. So, this becomes 2 and
minus 3 for this, so it becomes minus 1 is

327
00:34:26,070 --> 00:34:31,399
that correct, so now, let us follows and look
at

328
00:34:31,398 --> 00:34:37,440
what this heuristic function is how is it
evaluating the situation, the first heuristic

329
00:34:37,440 --> 00:34:42,599
function took this as plus 1 and this as plus
3 and this always plus 1. So, it is thought

330
00:34:42,599 --> 00:34:45,309
this
is the good move to make and it move make

331
00:34:45,309 --> 00:34:46,309
that move essentially.

332
00:34:46,309 --> 00:34:49,989
Now, when you look at the problem you can
see that the optimal solution is when you

333
00:34:49,989 --> 00:34:56,169
pick up a put it down somewhere, then pick
up D, put it on B then pick up a and put it

334
00:34:56,170 --> 00:34:59,349
on
that is optimal solution. So, the first correct

335
00:34:59,349 --> 00:35:04,599
move to make a s u pick up a and put it down
on the table and if you look at this second

336
00:35:04,599 --> 00:35:06,969
heuristic function h 2 that we are looking
at.

337
00:35:06,969 --> 00:35:12,279
First of all you must notice that it is moved
discriminative the first function had only

338
00:35:12,280 --> 00:35:17,790
very few set of values plus 1 here plus 3
here and plus 5, there essentially. This one

339
00:35:17,789 --> 00:35:20,519
has a
value of minus one here plus 1, 1 for this

340
00:35:20,519 --> 00:35:23,650
0 for this minus 3 for this plus 1 for this
and

341
00:35:23,650 --> 00:35:28,599
minus one for this all values is different.
So, it does not think that they are equal

342
00:35:28,599 --> 00:35:32,079
in states
not only that is feel that this is the good

343
00:35:32,079 --> 00:35:35,269
state then this is the next based state and
these

344
00:35:35,269 --> 00:35:43,550
.two state it is comes as to be bad. Actually,
because its values are lower essential, now

345
00:35:43,550 --> 00:35:48,640
using the algorithm, it has a better state
to move, it was at minus 1 you can you can

346
00:35:48,639 --> 00:35:49,639
see
plus 1.

347
00:35:49,639 --> 00:35:54,359
So, it will make this moves and that you will
notice is the correct move to make from

348
00:35:54,360 --> 00:36:01,769
here what can we do it can either pick up
a and put it on b which is going back here.

349
00:36:01,769 --> 00:36:04,480
That
you can see is the move it will not make because

350
00:36:04,480 --> 00:36:09,880
it is going from plus 1 to minus 1 or it
can pick up A and put it on to D and that

351
00:36:09,880 --> 00:36:14,849
is the state that we have seen here it can
make

352
00:36:14,849 --> 00:36:21,900
this move and that is going from plus 1 to
minus 1 again. So, it will not make that move,

353
00:36:21,900 --> 00:36:27,880
so it is not going to pick up A and do something
with it. So, A could have put on d it is

354
00:36:27,880 --> 00:36:32,710
going to take it to a bad state or it could
have put it back one B this also in which

355
00:36:32,710 --> 00:36:34,699
going
to take it to a back state, so what about

356
00:36:34,699 --> 00:36:37,259
the other possibilities, so it can either
pick up B

357
00:36:37,260 --> 00:36:38,260
or it can pick up D.

358
00:36:38,260 --> 00:36:39,260
.

359
00:36:39,260 --> 00:36:53,780
So, let us first take the B case, so it can
pick up D and put it on C on D sorry B, D,

360
00:36:53,780 --> 00:37:00,950
E, C
A, that is one possibility or it can pick

361
00:37:00,949 --> 00:37:19,079
up B from here and put it on a that is second
possibility and the third possibility is you

362
00:37:19,079 --> 00:37:30,900
can it can put B down. So, these all B moves
that we are looking at this the third possible

363
00:37:30,900 --> 00:37:43,039
state, so let us just look evaluate these
values. So, we have plus one for this minus

364
00:37:43,039 --> 00:37:47,460
1 minus 2 and minus 3 for this, so that is

365
00:37:47,460 --> 00:37:58,010
.minus 6, so this value should be minus 6
is it correct, so C is plus 1 E is plus 1

366
00:37:58,010 --> 00:38:02,809
E is plus
one 1 2 D is minus 2, that cancels that.

367
00:38:02,809 --> 00:38:09,320
So, minus 3 for this and minus 1 for this,
so minus 4, so obviously, it is not going

368
00:38:09,320 --> 00:38:10,890
to
make this move. So, it is sitting at plus

369
00:38:10,889 --> 00:38:13,170
one just keep that in mind it is not going
to move

370
00:38:13,170 --> 00:38:17,619
to minus 1 here or to minus 1 here or to minus
4 here what are the states values for these

371
00:38:17,619 --> 00:38:27,351
2 states. So, this is minus 3 minus 2 minus
2, so obviously, these states are worst states,

372
00:38:27,351 --> 00:38:31,390
so it is not going to move from it, so that
leave just only the D moves, so let us look

373
00:38:31,389 --> 00:38:35,559
at
there, so I can either pick up D and put it

374
00:38:35,559 --> 00:38:39,309
on B or on A or put it down.

375
00:38:39,309 --> 00:38:40,309
.

376
00:38:40,309 --> 00:39:07,710
So, there are three possibilities. So, D,
B, C, E, A or it can put D on 

377
00:39:07,710 --> 00:39:53,159
A which is B 
minus

378
00:39:53,159 --> 00:40:11,549
1 and minus 2, 3 plus 2 is that correct for
this state plus 3 for this plus one 4 for

379
00:40:11,550 --> 00:40:16,680
this
minus 1 for this and minus 2 or this. So,

380
00:40:16,679 --> 00:40:21,940
it will be plus 1, so if remember it was sitting
on

381
00:40:21,940 --> 00:40:26,869
plus 1, so it would not go to plus 1 or it
won’t go it can go to plus 2, but let us

382
00:40:26,869 --> 00:40:30,599
look at this
one. So, this is plus 1 plus 2 plus 3 that

383
00:40:30,599 --> 00:40:38,719
is plus 6 plus 1 plus 4 minus 1 6 plus 1 minus
1,

384
00:40:38,719 --> 00:40:50,909
so plus 6, so you can see that this heuristic
function will actually derive the search hill

385
00:40:50,909 --> 00:40:56,251
climbing algorithm to make these two moves,
first it will pick up d and put it. First,

386
00:40:56,251 --> 00:41:05,929
it
will pick up A and put it on the table and

387
00:41:05,929 --> 00:41:09,000
then it will pick up D and put it on B and
you

388
00:41:09,000 --> 00:41:11,619
can see that the heuristic value is going
a plus 6.

389
00:41:11,619 --> 00:41:16,380
.If you want to take this forward you can
see that this actually leads to the goal state

390
00:41:16,380 --> 00:41:20,300
essentially in the next step essentially it
will pick up a and put it on top of D recheck

391
00:41:20,300 --> 00:41:26,210
value of plus 1, all other moves will be worst
in that essentially. So, what we have seen

392
00:41:26,210 --> 00:41:32,809
here is that given a problem to solve what
is the problem it is a block solve problem,

393
00:41:32,809 --> 00:41:34,599
you
are given some initial configuration. You

394
00:41:34,599 --> 00:41:39,299
have some desired configuration when you are
given a set of moves you want to use hill

395
00:41:39,300 --> 00:41:44,350
climbing both these functions are static
evaluation functions.

396
00:41:44,349 --> 00:41:49,480
This means, they only look at a state ant
give you a value for that when I when we

397
00:41:49,480 --> 00:41:54,550
valued this plus 1 on this minus 3 or this
plus 6 or plus 1 we are not doing any search.

398
00:41:54,550 --> 00:41:58,750
We are only looking at this particular state
and saying this is the value for this state

399
00:41:58,750 --> 00:42:01,210
both
is static. So, both require constant time

400
00:42:01,210 --> 00:42:04,909
in some sense, but one is more perceptive
then

401
00:42:04,909 --> 00:42:09,569
the other one is more detailed one looks at
the entire structure the other one only looks

402
00:42:09,570 --> 00:42:15,289
at
what the current block. You can see that one

403
00:42:15,289 --> 00:42:19,050
search the first heuristic function takes
it to

404
00:42:19,050 --> 00:42:23,820
local maxima the second one takes it to global
maxima. So, what does that mean, it

405
00:42:23,820 --> 00:42:31,820
means that the surface that h one is defining
as local maxima it is like this something

406
00:42:31,820 --> 00:42:35,100
like
this where is the surface at this one is defining

407
00:42:35,099 --> 00:42:38,608
is smooth essentially.

408
00:42:38,608 --> 00:42:47,659
So, one thing that you can do when you are
using an algorithm like hill climbing chooses

409
00:42:47,659 --> 00:42:52,019
a heuristic function which will define a smooth
monotonic surface like this. Then, of

410
00:42:52,019 --> 00:42:58,389
course you are done and you are done at a
very inexpensive price the space requirement

411
00:42:58,389 --> 00:43:09,739
is constant. The heuristic function have takes
constant time and the time complexity is

412
00:43:09,739 --> 00:43:13,519
linear because it will just keep taking one
step in positive direction and eventually

413
00:43:13,519 --> 00:43:15,889
come
to a stop at the goal.

414
00:43:15,889 --> 00:43:22,989
So, that is why hill climbing is such an attractive
algorithm because it allows you to do

415
00:43:22,989 --> 00:43:32,519
this thing at constant space and linear time
essentially the caches can you find the

416
00:43:32,519 --> 00:43:39,179
heuristic function which will define the smooth
surface for the searched. If you cannot,

417
00:43:39,179 --> 00:43:43,449
then you have this problem of having getting
struck on local maxima or a local minima

418
00:43:43,449 --> 00:43:49,210
as the case. Maybe then, we need to look for
algorithms which have variations of hill

419
00:43:49,210 --> 00:43:56,820
climbing which can overcome this problem of
getting struck in the local maxima. So, we

420
00:43:56,820 --> 00:44:01,160
will look at that in the next class, so we
stop here.

421
00:44:01,159 --> 00:44:11,159
.

