1
00:00:09,630 --> 00:00:17,260
So, we continue looking at optimization and
we are looking at methods which we called

2
00:00:17,260 --> 00:00:37,520
as population based. So, basically when we
say population based methods and we will

3
00:00:37,520 --> 00:00:43,890
spend some time on this today. We mean that
instead of working with a single candidate

4
00:00:43,890 --> 00:00:51,420
solution for example, as we do in hill climbing
or in simulated annealing we work with a

5
00:00:51,420 --> 00:01:02,240
population of candidates. Now, the benefits
that we get by working with populations I

6
00:01:02,240 --> 00:01:07,590
have not just speed up, because it is not
as if you are running the same algorithm k

7
00:01:07,590 --> 00:01:12,540
times
or n times if n is the size of population.

8
00:01:12,540 --> 00:01:26,740
You also get benefit from the fact that different
candidates can contribute jointly to exploring

9
00:01:26,739 --> 00:01:33,149
new solutions. So, essentially we are
exploring the solutions space which for real

10
00:01:33,149 --> 00:01:38,939
problems may not be a smooth surface. And
we are looking for methods which would be

11
00:01:38,938 --> 00:01:48,169
robust which even when the terrain is jagged
we will do reasonably well essentially

12
00:01:48,170 --> 00:01:52,879
So, in population based methods the first
method that we are looking at this moment

13
00:01:52,879 --> 00:02:02,599
we
have called it is genetic algorithms 

14
00:02:02,599 --> 00:02:16,129
some people also call them as evolutionary
algorithms. And they have a flavor of bottom

15
00:02:16,129 --> 00:02:25,219
up problem solving we we also called as

16
00:02:25,219 --> 00:02:39,180
.emergent. So, by emergent systems we mean
that we put together a collection of simple

17
00:02:39,180 --> 00:02:44,400
elements and more complex behavior emerges
out of that. And as we might have said

18
00:02:44,400 --> 00:02:52,090
before the human brain is a perfect example
of that every neuron in our brain is

19
00:02:52,090 --> 00:02:57,920
computationally a simple device, but it just
that we have billions of them in our head.

20
00:02:57,919 --> 00:03:01,729
And they are it is a connections it is the
way that they are connected to each other

21
00:03:01,729 --> 00:03:03,709
that
really give raise to our individual brains

22
00:03:03,710 --> 00:03:11,010
essentially. So, the idea in genetic algorithms
is

23
00:03:11,009 --> 00:03:21,469
that we have candidate solutions rather a
population of candidate solutions and each

24
00:03:21,469 --> 00:03:36,620
candidate is made up of components.
So, you can think of this some kind of a breakup

25
00:03:36,620 --> 00:03:44,509
of every component now in the simple
case that we saw about solving sat every component

26
00:03:44,509 --> 00:03:52,099
is the value of one variable or one
bit. And a sats can sat solution candidate

27
00:03:52,099 --> 00:03:56,239
is a bit vector, but in general problems may
be

28
00:03:56,240 --> 00:04:01,689
more complex. And components may themselves
very more complex in nature

29
00:04:01,689 --> 00:04:06,229
essentially in which case of course; we have
to be very careful. Because the general

30
00:04:06,229 --> 00:04:10,879
strategy in solution space search or perturbation
search that we are exploring is that we

31
00:04:10,879 --> 00:04:16,288
perturb candidates to produce new candidates.
So, if we had this as a candidate then

32
00:04:16,288 --> 00:04:22,769
simulated annealing may try to generate a
neighborhood around this by changing one or

33
00:04:22,769 --> 00:04:27,379
2 components as we saw in the case of sat
and do that. So, one has to do the little

34
00:04:27,379 --> 00:04:29,170
more
carefully essentially.

35
00:04:29,170 --> 00:04:37,780
So, when we talk about genetic algorithms
we have to talk about encoding candidate

36
00:04:37,779 --> 00:04:43,149
solution as a string in terms of genetic algorithm.
We would call this as a chromosome

37
00:04:43,149 --> 00:04:52,250
borrowing from the biological world. And essentially
there is an interplay between

38
00:04:52,250 --> 00:05:01,910
chromosomes of different parents essentially
which basically modifies the design of the

39
00:05:01,910 --> 00:05:07,320
candidate or design of the solution essentially.
So, we had mentioned in the last class that

40
00:05:07,319 --> 00:05:19,069
there are these 2 things; one is the genotype
which is made up of the genes. And that in

41
00:05:19,069 --> 00:05:28,659
that influences or they decides the behavior
of the phenotype which is the individual or

42
00:05:28,660 --> 00:05:38,050
the creature or whatever is participating
in the real world essentially. So, in genotype

43
00:05:38,050 --> 00:05:46,699
we
look at recombination’s and the phenotype

44
00:05:46,699 --> 00:05:56,969
basically competes and its participates in
selection. So, these are the main 2 components

45
00:05:56,970 --> 00:06:03,900
of the problem solving strategy that you
might say nature employ employs which is the

46
00:06:03,899 --> 00:06:09,489
trial and error with its designs.
And the design is expressed as a chromosome

47
00:06:09,490 --> 00:06:19,079
essentially which is some kind of a string
that we are going to work with and we said

48
00:06:19,079 --> 00:06:22,659
the use a word recombination’s. So, for
idea

49
00:06:22,660 --> 00:06:29,170
in genetic algorithms is that you draw some
components, some one parent some

50
00:06:29,170 --> 00:06:36,490
.components on another parent and in the hope
that you will inherit the good components

51
00:06:36,490 --> 00:06:46,490
of both parents. So, if you going back to
the rabbit and foxes example, let us say there

52
00:06:46,490 --> 00:06:53,540
are 2 desirable properties amongst rabbits.
One is that they can run fast and other is

53
00:06:53,540 --> 00:06:56,069
that
they are smart so whatever that means you

54
00:06:56,069 --> 00:07:00,319
know. So, for example, you must have as a
child heard a story about the rabbit who has

55
00:07:00,319 --> 00:07:06,329
to go to the lion in the jungle as food. And
then he is a smart rabbit and he tells a lion

56
00:07:06,329 --> 00:07:11,948
of another lion and that kind of stuff. So,
either they are fast or they are smart essentially

57
00:07:11,949 --> 00:07:18,110
which is contribute today’s survival.
So, the whole idea of evolution is that in

58
00:07:18,110 --> 00:07:21,959
a population of candidates, the phenotypes,
the

59
00:07:21,959 --> 00:07:28,049
fitter ones are the ones who survive the competition.
Competition is for resources it

60
00:07:28,050 --> 00:07:33,129
could be for food, it could be for mates,
it could be for shelter which is you know

61
00:07:33,129 --> 00:07:36,639
safety
from the predator essentially. So, if you

62
00:07:36,639 --> 00:07:40,490
are good at doing these things then you are
likely to survive which means you are likely

63
00:07:40,490 --> 00:07:46,840
to pass on your genes to the next generation
and so on and so forth. Now, imagine 2 parents

64
00:07:46,839 --> 00:07:53,609
of a rabbit; one of them is smart and the
other one is fast essentially. The hope in

65
00:07:53,610 --> 00:07:57,770
genetic algorithm is that if these 2 parents
have

66
00:07:57,769 --> 00:08:03,709
let say 2 children that is module that we
are following here at least one of them will

67
00:08:03,709 --> 00:08:09,159
inherit. Both these properties of being smart
and being fast at the same time which means

68
00:08:09,160 --> 00:08:13,370
it will be like a super rabbit essentially
right and super rabbits will give rise to

69
00:08:13,370 --> 00:08:14,728
more
super rabbits so on.

70
00:08:14,728 --> 00:08:18,490
So, in general the rabbit population will
become smarter and faster essentially. So,

71
00:08:18,490 --> 00:08:22,430
that is
the whole idea behind genetic algorithms like

72
00:08:22,430 --> 00:08:28,800
we said one makes up the combinations.
So, there is one processor one force which

73
00:08:28,800 --> 00:08:34,579
makes up the combinations jumps the genetic
pool and the other which is the process of

74
00:08:34,578 --> 00:08:41,309
selection which is that they compete for
survival essentially. So, survival of the

75
00:08:41,309 --> 00:08:48,479
fittest and when we say survival of the fittest
at

76
00:08:48,480 --> 00:08:53,610
least in the case of genetic algorithms we
are going to impose a fitness function on

77
00:08:53,610 --> 00:08:55,570
top of
the algorithm. Because it is based on the

78
00:08:55,570 --> 00:08:58,510
fitness function that we will the candidate
will

79
00:08:58,509 --> 00:09:02,269
survive, but in the real world its other way
round it is basically whoever survive this

80
00:09:02,269 --> 00:09:07,799
is
the one whose fit essentially. So, I want

81
00:09:07,799 --> 00:09:15,829
to do one example of to illustrate genetic
algorithms today, but before that I want to

82
00:09:15,830 --> 00:09:21,278
sort of spend few minutes on this idea of
emergent systems essentially. Because it is

83
00:09:21,278 --> 00:09:26,960
an idea which is has a lot of follows
essentially.

84
00:09:26,960 --> 00:09:27,960
..

85
00:09:27,960 --> 00:09:36,769
So, you must have heard about this conveys
game of life convey something called game

86
00:09:36,769 --> 00:09:50,889
of life. Have you heard about the game of
life? It is like a screen saver sometimes

87
00:09:50,889 --> 00:10:01,000
and the
world is a grid in cellular voltammeter. So,

88
00:10:01,000 --> 00:10:11,539
you know we have rows and columns and so
on 

89
00:10:11,539 --> 00:10:19,519
and in the simplest form of this game in every
cell. So, every square is a cell inside

90
00:10:19,519 --> 00:10:28,129
there can be one creature and creature is
a very simple creature it survives. So, it

91
00:10:28,129 --> 00:10:31,070
has
some rules for survival there are rules for

92
00:10:31,070 --> 00:10:33,820
surviving there are rules for being born even
in

93
00:10:33,820 --> 00:10:39,660
this very simple world there rules for dying
essentially. So, the simple rules in this

94
00:10:39,659 --> 00:10:50,059
conveys game of life are that if you are surrounded
by more than three living cells or

95
00:10:50,059 --> 00:10:55,239
creatures in living in cells. Then you are
sort of overcrowded and you die essentially

96
00:10:55,240 --> 00:11:02,419
which means that each cell is in 1 or 0 1
means its alive and 0 means its dead or the

97
00:11:02,419 --> 00:11:07,759
creature inside is dead.
So, if there is a one surrounded by more than

98
00:11:07,759 --> 00:11:14,840
three ones then it dies it becomes 0 if a
0 is

99
00:11:14,840 --> 00:11:22,259
surrounded by exactly three ones then it comes
alive. And if a 1 is surrounded by less

100
00:11:22,259 --> 00:11:30,049
than three ones and it stays alive essentially
or something I may have a small error there

101
00:11:30,049 --> 00:11:34,219
but anyway something of that nature. So, you
have this, very simple rules which control

102
00:11:34,220 --> 00:11:41,730
how a cell evolves over time. So, it is an
automate which goes through a sequence of

103
00:11:41,730 --> 00:11:46,870
time steps. So, at every time step every cell
decides whether in the next time step it will

104
00:11:46,870 --> 00:11:53,370
be alive or dead or whatever essentially.
Now, it turns out that this very simple rules

105
00:11:53,370 --> 00:11:58,399
of
life if you want to call it life give rise

106
00:11:58,399 --> 00:12:02,549
to patterns in this world which is a grid
world and

107
00:12:02,549 --> 00:12:07,729
.which have a tendency to survive. And some
patterns survives some patters oscillate

108
00:12:07,730 --> 00:12:11,879
between 2 3 patterns and some patterns even
move forward.

109
00:12:11,879 --> 00:12:20,799
So, if I remember correctly there is a pattern
which looks like this that if this is one

110
00:12:20,799 --> 00:12:29,708
and
this is one and this is one. So, these five

111
00:12:29,708 --> 00:12:36,229
patterns if they are one and maybe you should
try the rules that I just mention on this,

112
00:12:36,230 --> 00:12:44,110
these cells. Then this pattern essentially
in the

113
00:12:44,110 --> 00:12:50,528
next cycle we will move little bit to the
right may be it will rotate by a little bit

114
00:12:50,528 --> 00:12:54,490
and it will
keep doing that. So, as the time progresses

115
00:12:54,490 --> 00:13:04,950
this pattern will appear to be moving in this
direction. Now, this as sort of takes me back

116
00:13:04,950 --> 00:13:06,459
a little bit to the introduction that when
you

117
00:13:06,458 --> 00:13:10,750
were looking at you know what is reality?
What is really out there? And that kind of

118
00:13:10,750 --> 00:13:15,059
stuff
we were discussing in this simple world. What

119
00:13:15,059 --> 00:13:19,889
is really out there is that these are the
cells which become 1 or 0 essentially. And

120
00:13:19,889 --> 00:13:22,529
that is about it this whole world is full
of cells

121
00:13:22,529 --> 00:13:28,610
and each cell can be 1 or 0. And they follow
certain rules whether to remain 1 or 0 in

122
00:13:28,610 --> 00:13:30,649
the
next time cycle.

123
00:13:30,649 --> 00:13:40,110
But in this world certainly we see patterns
like this; this is called the glider gun and

124
00:13:40,110 --> 00:13:42,560
this
is the very old game, game of life was invented

125
00:13:42,559 --> 00:13:47,989
in 60’s or something like that essentially
or may be 70’s. So, if you just search game

126
00:13:47,990 --> 00:13:53,850
of life or glider gun on the web you will
probably get to see on animation of this.

127
00:13:53,850 --> 00:13:57,730
So, this looks like a creature norm you know
of

128
00:13:57,730 --> 00:14:02,310
this shape which is moving around essentially.
Of course, we are also like that in some

129
00:14:02,309 --> 00:14:08,059
sense made up of how many 10 rise to something
I had mentioned 28 or something

130
00:14:08,059 --> 00:14:16,768
simple cells moving around in a unison pretending
to be a creature. But that is a whole

131
00:14:16,769 --> 00:14:21,690
idea of emergent system essentially that you
put together simple cells or simple

132
00:14:21,690 --> 00:14:29,010
components and put which obey certain local
rules each cell only looks at it only

133
00:14:29,009 --> 00:14:33,659
neighborhood. It does not see anything beyond
its immediate neighborhood and that it its

134
00:14:33,659 --> 00:14:40,139
fate is decided base based on that essentially
you put in such local rules and build a

135
00:14:40,139 --> 00:14:44,451
world like this.
And you will find that patterns I mean because

136
00:14:44,451 --> 00:14:48,709
we tend to think of them is pattern
emerge essentially. So, basically combinations

137
00:14:48,708 --> 00:14:58,229
of simple things tend to behave in a more
complex way essentially. So, more recently

138
00:14:58,230 --> 00:15:05,080
there has been a lot of interest and now
imagine that instead of being this very simple

139
00:15:05,080 --> 00:15:09,200
creatures that these cells are which only
look at the neighborhood. And decide whether

140
00:15:09,200 --> 00:15:14,528
to die or not to die they were slightly
more complex creatures. For example, they

141
00:15:14,528 --> 00:15:18,700
could have a little bit of a memory of their
own and they could have a little bit of listening

142
00:15:18,700 --> 00:15:22,070
something. Then we sort of call them as

143
00:15:22,070 --> 00:15:32,730
.populations of agents or some people call
them as multi-agent and you are talking about

144
00:15:32,730 --> 00:15:48,620
simulations here. So, a lot of people for
example, social scientist are looking at these

145
00:15:48,620 --> 00:15:56,799
multi-agent worlds in which they put together
this simple agents and they study the

146
00:15:56,799 --> 00:16:00,609
behavior of those. Of course, they put together
the rules and so on so forth for example,

147
00:16:00,610 --> 00:16:06,990
work ordering rules or things like that and
sort of look at more sophisticated

148
00:16:06,990 --> 00:16:14,600
implementations of this.
So, I would there is a language called net

149
00:16:14,600 --> 00:16:29,149
logo so you must have heard about logo of
course, devise by paper long time ago to teach

150
00:16:29,149 --> 00:16:33,958
programming to children. So, there is a
total which you can say move north or move

151
00:16:33,958 --> 00:16:39,458
west and so on so many step certain by so
many steps in that kind of thing its net logo

152
00:16:39,458 --> 00:16:45,049
is the more sophisticated language. It has
been in implemented by some people in the

153
00:16:45,049 --> 00:16:51,419
north western university in the US and its
available freely online and many. And I have

154
00:16:51,419 --> 00:16:55,458
some friends who are sort of working with
this and trying to implement these agent based

155
00:16:55,458 --> 00:17:04,778
simulations. And so this whole idea of
exploration is to put together simple elements

156
00:17:04,778 --> 00:17:09,099
impose rules upon them and then study the
behavior. So, people have studied for example,

157
00:17:09,099 --> 00:17:17,318
crowd behaviors and one of my friends
who works in TCS in Pune. He is been doing

158
00:17:17,318 --> 00:17:22,088
this sort of a thing and he is sort of
simulated this behavior of this crowd.

159
00:17:22,088 --> 00:17:27,760
So, there was this fire in some restaurant
in Brazil or some are in the crowd behavior

160
00:17:27,760 --> 00:17:31,649
he
could replicate that crowd behavior by imposing

161
00:17:31,650 --> 00:17:35,298
very simple rules on the agents
essentially. So, what do you do if you are

162
00:17:35,298 --> 00:17:39,168
in a restaurant or a bar and there is a fire
in one

163
00:17:39,169 --> 00:17:44,100
corner of the room? What would you do essentially
you know, so impose simple rules

164
00:17:44,099 --> 00:17:48,159
upon then and then you can actually study
the behavior of crowd essentially. And

165
00:17:48,160 --> 00:17:53,790
nowadays of course, crowd behavior is of great
interest specially in situations like you

166
00:17:53,789 --> 00:18:00,649
know this Uttarakhand tragedy or any tragedy
that befalls upon this. You want to see

167
00:18:00,650 --> 00:18:08,980
how to how the crowd would behave essentially.
So, the so there is one direction to this

168
00:18:08,980 --> 00:18:13,769
population based system is to is this agent
based simulation you create simple agents

169
00:18:13,769 --> 00:18:17,319
put
them together in a world. And then simulate

170
00:18:17,319 --> 00:18:22,548
or run the world to see how what kind of
behavior would emerge essentially.

171
00:18:22,548 --> 00:18:23,548
..

172
00:18:23,548 --> 00:18:33,849
But we will come back to our genetic algorithms
which is also little bit like that except

173
00:18:33,849 --> 00:18:38,829
that there is no spatial connotation here
we have a space which is made up of grids

174
00:18:38,829 --> 00:18:42,509
and
cells in which the people live but in g a’s

175
00:18:42,509 --> 00:18:47,849
we just have a population. And we do not
really talk about space essentially though

176
00:18:47,849 --> 00:18:54,899
there have been people who have also started
speaking about spatial distribution of populations

177
00:18:54,900 --> 00:18:58,400
essentially. So, just as human
populations are sort of distributed in different

178
00:18:58,400 --> 00:19:02,720
continents and different countries and so
on and so forth. They have try to see whether

179
00:19:02,720 --> 00:19:07,519
you know the whole population can be
partitioned into some sub populations and

180
00:19:07,519 --> 00:19:12,609
evolution basically interaction mating. For
example, happens only within that population

181
00:19:12,609 --> 00:19:20,319
and not outside this population. And then
they try to impose rules like migration when

182
00:19:20,319 --> 00:19:28,928
is the agent allow to migrate to a new
country. If I am use the word under what conditions

183
00:19:28,929 --> 00:19:32,309
will this migration be successful
under what condition will it fail and that

184
00:19:32,308 --> 00:19:34,700
kind of thing essentially. For, so those of
you

185
00:19:34,700 --> 00:19:42,000
have been following Australian news and elections
are coming up they have been taking

186
00:19:42,000 --> 00:19:47,490
a very strict stand against emigration.
So, they have said that anybody who arise

187
00:19:47,490 --> 00:19:50,140
by boat will never be given Australian’s
this is

188
00:19:50,140 --> 00:19:53,960
in ship essentially you will also rules like
this. And you can see how it will affect the

189
00:19:53,960 --> 00:19:59,470
population one can think that but we work
with simpler notions which is that we just

190
00:19:59,470 --> 00:20:05,019
have a collection of populations and what
is the algorithm that we had talked about

191
00:20:05,019 --> 00:20:11,319
the
first step is selection. So, we have this

192
00:20:11,319 --> 00:20:21,909
population of some elements and they are allowed
to reproduce themselves based on some fitness

193
00:20:21,910 --> 00:20:29,058
value something like this that is the first

194
00:20:29,058 --> 00:20:33,910
.step which is selection. And we had said
that we will implement the rule wheel kind

195
00:20:33,910 --> 00:20:35,910
of a
mechanism of course, you have to work out

196
00:20:35,910 --> 00:20:42,750
how to do that which will tell which element
gets to reproduce. So, if there are n elements

197
00:20:42,750 --> 00:20:47,131
we will spin the we will n times and
whichever elements comes in front of let us

198
00:20:47,131 --> 00:20:57,340
say the pointer we will get to reproduce
essentially then crossover which basically

199
00:20:57,339 --> 00:21:02,529
means that we randomly pair the new
population that we have. So, let me draw this

200
00:21:02,529 --> 00:21:15,720
by squares we randomly pair them. So, for
example, we could say we pair this one with

201
00:21:15,720 --> 00:21:20,579
this one, this one with this one, this one
with this one maybe I should have an even

202
00:21:20,579 --> 00:21:23,538
number.
But still we do random pairings and allow

203
00:21:23,538 --> 00:21:28,788
the cross over operator which is basically
mixing up the genes of the 2 parents and producing

204
00:21:28,788 --> 00:21:37,539
2 new children. So, you can
centerline sort of see this as a paddle search

205
00:21:37,539 --> 00:21:44,119
in the same space solution space except that
we start with a move is made up by somehow

206
00:21:44,119 --> 00:21:50,919
selecting 2 parents. And then generating 2
new children out of it instead of one parent

207
00:21:50,920 --> 00:21:53,310
giving rise to one child like for example,
hill

208
00:21:53,309 --> 00:21:58,119
climbing or simulated annealing here 2 parents
give rise to 2 children in this example

209
00:21:58,119 --> 00:22:12,629
essentially. And then we had said mutation
which is kind of a rare event once in a while

210
00:22:12,630 --> 00:22:17,720
you change some gene randomly essentially.
This is meant to take care of the fact that

211
00:22:17,720 --> 00:22:25,980
some genes may get lost in so on and so forth
essentially. So, let me take an example to

212
00:22:25,980 --> 00:22:38,390
sort of illustrate how genetic algorithms
work and then we will come back to discussing

213
00:22:38,390 --> 00:22:43,580
what are the issues that you have to decide
upon when you are using genetic algorithms

214
00:22:43,579 --> 00:22:48,889
for optimization So, this is an example which
I am taking from this book by Goldberg.

215
00:22:48,890 --> 00:22:49,890
.

216
00:22:49,890 --> 00:23:00,059
.So, remember I had told you 
that the genetic algorithms are device by

217
00:23:00,058 --> 00:23:04,539
somebody called
Holland John Holland and his student called

218
00:23:04,539 --> 00:23:11,710
David Goldberg has written this very
popular book on genetic algorithms. And this

219
00:23:11,710 --> 00:23:13,210
is basically from the first chapter which
is

220
00:23:13,210 --> 00:23:17,308
the introduction chapter of his book. And
it is a nice example and I like it, because

221
00:23:17,308 --> 00:23:21,470
it
illustrate the whole idea of g a quite nicely.

222
00:23:21,470 --> 00:23:30,069
So, it is a very it is called very small
population of size 4 so we have this 4 elements.

223
00:23:30,069 --> 00:23:38,799
So, remember that the first thing we
want to do is to encode this. So, when we

224
00:23:38,799 --> 00:23:44,849
want to use the g a to solve some optimization
problem we have to first encode the candidate

225
00:23:44,849 --> 00:23:51,298
solution. Then we have to devise an
evaluation function which will look a candidate

226
00:23:51,298 --> 00:23:57,619
and give us a number. And ideally the
evaluation function should be in sync with

227
00:23:57,619 --> 00:24:03,189
what we really want to do which means that
for the optimal solution the evaluation function

228
00:24:03,190 --> 00:24:07,529
must have the highest value essentially.
So, let us assume that we will do that and

229
00:24:07,529 --> 00:24:12,440
then with the genetic algorithm thing comes
into play. Now, in this very simple world

230
00:24:12,440 --> 00:24:17,210
I have a 5 bit vector and so the 4 elements
that

231
00:24:17,210 --> 00:24:37,370
I have in this example. So, I have a small
population of size 4 and these are the 4

232
00:24:37,369 --> 00:24:44,058
candidates represented as bit strings. And
let us say that we implement in we interpret

233
00:24:44,058 --> 00:24:52,230
them as binary numbers which means that the
numbers that we are talking about are this

234
00:24:52,230 --> 00:25:01,809
is 13 this is 24; this is 8 and this is 19.
So, essentially these are the candidates but

235
00:25:01,809 --> 00:25:05,019
this is
the representation. So, we have this 4 numbers

236
00:25:05,019 --> 00:25:15,720
13 24 8 and 19 and we want to know our
optimization task is to find the largest number

237
00:25:15,720 --> 00:25:21,140
that you can represent with 5 bits. It may
sound like trigger to you, but we want to

238
00:25:21,140 --> 00:25:24,570
see how genetic algorithms work essentially
and that is our goal and it is a problem that

239
00:25:24,569 --> 00:25:34,389
we understand quite clearly essentially.
And, so we have to have this evaluation function

240
00:25:34,390 --> 00:25:40,759
right. So, let us say we decide so this f
is a fitness function which will take any

241
00:25:40,759 --> 00:25:46,640
candidate and give us a value. And just simply
let us assume it is a x square essentially

242
00:25:46,640 --> 00:25:51,890
a simple fitness function essentially. So,
if you

243
00:25:51,890 --> 00:26:00,950
want to evaluate this 4 candidates the values
that we will get 169 596 64 361. Now, what

244
00:26:00,950 --> 00:26:12,269
is the role of fitness in our algorithm? Our
fitness influences the selection process the

245
00:26:12,269 --> 00:26:18,879
chances of a candidate reproducing itself
our proportional to fitness. So, in our rule

246
00:26:18,880 --> 00:26:25,409
wheel we will have this 4 sector with areas
proportional to these numbers essentially.

247
00:26:25,409 --> 00:26:28,340
So,
this second candidate will have the largest

248
00:26:28,339 --> 00:26:32,808
area the fourth candidate will have the next
largest area and so on and so forth.

249
00:26:32,808 --> 00:26:40,240
So, we will have a rule wheel like which looks
like this 

250
00:26:40,240 --> 00:26:50,230
something like this. So, this is 2;
this is 1; this is 3 and this is 4. So, we

251
00:26:50,230 --> 00:26:54,579
just rotate it and whichever thing comes here
we

252
00:26:54,579 --> 00:27:04,449
.select that essentially. So, the probability
of it reproducing is proportional to the fraction

253
00:27:04,450 --> 00:27:26,038
that this is of the sum of this whole thing.
So, this probability value is 0.14 for this.

254
00:27:26,038 --> 00:27:34,278
So,
how did I get this values basically you sum

255
00:27:34,278 --> 00:27:40,210
of this 4 numbers and then this divided by
the sum is 0.14 this divided by the sum is

256
00:27:40,210 --> 00:27:46,200
0.49. So, that is how you get the probability
values which means that every time you spin

257
00:27:46,200 --> 00:27:51,169
this rule wheel the second candidate has
above 50 percent chance of being reproduce

258
00:27:51,169 --> 00:27:55,450
this candidate has about 30 percent chance.
And these 2 candidates have little less chances

259
00:27:55,450 --> 00:27:59,278
essentially that is how the areas are
divided essentially.

260
00:27:59,278 --> 00:28:05,329
So, the expected values let us call them e
are basically these values multiplied by 4,

261
00:28:05,329 --> 00:28:11,019
because we are going to spin the wheel 4 times
in our case. So, the number of incenses of

262
00:28:11,019 --> 00:28:18,839
these candidates that we expect to see is
basically 4 times this. So, this turns out

263
00:28:18,839 --> 00:28:29,990
to be
0.58 1.97. So, what are these numbers? These

264
00:28:29,990 --> 00:28:35,470
numbers are saying that after I have done
this selection space. And what is the selection

265
00:28:35,470 --> 00:28:43,180
space I will spin this wheel 4 times and
whichever candidate this arrow points 2 I

266
00:28:43,180 --> 00:28:48,210
will make a copy of that candidate. So, after
I

267
00:28:48,210 --> 00:28:56,179
spend 4 times I expect to see about 2 candidates
of this about half candidate of this about

268
00:28:56,179 --> 00:29:02,880
one fifth of this and 1.25 of this roughly
is essentially. But of course, in the real

269
00:29:02,880 --> 00:29:05,660
world
these fraction do not mean anything I in the

270
00:29:05,660 --> 00:29:10,620
end I will end up seeing 4 candidates. And
let us assume that when we actually carryout

271
00:29:10,619 --> 00:29:15,639
this experiment the values that we get are
1

272
00:29:15,640 --> 00:29:22,410
2 0 and 1 its quite feasible, it is quite
possible that if I will spin the wheel 4 times.

273
00:29:22,410 --> 00:29:27,769
I will get 2 copies of the second candidate
one copy of the first one copy of the fourth

274
00:29:27,769 --> 00:29:33,819
and none of the third one essentially. So,
let us say this is what happens this is where

275
00:29:33,819 --> 00:29:38,259
the
random process is this is the first place

276
00:29:38,259 --> 00:29:41,160
where this random process is showing its effect
in

277
00:29:41,160 --> 00:29:48,200
the process of producing the next population.
So, this population is actually this the one

278
00:29:48,200 --> 00:29:52,480
that we have said after we have done the selection
space we started with this and we end

279
00:29:52,480 --> 00:30:03,460
up with this essentially. So, let us redraw
that population so 0 1 1 1 copy of this 2

280
00:30:03,460 --> 00:30:11,440
copies
of this and one copy of this. So, this is

281
00:30:11,440 --> 00:30:14,048
my new population so selection space is over
now

282
00:30:14,048 --> 00:30:20,240
begins a crossover space. So, how so let us
say we pair these 2 and then we pair these

283
00:30:20,240 --> 00:30:22,620
2
and we put some random crossover point. And

284
00:30:22,619 --> 00:30:26,449
we are doing this single point crossover
which means at some point we will break this

285
00:30:26,450 --> 00:30:30,509
chromosome into half and the same point
will break the next one into half and then

286
00:30:30,509 --> 00:30:35,669
we will exchange the 2 essentially.
So, let us say that our crossover points are

287
00:30:35,669 --> 00:30:44,120
like this one is here and the other one is
here.

288
00:30:44,119 --> 00:30:55,639
So, this will give us a new population So,
this 0 1 1 0 will come here followed by a

289
00:30:55,640 --> 00:30:56,640
0,

290
00:30:56,640 --> 00:31:03,130
.because this 0 comes from the other side
likewise this 1 1 0 0 will come here followed

291
00:31:03,130 --> 00:31:07,179
by
this one which comes from the other side.

292
00:31:07,179 --> 00:31:16,630
And similar thing will happen here 1 1 0 1
1

293
00:31:16,630 --> 00:31:33,169
and 1 0 0 0 0. So, just to emphasize I take
this part and I take this part and I get this

294
00:31:33,169 --> 00:31:37,210
this
one here and likewise for the other 4 essentially.

295
00:31:37,210 --> 00:31:46,009
So, this is my new population at the end
of one round one cycle of this let us see

296
00:31:46,009 --> 00:31:54,410
whether we have a better population to start
with. Now, if you look at this average fitness

297
00:31:54,410 --> 00:32:06,298
for this it happens to be 293. And the
people who work with genetic algorithm tend

298
00:32:06,298 --> 00:32:12,538
to talk about average fitness of this thing
that in general the population is becoming

299
00:32:12,538 --> 00:32:16,179
fitter. But of course, we are interested in
the

300
00:32:16,179 --> 00:32:18,130
most fit element that is the different point
essentially.

301
00:32:18,130 --> 00:32:29,381
So, let us see how is the new population.
So this numbers corresponds to 12 25 27 and

302
00:32:29,381 --> 00:32:37,130
16
and there are f of x which is equal to x square

303
00:32:37,130 --> 00:32:52,340
corresponds to 144 625 729 256. So, the
first thing is that average for this new population

304
00:32:52,339 --> 00:33:04,250
is 439. So, starting with this average of
293 we have gone through one cycle of reproduction

305
00:33:04,250 --> 00:33:08,839
and mating or in crossover and we
have got a new population which is this. So,

306
00:33:08,839 --> 00:33:13,699
we started with this whose average fitness
was 293 and we ended up with this whose average

307
00:33:13,700 --> 00:33:20,340
fitness is 439 essentially. So, this is
the kind of thing which g a’s are looking

308
00:33:20,339 --> 00:33:24,629
for that can we get fitter populations and
so on

309
00:33:24,630 --> 00:33:31,310
essentially. So, the whole idea is that if
you have some function in which you are trying

310
00:33:31,309 --> 00:33:36,928
to optimize. Then initially you are population
may be decrease sort of spread over this

311
00:33:36,929 --> 00:33:44,429
whole domain where this is the let us say
one dimensional domain. But after you have

312
00:33:44,429 --> 00:33:48,038
done the g a’s sufficient number of times
you will find that the population is kind

313
00:33:48,038 --> 00:33:52,910
of
concentrated towards the peaks.

314
00:33:52,910 --> 00:33:55,970
And one of them hopefully is the solution
that you are looking for essentially. So,

315
00:33:55,970 --> 00:33:59,200
that is
the general idea behind genetic algorithms.

316
00:33:59,200 --> 00:34:08,099
So, let us look at this next population and
what would happen in the second cycle? We

317
00:34:08,099 --> 00:34:13,070
will not repeat it but we will just start
thinking about it essentially. So, we look

318
00:34:13,070 --> 00:34:20,308
at the probability again if you remember the
probability is obtained by taking the sum

319
00:34:20,309 --> 00:34:25,869
of all these 4 numbers. And if I 144 divided
by

320
00:34:25,869 --> 00:34:31,690
the sum would give me the probability of this
one showing up in this rule wheel the rule

321
00:34:31,690 --> 00:34:43,358
wheel has change now. So, this happens to
be 0.08 this happens to be 0.35 this happens

322
00:34:43,358 --> 00:34:53,969
to be 0.26. So, these are the 4 probabilities
value and corresponding to them the expected

323
00:34:53,969 --> 00:35:14,558
value which is basically 4 times this number
is 0.32 1 1.4. So, these are the values so

324
00:35:14,559 --> 00:35:19,619
want you to now inspect this new population.
So, we started with the one population

325
00:35:19,619 --> 00:35:26,150
whose characteristics are given here average
fitness is 293. And this as the expected

326
00:35:26,150 --> 00:35:36,559
.number of cloning’s allowed here also we
can see the expected number would be I mean

327
00:35:36,559 --> 00:35:42,440
these are the expected number sorry 1.97 0.22
1.23 and so on. And those are the

328
00:35:42,440 --> 00:35:50,380
expected numbers here 0.32 1.4 1.66 0.58.
So I wanted to look at this new population

329
00:35:50,380 --> 00:35:57,430
and its fitness values and make some observations
well, average fitness has gone as you

330
00:35:57,429 --> 00:36:06,588
can see is become 439. The maximum fitness
here goes 576 and there it is 729. So, that

331
00:36:06,588 --> 00:36:19,519
is also gone so is there any problem? What
will happen if I continue this cycle? Will

332
00:36:19,519 --> 00:36:22,838
I
get what is the solution that I am looking

333
00:36:22,838 --> 00:36:25,949
for?
.One solution.

334
00:36:25,949 --> 00:36:35,919
Five ones; so if I run this algorithm let
us say for hundred cycles what is the what

335
00:36:35,920 --> 00:36:41,209
are the
intuition say? Will I get that or not?

336
00:36:41,208 --> 00:37:02,298
.Probably little bit is 0.
Exactly now, if you look at the expected values

337
00:37:02,298 --> 00:37:06,849
of these 4 elements, these are the 4
elements I have and the expected values are

338
00:37:06,849 --> 00:37:10,109
0.32 for the first one 1.4, for the second
one

339
00:37:10,108 --> 00:37:18,548
1.66, for the third one and 0.58 for the second
one. So, it is very likely that when I do

340
00:37:18,548 --> 00:37:22,329
this
random spinning of the rule wheel and produce

341
00:37:22,329 --> 00:37:29,559
4 new candidates out of 4 copies of sum
4 of these it is very likely that this first

342
00:37:29,559 --> 00:37:36,490
candidate is going to be left out. Why because
expected values its probabilities only 0.08

343
00:37:36,489 --> 00:37:40,189
and if I spin it 4 times my expected value
is

344
00:37:40,190 --> 00:37:47,720
0.32 essentially.
Notice that if I want to spin it 100 times

345
00:37:47,719 --> 00:37:49,980
its value would expected value would go up,
but

346
00:37:49,980 --> 00:37:54,750
that what amount to saying that these 4 candidates
are being clone 100 times. We are not

347
00:37:54,750 --> 00:37:58,818
doing that we are assuming here that the population
remains constant that we start with

348
00:37:58,818 --> 00:38:04,150
this 4 candidates and clone 4 new candidates
out of it. And if I do that based on their

349
00:38:04,150 --> 00:38:12,220
fitness values its very likely that the first
candidate will get left out and as he pointed

350
00:38:12,219 --> 00:38:18,288
out
this is the only candidate of these three

351
00:38:18,289 --> 00:38:24,670
which has the one in the middle place essentially
on the third bit essentially. So, if I want

352
00:38:24,670 --> 00:38:27,849
to remove this, so let us say I want to take
2

353
00:38:27,849 --> 00:38:34,959
copies of this, one copy of this and one copy
of this then no matter what future churning

354
00:38:34,958 --> 00:38:43,039
that I do with this, I will never be able
to get the middle bit as one. So, I like this

355
00:38:43,039 --> 00:38:49,009
example, because it illustrates exactly this
point. Now, what is the ruminative this? Why

356
00:38:49,010 --> 00:39:01,440
is this happening? How can we try to see that
this does not happen, go back to nature if

357
00:39:01,440 --> 00:39:02,940
you want to essentially

358
00:39:02,940 --> 00:39:15,400
..The writing in the genetic the writing (refer
time.

359
00:39:15,400 --> 00:39:21,150
When will they become more and more uniform?
What you are saying has the point that

360
00:39:21,150 --> 00:39:28,479
yes it is possible that for a given species.
So, let us call it as species since you are

361
00:39:28,478 --> 00:39:30,978
talking
about nature as well. So, if you take for

362
00:39:30,978 --> 00:39:41,118
example, the cheetah now the cheetah if biologist
want to look at it is. And if you want to

363
00:39:41,119 --> 00:39:51,190
call it a machine is a perfectly design machine
for hunting its it can in fact, you know you

364
00:39:51,190 --> 00:39:56,200
get to see car adds which kind of try to
portrait them as cheetahs and stuff like that.

365
00:39:56,199 --> 00:40:00,728
And the reason for that is that they can
escalate very fast and they can attain very

366
00:40:00,728 --> 00:40:06,679
high speeds which is good for hunting
essentially. Now, the cheetah was such a good

367
00:40:06,679 --> 00:40:17,018
predator such a good hunting machine
that they all became similar in a sense this

368
00:40:17,018 --> 00:40:21,439
capacity to learn very fast and catch free
came

369
00:40:21,440 --> 00:40:27,380
in all. So, the genetic the diversity in the
cheetah population became less and less and

370
00:40:27,380 --> 00:40:39,579
less essentially. And if the diversity becomes
less it means your tendency to explore the

371
00:40:39,579 --> 00:40:43,700
space decreases essentially. This is what
is happening with this here if we have getting

372
00:40:43,699 --> 00:40:48,489
one candidate without the middle gene. Then
you can never look at solutions which have

373
00:40:48,489 --> 00:40:52,869
the middle gene essentially.
So, likewise if you lose something’s then

374
00:40:52,869 --> 00:40:59,700
you become rigid in your generic makeup
which is happen to the cheetah. And which

375
00:40:59,699 --> 00:41:05,618
is one of the reasons that since human kind
change the world so much that cheetahs do

376
00:41:05,619 --> 00:41:10,430
not have this open spaces. And which they
can go and catch their pray they are on the

377
00:41:10,429 --> 00:41:17,190
danger of becoming extinct essentially.
Simply just like this particular creature

378
00:41:17,190 --> 00:41:22,730
or the gene which this creature is carrying
which

379
00:41:22,730 --> 00:41:33,289
likely to become extinct in the next round
essentially. But the question that we want

380
00:41:33,289 --> 00:41:36,109
to
ask is what lesson should we learn when we

381
00:41:36,108 --> 00:41:40,838
device g a’s. So, when we devise genetic
algorithms what are the parameters that we

382
00:41:40,838 --> 00:41:44,190
have to select the first? Of course, is how
do

383
00:41:44,190 --> 00:41:51,900
we encode the solution? Encoding the solution
should be done. So, encoding followed by

384
00:41:51,900 --> 00:41:58,970
evaluation these are the first 2 steps; how
do you encode your candidate solution? And

385
00:41:58,969 --> 00:42:03,278
secondly how do you what is the fitness function
that you devise for essentially?

386
00:42:03,278 --> 00:42:09,710
Now, remember there is this fitness function
will have to be computed for the entire

387
00:42:09,710 --> 00:42:17,338
population. So, one of the places where I
was reading about genetic algorithms they

388
00:42:17,338 --> 00:42:20,400
said
that imagine that you are trying to devise

389
00:42:20,400 --> 00:42:23,329
a neural network for pattern recognition.
So,

390
00:42:23,329 --> 00:42:27,499
you want to recognize some patterns let us
say hand written characters or something like

391
00:42:27,498 --> 00:42:39,409
that essentially. And if you have a training
set of 1000 patterns given to you based on

392
00:42:39,409 --> 00:42:43,719
which you are training the neural network.
And you are task is to identify the parameters

393
00:42:43,719 --> 00:42:46,879
.of neural network which basically means the
number of nodes and the edge grids and

394
00:42:46,880 --> 00:42:52,349
that kind of stuff. What is the fitness function?
You could use one fitness function; you

395
00:42:52,349 --> 00:42:58,440
could use is that you could test the candidate.
And the candidate in this case is the design

396
00:42:58,440 --> 00:43:04,619
of a neural network or a neural network on
the thousand training candidates that you

397
00:43:04,619 --> 00:43:07,338
are
that are given to you. And the fitness value

398
00:43:07,338 --> 00:43:12,230
is the number of candidates this network
correctly classifies.

399
00:43:12,230 --> 00:43:18,920
Now, if you want to devise such a training
such a fitness function you can imagine the

400
00:43:18,920 --> 00:43:24,460
amount of work the generic algorithm has to
do. Simply to evaluate the fitness value of

401
00:43:24,460 --> 00:43:28,579
a
candidate our example is very simple we just

402
00:43:28,579 --> 00:43:31,180
compute f is equal to x square. It is easy
to

403
00:43:31,179 --> 00:43:35,639
do it on the board, but it not a problem that
is hard to solve anyway essentially. If you

404
00:43:35,639 --> 00:43:40,989
want to look at more difficult problems then
you have to be very careful in how do you

405
00:43:40,989 --> 00:43:47,578
encode the candidates worst. And in the next
class, we will come back to TSP, how to

406
00:43:47,579 --> 00:43:54,959
solve TSP’s using genetic algorithms. Then
how to devise a good fitness functions? The

407
00:43:54,958 --> 00:43:59,629
fitness functions reflect what you want to
achieve, because in the way that we have built

408
00:43:59,630 --> 00:44:04,329
our algorithm. It is a fitness function which
dominates this selection process that this

409
00:44:04,329 --> 00:44:09,530
process of cloning one population into the
next. And the number of copies you make are

410
00:44:09,530 --> 00:44:13,319
dependent directly upon the fitness functions.
So, the fitness function if it is good it

411
00:44:13,318 --> 00:44:17,389
will
do a good job for you essentially, but there

412
00:44:17,389 --> 00:44:21,278
is still one more parameter to be decided
and

413
00:44:21,278 --> 00:44:23,289
that is.
.Randomization.

414
00:44:23,289 --> 00:44:31,349
No no randomization is a built in process
randomization takes place here in the selection

415
00:44:31,349 --> 00:44:35,690
in the spinning of rule wheel and the other
place. It take place is in deciding this

416
00:44:35,690 --> 00:44:40,568
crossover point here where do we do a crossover?
May be it can be done in some more

417
00:44:40,568 --> 00:44:45,068
informed fashion and people have tried out
all kinds of things, but we want to look at

418
00:44:45,068 --> 00:44:47,838
general purpose algorithm at this one.
.Sir

419
00:44:47,838 --> 00:44:55,288
The third thing.
.how do you decide crossover I mean.

420
00:44:55,289 --> 00:45:01,170
.Sure, so I will take your question to mean
how do you decide what is the crossover

421
00:45:01,170 --> 00:45:07,619
operator essentially? So, in this case now,
if you think about a simple situation like

422
00:45:07,619 --> 00:45:12,390
this
where the solution is the bit string. Then

423
00:45:12,389 --> 00:45:18,179
crossover essentially will mix up bit strings
essentially and without loss of generality

424
00:45:18,179 --> 00:45:20,969
a single point crossover will do like any
other

425
00:45:20,969 --> 00:45:29,699
crossover might have done. Though as I said
in the last class goal bug has investigated

426
00:45:29,699 --> 00:45:32,250
as
the, what if there is a sequences of characters

427
00:45:32,250 --> 00:45:40,369
which somehow provide a good feature.
How can we try to see whether they stay together,

428
00:45:40,369 --> 00:45:44,989
but you will not get into that So, we
will assume that a simple single point crossover

429
00:45:44,989 --> 00:45:49,179
does a job for us and this point is
decided randomly at run time whether it is

430
00:45:49,179 --> 00:45:50,728
done here or whether it is done here this
is

431
00:45:50,728 --> 00:45:54,969
decided randomly at run time. So, that is
the second aspects of random random behavior

432
00:45:54,969 --> 00:45:58,698
that is happening here one is in the rule
wheel spinning and the second is in deciding

433
00:45:58,699 --> 00:46:06,630
where the crossover happens. But looking at
this example there is a third thing which

434
00:46:06,630 --> 00:46:12,910
would come to mind which is crucial for the
success of genetic algorithm

435
00:46:12,909 --> 00:46:19,708
.We should take care of extinction
We should take care of extinction. So, how

436
00:46:19,708 --> 00:46:25,739
do you do that? Somebody had said diversity
how do you increase diversity?

437
00:46:25,739 --> 00:46:29,369
.Keep the best.
No you are look at it from a wrong perspective.

438
00:46:29,369 --> 00:46:34,670
.All the feature if we maintained to the external.
No no listen we are trying to design a genetic

439
00:46:34,670 --> 00:46:41,139
algorithm; we are not trying to design the
selection or the mating process right. Now,

440
00:46:41,139 --> 00:46:45,949
what is the third parameter in designing
genetic algorithm which is going to play critical

441
00:46:45,949 --> 00:46:51,329
role here?
.Size of the population

442
00:46:51,329 --> 00:46:55,589
The size of the population genetic algorithms
will work if the population size is large

443
00:46:55,588 --> 00:46:57,889
if
the population is large. Then they will have

444
00:46:57,889 --> 00:47:03,909
all kinds of characters inside their population
with carrying all kinds of genes. And they

445
00:47:03,909 --> 00:47:10,399
will all have a chance to reproduce in some
sense essentially. Now, which is one of the

446
00:47:10,400 --> 00:47:16,829
reasons why we have this third space which
is mutation for the sake of completeness.

447
00:47:16,829 --> 00:47:22,369
There is hope that this mutation process will
sometime toggle the middle bit here and we

448
00:47:22,369 --> 00:47:24,269
will get going essentially.. But in general

449
00:47:24,269 --> 00:47:30,869
.you have to choose the large population size
for these 2 work essentially. One more

450
00:47:30,869 --> 00:47:39,778
aspect that we discussed in the last class
we have not mentioned it now is has to so.

451
00:47:39,778 --> 00:47:40,778
.

452
00:47:40,778 --> 00:47:51,998
So, some people have done it has follows that
you have a population of some size then

453
00:47:51,998 --> 00:47:59,088
you take the most fit members let us say k
most fit members. So, this is k this is n

454
00:47:59,088 --> 00:48:05,679
so if
you have n members you take the most k fit

455
00:48:05,679 --> 00:48:14,268
members only allow those k fit members to
reproduce and mix up the genes both the process

456
00:48:14,268 --> 00:48:22,608
selection and crossover. So, you get a
new populations of k elements. Now, take this

457
00:48:22,608 --> 00:48:35,880
whole population here., so whatever
saying that that this k elements get to reproduce

458
00:48:35,880 --> 00:48:41,180
which means they die in some sense in
the process of reproduction that we have these

459
00:48:41,179 --> 00:48:46,710
2 parents vanish from the scene and inside
this new children come in essentially. So,

460
00:48:46,710 --> 00:48:52,119
we get this new children here k new children
plus we take all these. So, this is k and

461
00:48:52,119 --> 00:48:56,798
this is n. So, we have k plus n elements and
then

462
00:48:56,798 --> 00:49:10,059
you mix them up and take the best k out of
them best n out of this. What we have done

463
00:49:10,059 --> 00:49:16,278
here is that we are not keeping the original
population at all here we have said we just

464
00:49:16,278 --> 00:49:22,809
replace the new one.
So, you started with this population and you

465
00:49:22,809 --> 00:49:29,150
ended up with this population in the process
we lost the no sorry this population after

466
00:49:29,150 --> 00:49:33,619
crossover. So, we started with this one and
we

467
00:49:33,619 --> 00:49:39,730
ended up with this and none of them are reproduce
there essentially. So, we ended up

468
00:49:39,730 --> 00:49:44,259
with the new population which means we replace
the entire whole population with this

469
00:49:44,259 --> 00:49:48,679
new population. But I had said earlier also
that it is not necessary that you replace

470
00:49:48,679 --> 00:49:49,679
the

471
00:49:49,679 --> 00:49:51,719
.entire whole population you may want to keep
some of the best ones from whole

472
00:49:51,719 --> 00:49:57,420
population into the new one. And this is the
one approach that people take just say only

473
00:49:57,420 --> 00:50:04,588
allow the best people to reproduce. Then take
the new children plus the old population

474
00:50:04,588 --> 00:50:08,748
and from that choose the best ten and that
is the new population which gives a chance

475
00:50:08,748 --> 00:50:13,528
for
good solutions to survive in this case essentially.

476
00:50:13,528 --> 00:50:22,449
So, I will stop here and in the next
class, we want to come back to genetic algorithms

477
00:50:22,449 --> 00:50:30,358
and look at how to solve the traveling
salesman problem. How to devise crossover

478
00:50:30,358 --> 00:50:34,068
operations for the travelling salesman
problems and what is the representation that

479
00:50:34,068 --> 00:50:39,920
you can choose for representing the TSP
candidate essentially? So, we will stop here.

480
00:50:39,920 --> 00:50:49,920
.

