how are we going to compute minimum at a

distance the standard algorithm is with

dynamic programming dynamic programming

is a tabular method of computation and

what we're going to do is we're going to

compute d the distance between two

strings x and y X of length in Y of

length M by combining solutions to

subproblems and combining solutions to

subproblems is the intuition of all

dynamic programming algorithms the

intuition is very simple we're gonna for

small prefixes of length I of string X

and J of string y we'll compute the

distance between those strings and we'll

compute our larger distances for larger

strings based on those previously

computed smaller values in other words

we're going to compute the distance IJ

between prefixes of string ax of length

AI and prefixes of string y of length J

for all I and J and we'll end up in the

end with the the distance so let's look

at the actual equation here's the

equation for defining minimum at a

distance and I've given you Levenstein

distance which is the distance when

there is a cost of 1 for insertions one

for deletions and one for sub and two

for substitutions excuse me so let's

look at the initialization condition so

that we first say that any characters in

X so this is the x string for for the AI

characters and x string the distance

between those and the null string and y

is the cost of deleting each of those

characters so the cost of those is is

the length of the string we're deleting

each character and similarly for

inserting all the characters into y to

create the string y the distance between

the null string of X and the string of y

is just the length of Y the insertion

cost of y and then we'll do the the

recurrence relation so walking through

string X and walking through string y

we'll have that the distance in any

particular cell of our matrix is going

to be the minimum way of getting to that

cell from three previous cells

if we go from the string I that's one

shorter so we're deleting one more thing

in I to make it J or we're inserting one

thing into J to make it longer or we're

substituting between the previous string

I of length

I'm X of length I minus 1 and y of

length J minus 1 we're adding in a new

character if it's the same in both

strings we have a cost of 0 if it's

different we have a substitution cost of

2 and then at the end the distance

between the two strings is simply the m

is simply the d of n m the upper right

corner of the matrix so here's our table

and we can fill in each element of the

table from using this equation that

tells us the deletion cost the insertion

cost and the substitution cost so let's

do that

I put the equation up here up here in

the corner so we want to know what's the

distance between the null string of

intention and the null string of

execution obviously 0 the null string

the string I to the string nothing is

still the cost of deleting an eye that's

1 so now let's try to compute what's the

cost of converting in2 e well

intuitively we expect it's going to be a

deletion and a substitution so let's see

if that works out all right so the

element in this cell is the minimum of

three values it's this distance plus 1

this distance plus 1 or this distance

Plus either 2 if I and 0 are different

or 0 if they're the same well they're

different so it's the minimum of I plus

1 which is 2 1 plus 1 which is 2 or 0

plus 2 which is 2 so we have 2 so we're

going to write 2 in this cell similarly

if we want to know the distance between

I N and E it's the minimum distance of I

am - nothing plus 1

two plus one or three or the different

distance between I and II plus the cost

of adding in that N or three or the cost

of having just an I and adding in that n

- e substitution which is two or three

so again we have three here so we have a

two and we have a three and if we

continue along this manner again in each

case looking at the three previous cells

and using this equation over here we'll

slowly end up with and so on and if we

continue along this in this manner we're

going to end up with the following

complete table so every cell in this

table let's take this cell tells you the

cost of sub of the Edit distance of

editing the string int E and turning it

into the string DX e and that means that

this value here in the upper right

corner is the cost the Edit distance

between intention and execution the cost

of turning intention into execution and

we see the value 8 which we earlier said

was the levenshtein distance so we have

levenshtein distance equals 8 that's our

algorithm for computing minimum at a

distance
