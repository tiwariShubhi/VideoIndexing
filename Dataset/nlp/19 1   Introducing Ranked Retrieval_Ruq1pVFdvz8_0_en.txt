hello in this segment I'm going to start

talking about ranked retrieval so so far

all of our queries have been boolean we

give a query like ocean and liner and

the search engine is going to return

precisely the documents that contain the

words ocean and liner and no others

documents either match or they don't now

this can be good for expert users with a

precise understanding of their needs in

the collection and it can also be good

when information retrieval is a system

is a component in a larger application

and the system can consume thousands of

results and adjust the query as needed

but such a system turns out not to

actually be good for the vast majority

of users most users are incapable of

writing good boolean queries or even if

they can write them they think it's far

too much work to write them and in

particular boolean systems often produce

thousands of results and users don't

want to wade through thousands of

results this is particularly true of web

search applications in general there's

this problem with boolean search the

feast or famine problem boolean queries

often result in either too few return

results one or two or even zero because

documents don't precisely satisfy the

search requests whilst they would result

in too many results since the order of

thousands of more so for example here's

a system giving results if I give it the

query standard user d-link 650 it

returns 200 thousand results so I try

and make my query more specific and ask

standard user dealing 650 no card found

but then I get zero results it takes a

lot of skill to come up with the query

that produces a manageable number of

hits the basic problem is if you're

putting an and between words you get too

few results and if you put all between

words you get too many results so part

of the solution of that has been the

development of ranked retrieval models

and the idea of these is that rather

than a set of documents satisfying a

query in ranked retrieval models the

system returns an ordering over the top

documents in the collection

with respect to the query going along

with that has been the adoption of free

text queries rather than explicit query

language like the boolean retrieval

model with its ands ORS or not instead

the users query is now just some words

in a human language in principle these

are two separate choices which could be

manipulated separately but in practice

ranked retrieval models have normally

been associated with free text queries

and the opposite for the boolean

retrieval model the fact the feast or

famine problem doesn't exist in rate

retrieval when a system produces a large

result said users don't really notice

indeed the size that the results said

basically isn't an issue because

normally the system will start off by

just showing the use of the top few

results and so not overwhelm the user

and so the total number of results is

something they probably might even know

or notice this all depends on having a

ranking algorithm that works well though

so that the top results are good results

so the basis of ranked retrieval is

having a good system of scoring we need

to be able to return the documents that

are most likely useful to the searcher

and so that raises the question of how

can we rank order the documents with

respect to a query and the method we'll

look at that to do that is the idea that

what we should do is assign a score or

say a number between 0 and 1 to each

document the score met measures how well

the document in the query match each

other so we need a way of assigning a

score to a query document pair let's

start with a one term query well if the

query term doesn't occur in the document

the score for the document should be

zero and then beyond that probably what

we want to say is that the more

frequently the query term appears in the

document the higher the score should be

and after that how exactly do we score

documents isn't quite so clear and so in

upcoming segments we'll look at a number

of alternatives for this ok but I hope

that's given you an idea of what ranked

retrieval models are and how they differ

from the boolean retrieval model
