now we're going to talk about text

processing the most basic and

fundamental tool we have for text

processing is the regular expression a

regular expression is a formal language

for specifying text strings so let's

suppose that we're looking for

woodchucks in a text document and

woodchucks can be expressed in a number

of ways we can have a singular woodchuck

we can have the plural s at the end we

could have a capital letter at the

beginning of a lowercase and any

combination of these so we're going to

need tools to deal with this problem so

the simplest fundamental tool in a

regular expression is the disjunction

the square brackets in a regular

expression pattern mean any letter

inside the square brackets so lowercase

W capital W square bracket means either

a lowercase W or a capital W so we can

combine that with woodchuck to match

lowercase or uppercase woodchuck and

similarly with digits one two three four

and so on

five six seven eight nine zero matches

any digit now that was kind of annoying

to write so what we'd like to do instead

is have little ranges the range 0

through - 9 so square bracket 0 - 9

means any character inside that range

and the range a - Z means any character

between a capital letter between a and Z

so let's see if we can see how that

works so here's an example of a reg X

POW little tool we're going to use for

regular expressions searching and we

have little text here from dr. Seuss we

looked then we saw him step in on the

map we looked and we saw him The Cat in

the Hat and let's try our disjunctions

so we can have the capital W and the

lowercase W and excuse me a capital W

and a lowercase W and that's going to

match as you can see the capital W and

the lowercase W is just fine or we could

have all the ease and all the MS and

that's going to match all the ease in

the MS or in our ranges we can have all

the capital letters there's all the

capital letters being matched we can

have all the lowercase letters

there's a lot of lowercase letters there

or we could match all of the

alphanumeric characters think for a

second how to match all of the

alphanumeric characters I can have or we

could simply match some of the non

alphanumeric characters we could have

space and exclamation point in our

square brackets and that's going to

match as you can see some of the knowing

of any characters okay so let's go on

another kind of thing we might want to

do in our regular expressions is

negation in our disjunction we might

want to say we don't want some kind of

set of letters so for example we might

want to say not a capital letter and we

can do that by saying carrot a through Z

in our square brackets carrot when it

occurs right after the square brackets

means not carrot a through z not a

capital letter carrot a little a means

neither a capital A nor little a and

carrot a carrot means not an E and not a

carrot so you can see that the carrot

when it occurs right after the square

bracket means not but later on means

simply just a carrot so let's take a

look at that so we can try finding all

of the non capital letters there's all

the non capital letters how about all

the non exclamation points both things

and then non alphanumerics sorry didn't

non alphabetics there's just the spaces

and exclamation points as you can see

how about looking for a carrot any

carrots in here there are none so there

are no carrots into nothing yet nothing

matches another kind of disjunction

which can be used for longer strings is

the pipe symbol sometimes called or or

pipe or just disjunction so groundhog or

woodchuck can be will mean either the

string groundhog or the string with

woodchuck so we can use the pipe symbol

sometimes for the same

the square brackets so a pipe be pipe C

is the same as square bracket ABC and we

can combine these things we can combine

the square brackets in the pipe so we

can have groundhog or woodchuck but use

our square brackets for expressing

capitalisation at the beginning and we

can see that in our in our little

example we can have looked or step and

sure enough there the words looked in

step are both highlighted or we can have

a section of just random things you

don't have to be words we can have all

of the apps excuse me all of the hats

and all of the books and any random

string is funny

finally there's sets of special

characters that are very important in

regular expressions then the question

mark means that the previous character

is optional so the question mark after

this you here mean will match the word

color with or without the you with

without the you with the you then there

are the two cleaning operators named for

Steven cleanie-cleanie star matches zero

or more of the previous character so

here's the star it matches zero or more

O's so we have 100 followed by zero or

more other O's so there's the initial o

and zero other rows and then our H

exclamation point here's our initial o

followed by 100 and then the H and so on

two three and so on sometimes more

simple we can have the clean e plus so

that means one or more of the previous

character so there's our o followed by

the plus meaning one or more oh so

there's one oh there's two O's three OS

and so on and the dot is a special

character meaning any character so be e

G dot n can match begin begun b EG 3 n

matches anything and finally two special

characters the caret matches the

beginning of the line so caret capital A

through Z matches a capital letter at

the beginning of the line the dollar

sign matches the

of a line so a through z dollar match is

the end of a line a capital letter at

the end of the line and then if we want

to talk about a period essence periods

are a special character we have to

escape them and backslash period means a

period so a period by itself means any

character backslash period means a real

period let's go look at some of these so

here's the letter O here's 0 or it's

like a make it let's make it one or more

O first here's one or more oh so there's

one o over here and two O's over here

then and now let's look at beginnings

and ends of lines here is capital

letters at the beginning of a line

here's capital letters at the end of a

line oh there aren't any here's

punctuation at the end of a line there's

all the exclamation points at the end of

the line here's all the periods remember

we have to back slash our periods and if

we didn't back slash the period we would

get all the characters because period

matches everything alright let's do one

more example let's look at um this

little sentence here the other one they

are the blithe one let's let's walk

through how to search for words let's

find the word all the words in this

little passage so think of yourself how

you would do this well the simplest

thing you might do is just type the th e

and that does a good job of finding this

this the here as finds this the Natha

but it misses these two those and also

find some other things let's fix the

first problem and how do we not only get

the those in the middle but those

capitalized those at the beginning well

we're going to use our our disjunction

and sure enough that correctly now

matches the two M beginning of line thus

but you notice that our pattern although

it now captures something it missed

before um it still captures things that

shouldn't be capturing other there and

belies so we need to augment our

patterns I hope you can augment our

pattern we really want the ways there's

not an alphabetic character around it we

mean a space or a punctuation or

something non-alphabetic so let's just

say non-alphabetic afterwards great that

gets rid of them other and there doesn't

solve Blythe because Pillai has an

alphabetic character before it let's go

fix Blythe by saying non info bet ik

before it

there we go now we found all of our and

all of our does so we we looked for the

we noticed it missed the capitalized

examples so we we added some we've made

our pattern more more more expansive we

increased the yield of our pattern but

that incorrectly returns more things so

then we deep we didn't make the pattern

more precise by by specifying more

things this process that we went through

is based on fixing two kinds of errors

one is matching strings we shouldn't

have masked we managed there we matched

other and so that's trying to that's

solving the problem of false positives

or they're called type 1 arrows we were

matching things we shouldn't match and

the other thing we went through is to

solve the problem of not matching things

we should have matched so we missed

those capital thes and that's dealing

with the problem of false negatives or

type 2 errors and it turns out in the

natural language processing we're

constantly dealing with these two

classes of errors so reducing the error

rate in any application we're going to

see this again and again in this course

involves two antagonistic efforts we're

increasing the accuracy or precision

which helps us minimize those false

positives or we're increasing our

coverage are technically called recall

minimizing our false negatives so in

summary regular expressions play a

surprisingly large role in text

processing and the sophisticated

sequences of regular expressions that

we've seen very simple versions of are

often the first model for almost any

text processing tasks for harder tasks

we're offering going to be using and

will introduce these these machine

learning classifiers that are much more

powerful but it turns out even then

regular expressions are used as features

in the classifiers and are very useful

at capturing generalizations so you're

going to be returning again and again to

regular expressions
