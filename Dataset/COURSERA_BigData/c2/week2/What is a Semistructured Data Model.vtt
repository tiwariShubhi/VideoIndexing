WEBVTT

1
00:00:03.030 --> 00:00:05.956
It can be said without a doubt,
and the Internet and

2
00:00:05.956 --> 00:00:08.960
the worldwide web changed
everything in our lives.

3
00:00:10.450 --> 00:00:15.100
The worldwide web is indeed the largest
information source there is today.

4
00:00:15.100 --> 00:00:16.630
But what's the data model behind the web?

5
00:00:17.800 --> 00:00:20.740
We will say that it is
the semi-structure data model.

6
00:00:22.310 --> 00:00:26.560
So after going through this video you
will be able to distinguish between

7
00:00:26.560 --> 00:00:29.870
the structured data model that we
talked about the last time and

8
00:00:29.870 --> 00:00:32.805
semi-structured data model.

9
00:00:32.805 --> 00:00:36.110
Further, you will recognize that the most

10
00:00:36.110 --> 00:00:40.680
times the semi-structured data
refers to tree structured data.

11
00:00:41.720 --> 00:00:47.160
And you can explain why tree
navigation operations are important for

12
00:00:47.160 --> 00:00:49.370
formats like XML and JSON.

13
00:00:51.050 --> 00:00:53.290
Let's a take a very simple web page.

14
00:00:55.090 --> 00:00:58.740
Now this page does not have
a lot of content or stylization.

15
00:00:58.740 --> 00:01:01.970
It doesn't even have links to other pages,
but

16
00:01:01.970 --> 00:01:04.390
let's look at the corresponding HTML code.

17
00:01:06.560 --> 00:01:11.340
This code is used by the browser so
that it can render the HTML, and

18
00:01:11.340 --> 00:01:13.580
notice a few things in this data.

19
00:01:13.580 --> 00:01:19.710
The entire data comes within the HTML and
slash HTML blocks.

20
00:01:21.760 --> 00:01:28.590
And we similarly have a body begin and
end, a header begin and

21
00:01:28.590 --> 00:01:33.950
end, a list begin and end and
a paragraph begin and end.

22
00:01:36.020 --> 00:01:40.330
Everywhere here a block is
nested within a larger block.

23
00:01:41.770 --> 00:01:46.350
The second item to notice is that
unlike a relational structure

24
00:01:46.350 --> 00:01:49.940
there are multiple list items and
multiple paragraphs.

25
00:01:49.940 --> 00:01:53.040
And any single document would
have a different number of them.

26
00:01:54.100 --> 00:01:59.250
This means while the date object has
some structure it is more flexible.

27
00:02:00.360 --> 00:02:05.930
So this is the hallmark office
semi structure date model.

28
00:02:05.930 --> 00:02:07.020
Now XML, or

29
00:02:07.020 --> 00:02:12.100
the extensible markup language, is another
well known standard to represent data.

30
00:02:12.100 --> 00:02:16.880
You can think of XML as a generalization
of HTML where the elements, that's

31
00:02:16.880 --> 00:02:21.270
the beginning and end markers within
the angular brackets, can be any string.

32
00:02:21.270 --> 00:02:24.240
And not like the ones
allowed by standard HTML.

33
00:02:25.530 --> 00:02:28.840
Let's see an example
from a biological case.

34
00:02:30.140 --> 00:02:34.770
As you can see, there are two
elements called sample attribute.

35
00:02:36.100 --> 00:02:39.130
They do structurally
different because they

36
00:02:39.130 --> 00:02:42.320
have different numbers of sub
elements called the value.

37
00:02:44.030 --> 00:02:46.960
Another interesting issue
about XML data processing

38
00:02:46.960 --> 00:02:50.530
is that you can actually credit for
the structure elements.

39
00:02:50.530 --> 00:02:55.560
For example, it is perfectly fine to ask,
what is the name of the element

40
00:02:55.560 --> 00:02:59.250
which contains a sub-element whose
textual content is cell type?

41
00:03:00.390 --> 00:03:06.990
As you can see, you'll get two results,
sample attribute.

42
00:03:06.990 --> 00:03:11.604
An experimental factor because sample
attribute has a sub-element called

43
00:03:11.604 --> 00:03:15.940
category and experimental factor
has a subelement called link and

44
00:03:15.940 --> 00:03:18.860
each of these subelements
have the value celltape.

45
00:03:20.090 --> 00:03:23.860
Now we cannot perform an operation
like this in a relational data model.

46
00:03:23.860 --> 00:03:28.090
For example, we cannot say which relation
has a column with a value, John.

47
00:03:30.730 --> 00:03:35.740
The same idea can also be seen in JSON or
the Java Script Object Notation, which

48
00:03:35.740 --> 00:03:41.610
is a very popular format used for many
different data like Twitter and Facebook.

49
00:03:41.610 --> 00:03:47.170
Consider the example here,
all of the format looks different.

50
00:03:47.170 --> 00:03:50.390
We have a similar nested
structure varies that is lists

51
00:03:50.390 --> 00:03:55.030
containing other lists which will contain
topples Which consists of p value ps.

52
00:03:57.080 --> 00:04:01.160
So the key value pairs at atomic
property names and their values.

53
00:04:02.660 --> 00:04:07.760
But one way to generalize about all these
different forms of semi structured data

54
00:04:07.760 --> 00:04:10.460
is to model them as trees.

55
00:04:10.460 --> 00:04:12.380
Let's go back to .xml.

56
00:04:12.380 --> 00:04:15.210
The left side shows an XML document, and

57
00:04:15.210 --> 00:04:17.440
the right side shows
the corresponding tree.

58
00:04:18.660 --> 00:04:22.030
Since the top object of
the root element is document,

59
00:04:22.030 --> 00:04:23.230
it is also the root of the tree.

60
00:04:24.550 --> 00:04:28.620
Now under document we have
a report element with author and

61
00:04:28.620 --> 00:04:34.450
date under it, and also a paper element
with title, author, and source under it.

62
00:04:34.450 --> 00:04:38.670
The actual values,
like is the textual content of an element.

63
00:04:40.480 --> 00:04:43.760
Since a text data item cannot
have any further components,

64
00:04:43.760 --> 00:04:46.590
these text values are always
the leaves of the tree.

65
00:04:48.760 --> 00:04:53.950
Now, modeling a document as a tree
has significant advantages.

66
00:04:53.950 --> 00:04:55.740
A tree is a well-known data structure,

67
00:04:55.740 --> 00:05:00.100
that allows what's called
a navigational access to data.

68
00:05:00.100 --> 00:05:02.150
Imagine you are standing
on the note paper.

69
00:05:03.460 --> 00:05:08.610
Now you can perform a getParent
operation and navigate the document.

70
00:05:08.610 --> 00:05:14.460
Or you can perform a getChildren operation
to get to the title, author and source.

71
00:05:14.460 --> 00:05:18.550
You can even perform a getSiblings
operation and get to the report.

72
00:05:19.810 --> 00:05:24.970
You can also ask a textual query like
which strings have the substring data and

73
00:05:24.970 --> 00:05:31.340
seek their root-to-node path to get to
the path from document to the text nodes.

74
00:05:31.340 --> 00:05:34.590
You can possibly see how queries
can be evaluated on the tree,

75
00:05:35.670 --> 00:05:37.250
now let us take the query.

76
00:05:37.250 --> 00:05:39.990
Who is the author of XML query data model.

77
00:05:41.900 --> 00:05:47.987
In one evaluation scheme we can navigate
up from the text note to title,

78
00:05:47.987 --> 00:05:53.580
to paper, and then navigate down
to author and then to Don Robie.

79
00:05:53.580 --> 00:05:56.990
Well how do we know that we have to get up
to paper before reversing the direction?

80
00:05:58.050 --> 00:06:01.470
Well, paper is the least,
that's the lowest in the tree,

81
00:06:01.470 --> 00:06:07.170
common ancestor of the author note,
and the XM query data model note.

82
00:06:07.170 --> 00:06:10.207
We will come back to semi
structure data in a later module.