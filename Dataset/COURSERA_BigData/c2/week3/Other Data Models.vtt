WEBVTT

1
00:00:03.200 --> 00:00:05.569
We have discussed quite a few data models,
but

2
00:00:05.569 --> 00:00:08.669
there are many other data models
that have been developed for

3
00:00:08.669 --> 00:00:13.500
various purposes, and we really cannot
cover all of them in a single course.

4
00:00:13.500 --> 00:00:17.360
We'll end these lectures on data models
with an example that may give you

5
00:00:17.360 --> 00:00:21.560
an insight into a class of objects that
define in many different applications.

6
00:00:22.850 --> 00:00:27.972
So after this video you'll be able
to describe how arrays can serve

7
00:00:27.972 --> 00:00:33.278
as a data model, explain why images
can be modeled as vector arrays,

8
00:00:33.278 --> 00:00:37.689
specify a set of operations on scalar and
vector arrays.

9
00:00:39.969 --> 00:00:42.690
Now, we have all seen the arrays.

10
00:00:42.690 --> 00:00:46.390
In the simplest case,
an array is a matrix like this.

11
00:00:46.390 --> 00:00:48.380
Let's call this array A.

12
00:00:50.960 --> 00:00:55.140
The top row in yellow,
gives the column numbers and

13
00:00:55.140 --> 00:00:57.890
the left column, also in yellow,
gives the row numbers.

14
00:00:58.970 --> 00:01:03.263
When we need to refer to a value
of the array as A(3, 2),

15
00:01:03.263 --> 00:01:07.530
we mean the value of the cell in row 3 and
column 2.

16
00:01:07.530 --> 00:01:12.270
This is called indexed structure,
where 3 and

17
00:01:12.270 --> 00:01:18.070
2 are the row and column indices that are
necessary to get the value of a data item.

18
00:01:19.430 --> 00:01:21.830
The area has two dimensions.

19
00:01:21.830 --> 00:01:24.050
So hence there are two indexes.

20
00:01:24.050 --> 00:01:27.650
If these were a three dimensional array,
we would have three indexes.

21
00:01:28.860 --> 00:01:29.390
Now earlier,

22
00:01:29.390 --> 00:01:34.360
we have seen that we can represent the two
dimensional array as a three column table.

23
00:01:34.360 --> 00:01:37.790
One column for the row index,
one column for the column index, and

24
00:01:37.790 --> 00:01:38.849
the last column for the value.

25
00:01:40.310 --> 00:01:45.310
Thus a k dimensional array can be
represented as a relation with k

26
00:01:45.310 --> 00:01:46.090
plus one columns.

27
00:01:47.690 --> 00:01:51.100
The number of tuples in this
representation will be the product of

28
00:01:51.100 --> 00:01:55.220
the size of the first dimension times the
size of the second dimension and so forth.

29
00:01:56.670 --> 00:02:01.000
Then in this case,
the size is five in each dimension.

30
00:02:01.000 --> 00:02:08.070
So there are 25 C column tuples in
a relation representing the array.

31
00:02:08.070 --> 00:02:11.890
A more useful situation occurs
when the cells of an array have

32
00:02:11.890 --> 00:02:13.490
a vectors as values.

33
00:02:14.620 --> 00:02:19.610
As you can see in the 2D vector array
here, each cell has a three vector.

34
00:02:19.610 --> 00:02:21.340
That is a vector with three elements.

35
00:02:22.400 --> 00:02:25.150
Therefore, if we want to
receive a cell value and

36
00:02:25.150 --> 00:02:27.930
treat it like before,
we'll get back the whole vector.

37
00:02:29.220 --> 00:02:31.680
Now, this type of data
should look familiar to you,

38
00:02:31.680 --> 00:02:35.840
because images often have a red,
green and blue channels per pixel.

39
00:02:37.030 --> 00:02:38.050
In other words,

40
00:02:38.050 --> 00:02:43.780
images of vector valued arrays where each
array cell has a three color vector.

41
00:02:45.270 --> 00:02:49.000
We can also think of the array model
in the context of satellite images.

42
00:02:49.000 --> 00:02:52.850
Where there are many more channels
depending on the range of wavelengths

43
00:02:52.850 --> 00:02:54.100
each channel catches.

44
00:02:55.360 --> 00:02:58.710
Let us consider the operations
on arrays of vectors.

45
00:02:58.710 --> 00:03:03.430
Because it is a combination of two models,
one can create different combinations of

46
00:03:03.430 --> 00:03:08.140
array operations, vector operations and
composite operations.

47
00:03:08.140 --> 00:03:08.650
Here are some.

48
00:03:09.810 --> 00:03:12.580
The dimension of the array here,
the first operation, is two.

49
00:03:13.940 --> 00:03:16.289
If we pick up any dimension, say one.

50
00:03:16.289 --> 00:03:20.741
The size of it is also two
because they're two elements,

51
00:03:20.741 --> 00:03:23.260
zero and one in each dimension.

52
00:03:23.260 --> 00:03:31.259
As we saw before, the value of the cell
(1,1) is a vector 16, 301, 74.

53
00:03:31.259 --> 00:03:37.979
While the value of A11 component 2 is 74.

54
00:03:37.979 --> 00:03:42.279
The length of the vector is a square root
of the sum of the elements of the vector.

55
00:03:42.279 --> 00:03:48.999
So length of A11 would come to 310.375.

56
00:03:48.999 --> 00:03:50.623
The distance function can be so

57
00:03:50.623 --> 00:03:54.184
simple like the Euclidean distance
function between two vectors or

58
00:03:54.184 --> 00:03:57.820
the cosine of an angle between them
as we saw in the previous lecture.

59
00:03:59.080 --> 00:04:02.580
But it can also be something more complex,
based on the needs of the application.

60
00:04:04.320 --> 00:04:08.390
Obviously one can also perform operations
like selection over indices so

61
00:04:08.390 --> 00:04:13.170
we can ask which cells had
the zero value greater than 25.

62
00:04:13.170 --> 00:04:16.060
Giving as the result zero one and
one zero.

63
00:04:17.190 --> 00:04:20.050
You will experience some of these
operations in your hands on session.