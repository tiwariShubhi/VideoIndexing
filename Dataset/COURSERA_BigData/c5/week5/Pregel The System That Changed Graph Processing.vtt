WEBVTT

1
00:00:01.040 --> 00:00:01.700
In 2010, Google

2
00:00:03.550 --> 00:00:06.650
published a paper outlining a system
that they had been working on.

3
00:00:09.130 --> 00:00:13.740
This publication about a system called
Pregel, has been one of the most

4
00:00:13.740 --> 00:00:18.370
influential publications on
large scale graph computing.

5
00:00:18.370 --> 00:00:22.160
The Pregel system essentially implemented
the BSB model that we covered in

6
00:00:22.160 --> 00:00:22.850
the last lecture.

7
00:00:24.230 --> 00:00:27.180
To show how the Pregel
system is programmed,

8
00:00:27.180 --> 00:00:32.810
we present the published code of Google's
most famous algorithm, the PageRank.

9
00:00:34.300 --> 00:00:38.080
Recall that PageRank's task is
to compute note centrality.

10
00:00:39.240 --> 00:00:43.160
The basic philosophy of PageRank is
that a note that is connected to an more

11
00:00:43.160 --> 00:00:45.350
important note gains more importance.

12
00:00:46.900 --> 00:00:51.400
In the filler on the right, B is a very
important node with a high page rank

13
00:00:51.400 --> 00:00:55.650
because a lot of other nodes directly or
indirectly point to it.

14
00:00:55.650 --> 00:01:00.130
So C being his direct neighbor
that receives an edge from B,

15
00:01:00.130 --> 00:01:02.050
also has a high page rank.

16
00:01:02.050 --> 00:01:05.190
All the C itself,
there's not have too many incident edges.

17
00:01:06.820 --> 00:01:10.500
On the left side we have
Google's published C++ code

18
00:01:10.500 --> 00:01:13.130
that implements PageRank method
on the Pregel infrastructure.

19
00:01:14.450 --> 00:01:17.730
You don't have to know C++ to understand
the basic essence of the code.

20
00:01:18.840 --> 00:01:22.860
We will explain the basic elements of
the Vertex program in the next few slides.

21
00:01:24.540 --> 00:01:27.690
Remember from the last lecture
that the VSP technique considers

22
00:01:27.690 --> 00:01:28.980
a vertex to be a process.

23
00:01:30.360 --> 00:01:34.100
Every vertex implements
a method called compute.

24
00:01:36.070 --> 00:01:40.760
This method, implements the logic of what
a vertex should do during the super steps.

25
00:01:42.490 --> 00:01:47.350
The program starts by creating a special
kind of vertex called the PageRank vertex

26
00:01:47.350 --> 00:01:49.880
for which this compute
method is specified.

27
00:01:51.100 --> 00:01:55.500
You will notice that the compute
method starts by saying what happens

28
00:01:55.500 --> 00:01:57.810
when the super step is one or more.

29
00:01:59.060 --> 00:02:00.590
But what happens in super step zero?

30
00:02:01.900 --> 00:02:05.691
Usually, superstep 0 is used for
initialization.

31
00:02:05.691 --> 00:02:10.940
Every vertex, initialization
PageRank value to a same number

32
00:02:10.940 --> 00:02:14.870
which is one divided by the total
number of vertices in the graph.

33
00:02:16.090 --> 00:02:21.840
Computationally, a PageRank of a vertex is
a number calculated by adding two terms.

34
00:02:23.380 --> 00:02:27.790
The first term, depends on the total
number of vertices in the graph, and

35
00:02:27.790 --> 00:02:29.120
is therefore the same every time.

36
00:02:29.120 --> 00:02:34.990
And the second term depends on the page
rank of the neighbors of the vertex.

37
00:02:36.420 --> 00:02:38.200
How does the vertex
compute the second term?

38
00:02:39.270 --> 00:02:42.590
It gets the PageRank values of
the neighbors in its messages,

39
00:02:42.590 --> 00:02:43.170
and adds them up.

40
00:02:44.390 --> 00:02:48.950
As we saw for SSSP,
after a vertex computes its value,

41
00:02:48.950 --> 00:02:54.170
it goes to the propagate step and
sends a message to its outgoing edges.

42
00:02:54.170 --> 00:02:57.210
For PageRank, the message it sends out

43
00:02:57.210 --> 00:03:00.680
is just computed value divided
by the number of outgoing edges.

44
00:03:01.890 --> 00:03:06.800
When this is done, the node halts for
the next superstep, and waits for

45
00:03:06.800 --> 00:03:08.190
some other node to wake it up.

46
00:03:09.650 --> 00:03:14.590
At this point, we have seen two
examples of graph analytic operations

47
00:03:14.590 --> 00:03:18.380
executed on the BSB programming model.

48
00:03:18.380 --> 00:03:22.370
Now, we'll look at the same problem
from a slightly different viewpoint.

49
00:03:23.710 --> 00:03:28.220
GraphLab, originally a project from
Carnegie Mellon University, now turned

50
00:03:28.220 --> 00:03:32.450
into a company called Dato, took a similar
yet different approach to the problem.

51
00:03:33.970 --> 00:03:37.540
In GraphLab, any kind of data can be
associated with a vertex or an edge.

52
00:03:38.710 --> 00:03:41.310
This information is stored in
what is called a data graph.

53
00:03:42.610 --> 00:03:45.050
Let's look at the same
page like I already did.

54
00:03:45.050 --> 00:03:48.780
The syntax is a bit different but
the logical blocks are identical.

55
00:03:50.080 --> 00:03:52.500
These are the same blocks
that we highlighted before.

56
00:03:53.820 --> 00:03:58.450
GraphLab breaks up these blocks into
three different user specified functions

57
00:03:59.910 --> 00:04:03.780
called Gather, Apply,
Scatter, or GAS, for short.

58
00:04:05.540 --> 00:04:07.050
Okay, so what's different?

59
00:04:08.110 --> 00:04:11.523
Let's mention a few important differences.

60
00:04:11.523 --> 00:04:13.300
First, let's consider gather.

61
00:04:14.830 --> 00:04:19.234
Rather than adopting a message passing or
data flow model like Pregel,

62
00:04:19.234 --> 00:04:24.230
GraphLab allows the user defined update
function complete freedom to read and

63
00:04:24.230 --> 00:04:28.032
modify any of the data on
adjacent vertices edges.

64
00:04:29.822 --> 00:04:35.180
In GraphLab, a receiving vertex has
access to the data on adjacent vertices

65
00:04:35.180 --> 00:04:40.060
even if the adjacent vertices did
not schedule the current update.

66
00:04:41.450 --> 00:04:46.340
In contrast, for Pregel the control
is with descending nodes.

67
00:04:46.340 --> 00:04:49.420
An update can happen only when
a node sends out messages.

68
00:04:50.530 --> 00:04:54.710
For some graph analytics operations
like a dynamic version of PageRank,

69
00:04:54.710 --> 00:04:55.620
this is very important.

70
00:04:56.830 --> 00:05:02.100
Further, if vertex can update
its value asynchronously.

71
00:05:02.100 --> 00:05:06.260
That is, as soon as it receives
an update without having to wait for

72
00:05:06.260 --> 00:05:08.250
all nodes like we do in VSP.

73
00:05:09.630 --> 00:05:14.520
This often helps some intuitive algorithms
like page rank converge faster.

74
00:05:15.610 --> 00:05:18.620
When the graph is large and
must be split across machines,

75
00:05:19.700 --> 00:05:23.310
BSP cuts the graph along edges,
as we see on this slide.

76
00:05:24.480 --> 00:05:28.770
So every cut edge results in
a machine to machine communication.

77
00:05:29.850 --> 00:05:32.710
If we increase the number
of across machine edges,

78
00:05:32.710 --> 00:05:35.250
we increase communication cost.

79
00:05:35.250 --> 00:05:37.330
This has an interesting
practical consequence.

80
00:05:39.110 --> 00:05:43.650
As we have mentioned,
many graph applications have communities.

81
00:05:43.650 --> 00:05:45.290
And central nodes that have high degree.

82
00:05:46.290 --> 00:05:49.150
Many young people today have
over 500 Facebook friends.

83
00:05:50.410 --> 00:05:53.005
So when an analytical
operation like Page Rank,

84
00:05:53.005 --> 00:05:56.850
that goes through multiple
iterations until convergence, for

85
00:05:56.850 --> 00:06:00.070
these graphs, the communication
cost can become very high.

86
00:06:01.270 --> 00:06:05.540
In the cluster graph shown here, every
color represents a different machine.

87
00:06:06.780 --> 00:06:08.917
Let's look at that red vertex.

88
00:06:08.917 --> 00:06:11.239
What would happen if we
split it like this instead?

89
00:06:13.515 --> 00:06:16.250
The red node gets split.

90
00:06:16.250 --> 00:06:21.260
And different vertices of different
machines work with their own copy

91
00:06:21.260 --> 00:06:21.960
of the red vertex.

92
00:06:23.480 --> 00:06:27.490
In the diagram,
the primary red vertex is marked zero and

93
00:06:27.490 --> 00:06:29.330
copies are marked one through five.

94
00:06:30.970 --> 00:06:33.400
Now the gather phase happens for
each copy.

95
00:06:36.010 --> 00:06:39.590
Followed by a second operation from
the copies to the primary red vertex.

96
00:06:41.100 --> 00:06:45.000
And this is followed by new user
defined operation called merge

97
00:06:45.000 --> 00:06:48.488
that combines the partial results from
the copies to the primary vertex.

98
00:06:48.488 --> 00:06:53.290
So for PageRank, the merge operation
boils down to computing the total

99
00:06:53.290 --> 00:06:57.760
summation of the partial summation
of the edges computed at the copies.

100
00:06:57.760 --> 00:07:02.230
Thus in this lesson,
we have seen two of the most influential

101
00:07:02.230 --> 00:07:06.470
paradigms of large scale graph
computation when the number of nodes and

102
00:07:06.470 --> 00:07:09.400
edges run into tens of millions and more.