WEBVTT

1
00:00:02.600 --> 00:00:07.300
As we mentioned in the last lesson, there
is no single irricuteous solution for

2
00:00:07.300 --> 00:00:08.200
big data problems.

3
00:00:08.200 --> 00:00:10.960
So in this lesson,

4
00:00:10.960 --> 00:00:14.900
our goal will be to explore some existing
solutions in a little more depth.

5
00:00:16.780 --> 00:00:19.290
So after this lesson, you'll be able to.

6
00:00:20.540 --> 00:00:23.250
Explain the at least five
desirable characteristics of

7
00:00:23.250 --> 00:00:29.150
a Big Data Management System,
explain the differences between acid and

8
00:00:29.150 --> 00:00:32.070
base, and

9
00:00:32.070 --> 00:00:37.210
list examples of BDMSs and describe some
of their similarities and differences.

10
00:00:39.260 --> 00:00:44.890
So we start from high level, suppose there
were an ideal big data management system.

11
00:00:46.170 --> 00:00:48.610
What capabilities or
features should such a system have?

12
00:00:50.000 --> 00:00:53.700
Professor Michael Carey of
the University of California Irvine

13
00:00:53.700 --> 00:00:56.750
has described a number of characteristics.

14
00:00:56.750 --> 00:01:00.590
We'll go through them and
use them as an idealistic yardstick

15
00:01:00.590 --> 00:01:03.190
against which we compare
existing solutions.

16
00:01:04.500 --> 00:01:10.820
First, the ideal BDMS would allow for
a semi-structured data model.

17
00:01:10.820 --> 00:01:15.060
Now that does not mean it will only
support a specific format like XML.

18
00:01:16.170 --> 00:01:18.550
The operative word here is flexible.

19
00:01:19.660 --> 00:01:22.390
The flexibility can take many forms,

20
00:01:23.600 --> 00:01:27.920
one of which Is the degree to which
schemas should be supported by the system.

21
00:01:29.190 --> 00:01:31.810
In a perfect world, it should support

22
00:01:31.810 --> 00:01:35.550
a completely traditional application which
requires the development of a schema.

23
00:01:37.250 --> 00:01:41.840
At the same time, it should also support
applications which require no schema,

24
00:01:41.840 --> 00:01:45.420
because the data can vary in terms
of its attributes and relationships.

25
00:01:47.790 --> 00:01:53.290
A different axis of flexibility
is in the data types it supports.

26
00:01:53.290 --> 00:01:56.810
For example, it should support
operations on text and documents.

27
00:01:57.920 --> 00:02:03.010
It should also permit social media and
other data that have a time component and

28
00:02:03.010 --> 00:02:06.820
need temporal operations, like before,
after, during, and so on.

29
00:02:08.260 --> 00:02:11.340
Similarly, it should
allow spacial data and

30
00:02:11.340 --> 00:02:15.530
allow operations like find all data
within a five mile radius of a landmark.

31
00:02:17.960 --> 00:02:20.290
As we saw in a previous lesson,

32
00:02:20.290 --> 00:02:24.260
a big advantage of a DBMS is that
is provides a query language.

33
00:02:25.800 --> 00:02:30.360
There is a notion that query languages
present a steep learning curve for

34
00:02:30.360 --> 00:02:33.690
data science people with no
background in computer science.

35
00:02:33.690 --> 00:02:37.900
However, to effectively
manage large volumes of data,

36
00:02:37.900 --> 00:02:41.190
it's often more convenient
to use a query language and

37
00:02:41.190 --> 00:02:45.720
let the query processor automatically
determine optimal ways to receive data.

38
00:02:47.270 --> 00:02:50.440
Now this query language may or
may not look like SQL,

39
00:02:50.440 --> 00:02:55.120
which is the standard query language used
by the modern relational systems, but

40
00:02:55.120 --> 00:02:57.870
it should at least be equally powerful.

41
00:02:59.080 --> 00:03:04.770
Now this is not an unreasonable feature
given that most DBMS vendors offer their

42
00:03:04.770 --> 00:03:12.120
own extension of SQL Of course it's not
enough to just have a good query language.

43
00:03:13.430 --> 00:03:18.230
Today's big data systems must
have a parallel query engine

44
00:03:18.230 --> 00:03:20.080
which will run on multiple machines.

45
00:03:21.480 --> 00:03:25.240
The machines can be connected to
a shared nothing architecture, or

46
00:03:25.240 --> 00:03:28.760
shared memory architecture,
or a shared cluster.

47
00:03:28.760 --> 00:03:34.260
The shared nothing means two machines
do not share a disk or memory.

48
00:03:34.260 --> 00:03:36.750
But this is a critical requirement for

49
00:03:36.750 --> 00:03:41.850
any BDMS regardless of how complete
the supported query languages is for

50
00:03:41.850 --> 00:03:46.970
efficiency sake Continuing with our list,
the next

51
00:03:46.970 --> 00:03:51.620
capability of a BDMS is often
not emphasized as much as it should be.

52
00:03:52.890 --> 00:03:56.880
Some applications working on top
of a BDMS will issue queries

53
00:03:56.880 --> 00:04:01.200
which will only have a few conditions and
a few small objects to return.

54
00:04:01.200 --> 00:04:06.740
But some applications, especially those
generated by other software tools or

55
00:04:06.740 --> 00:04:10.380
machine learning algorithms can
have many many conditions and

56
00:04:10.380 --> 00:04:11.990
can return many large objects.

57
00:04:13.090 --> 00:04:18.320
In my own work, we have seen how internet
bots can blast an information system

58
00:04:18.320 --> 00:04:22.230
with really large queries that
can potentially choke the system.

59
00:04:22.230 --> 00:04:23.580
But that should not happen in a BDMS.

60
00:04:25.810 --> 00:04:28.080
Now, we discussed streaming
data in a previous lesson.

61
00:04:29.600 --> 00:04:33.830
In many cases,
a BDMS will have both streaming data,

62
00:04:33.830 --> 00:04:37.590
which adds to the volume,
as well as to the large data that

63
00:04:37.590 --> 00:04:40.380
need to be combined with the streaming
data to solve a problem.

64
00:04:41.430 --> 00:04:45.140
An example would be to combine
streaming data from weather stations

65
00:04:45.140 --> 00:04:48.870
with historical data to make
better predictions for wild fire.

66
00:04:51.610 --> 00:04:54.510
We have discussed the definition,
significance and

67
00:04:54.510 --> 00:04:57.140
importance of scalability before.

68
00:04:57.140 --> 00:05:00.130
However, what a BDMS needs to guarantee

69
00:05:00.130 --> 00:05:05.260
that it is designed to operate over a
cluster, possibly a cluster of hundred or

70
00:05:05.260 --> 00:05:09.450
thousand of machines and
that it knows how to handle a failure.

71
00:05:11.040 --> 00:05:15.200
Further the system should be able
to handling new machines joining or

72
00:05:15.200 --> 00:05:16.829
existing machines leaving the cluster.

73
00:05:18.910 --> 00:05:23.530
Finally, our BDMS must have
data management capabilities.

74
00:05:23.530 --> 00:05:29.080
It should be easy to install, restart and
configure, provide high availability and

75
00:05:29.080 --> 00:05:33.340
make operational management as
simple as possible even when

76
00:05:33.340 --> 00:05:37.880
a BDMS is declined across data centers
that are possibly geographically apart

77
00:05:40.770 --> 00:05:45.580
In a prior module, we discussed
the ACID properties of transactions and

78
00:05:45.580 --> 00:05:47.880
said that BDMSs guarantee them.

79
00:05:49.250 --> 00:05:53.270
For big data systems,
there is too much data and

80
00:05:53.270 --> 00:05:56.540
too many updates from too many users.

81
00:05:56.540 --> 00:05:59.730
So the effort to maintain ACID properties

82
00:05:59.730 --> 00:06:02.330
May lead to a significant
slowdown of the system.

83
00:06:03.550 --> 00:06:07.590
Now, this lead to the idea, that while
the ACID properties are still desirable,

84
00:06:08.840 --> 00:06:14.410
it might be more practical to relax
the ACID conditions and replace them

85
00:06:14.410 --> 00:06:19.770
with what's called the BASE properties,
beginning with Basic availability.

86
00:06:21.410 --> 00:06:24.060
This states that the system

87
00:06:24.060 --> 00:06:26.600
does guarantee the availability
of data in the following sense.

88
00:06:28.140 --> 00:06:32.710
If you make a request,
there will be a response to that request.

89
00:06:32.710 --> 00:06:36.310
But, the response could still
be failure to obtain data or

90
00:06:36.310 --> 00:06:39.800
the data isn't Inconsistent state or
changing state.

91
00:06:41.370 --> 00:06:44.970
Well this is not unusual because
it's much like waiting for

92
00:06:44.970 --> 00:06:46.540
a check to clear a bank account.

93
00:06:49.270 --> 00:06:51.580
Second, there is a soft state.

94
00:06:52.620 --> 00:06:57.650
Which means the state of the system
is very likely to change over time.

95
00:06:57.650 --> 00:07:00.030
So even during times without input,

96
00:07:00.030 --> 00:07:04.330
there may be changes going on through
the system due to eventual consistency.

97
00:07:05.680 --> 00:07:08.190
Thus the state of
the system is always soft.

98
00:07:09.640 --> 00:07:12.080
And finally there's eventual consistency.

99
00:07:13.330 --> 00:07:18.010
This means that the system will
eventually become consistent

100
00:07:18.010 --> 00:07:19.770
once it stops receiving input.

101
00:07:21.870 --> 00:07:23.730
When it stops receiving input,

102
00:07:23.730 --> 00:07:28.800
the data will propagate to everywhere
that it should sooner or later go to but

103
00:07:28.800 --> 00:07:32.840
in reality the system will
continue to receive input.

104
00:07:32.840 --> 00:07:36.840
And it's not checking the consistency
of every transaction at every moment

105
00:07:36.840 --> 00:07:40.610
because there's still lots
of transactions to process.

106
00:07:40.610 --> 00:07:45.904
So, if you make a new Facebook post,
your friend in Zambia, who is supposed

107
00:07:45.904 --> 00:07:51.200
to see your update but is served by a very
different data center in a different

108
00:07:51.200 --> 00:07:56.116
geographic region, will certainly
see it but may not see right away.

109
00:07:58.272 --> 00:08:02.066
Now for those of you who have a bit
of computer science background,

110
00:08:02.066 --> 00:08:06.744
we just want to mention in passing that
there is actually some theoretical results

111
00:08:06.744 --> 00:08:08.260
behind this relaxation.

112
00:08:09.490 --> 00:08:13.090
The result comes from what's
called the CAP Theorem.

113
00:08:13.090 --> 00:08:16.840
Also named Bauer's theorem after
the computer scientist Eric Bauer.

114
00:08:18.200 --> 00:08:23.410
He states, that it is impossible for
a distributed computer system

115
00:08:23.410 --> 00:08:27.420
to simultaneously provide all
three of the following guarantees.

116
00:08:28.680 --> 00:08:30.300
Consistency.

117
00:08:30.300 --> 00:08:34.970
It means all nodes see the
same data at any time.

118
00:08:37.080 --> 00:08:42.000
Availability, which is a guarantee
that every request receives a response

119
00:08:42.000 --> 00:08:43.948
about whether it succeeded or failed.

120
00:08:43.948 --> 00:08:48.150
And Partition Tolerance.

121
00:08:48.150 --> 00:08:51.270
Which means the system
continues to operate

122
00:08:51.270 --> 00:08:55.610
despite arbitrary partitioning
due to network failures.

123
00:08:55.610 --> 00:08:59.740
Now, most of the big data systems
available today will adhere

124
00:08:59.740 --> 00:09:04.130
to these BASE properties,
although several modern systems

125
00:09:04.130 --> 00:09:08.010
do offer the stricter ACID properties,
or at least several of them.

126
00:09:10.180 --> 00:09:13.060
Now given the idealistic background
of what is desirable and

127
00:09:13.060 --> 00:09:17.060
achievable in a big data system,
today's marketplace for

128
00:09:17.060 --> 00:09:20.100
big data related products
looks somewhat like this.

129
00:09:21.680 --> 00:09:26.350
Now this is Matt Turk's depiction of big
data products from a couple of years back.

130
00:09:27.750 --> 00:09:31.730
You would notice that the products
are grouped into categories, like no SQL,

131
00:09:31.730 --> 00:09:36.340
massively parallel databases, analytic
systems, real time systems, and so forth.

132
00:09:37.430 --> 00:09:42.050
In this lesson, we'll do a quick
tour through a few of these products

133
00:09:43.690 --> 00:09:45.470
from different areas of this landscape.

134
00:09:47.140 --> 00:09:53.070
In each case our goal will to be assess
what aspects of our ideal BDMS they cover,

135
00:09:53.070 --> 00:09:56.240
and whether they have obvious limitations.

136
00:09:56.240 --> 00:10:01.650
Now we will not cover all features
of every system, but will highlight

137
00:10:01.650 --> 00:10:05.130
those aspects of the system that
are relevant to our discussion on BDMS.