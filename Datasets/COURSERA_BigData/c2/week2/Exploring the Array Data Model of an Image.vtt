WEBVTT

1
00:00:00.568 --> 00:00:02.240
In this hands-on exercise,

2
00:00:02.240 --> 00:00:05.870
we will be looking at an image file,
which uses an array data model.

3
00:00:07.050 --> 00:00:11.380
First, we will open a terminal window and
display an image file on the screen.

4
00:00:12.890 --> 00:00:16.630
Next, we will examine the structure
of the image, and finally,

5
00:00:16.630 --> 00:00:19.860
extract pixel values from
various locations in the image.

6
00:00:21.550 --> 00:00:22.660
Let's begin.

7
00:00:22.660 --> 00:00:25.954
First, we'll open a terminal window by
clicking on the terminal icon at the top

8
00:00:25.954 --> 00:00:26.650
of the toolbar.

9
00:00:33.101 --> 00:00:37.989
Next, we'll CDN2 the directory
containing the image,

10
00:00:37.989 --> 00:00:41.390
cdn2downloads/bigdata2/image.

11
00:00:48.410 --> 00:00:51.470
We can run ls to see the image
in different scripts.

12
00:00:54.050 --> 00:00:58.344
The file, Australia.jpg,
is an image that we want to view,

13
00:00:58.344 --> 00:01:00.090
we can use eog to view it.

14
00:01:00.090 --> 00:01:08.830
Run eog Australia.jpg Eog is
a common image viewer on Linux.

15
00:01:11.192 --> 00:01:15.870
Australia.jpg is a satellite image
of the Australian continent.

16
00:01:15.870 --> 00:01:17.560
Now let's look at the structure
of this image file.

17
00:01:21.320 --> 00:01:25.815
If we go back to our terminal window,
we can run the image

18
00:01:25.815 --> 00:01:30.611
viewer in the background by
hitting CTRL+Z, and then bg.

19
00:01:30.611 --> 00:01:35.319
We can view the dimensions or
structure of the array data model of this

20
00:01:35.319 --> 00:01:38.904
image by running
dimensions.py Australia.jpg.

21
00:01:43.740 --> 00:01:50.860
This says that the image has
5250 columns and 4320 rows.

22
00:01:50.860 --> 00:01:53.240
So it is a two-dimensional image.

23
00:01:53.240 --> 00:01:55.671
Additionally, each cell or

24
00:01:55.671 --> 00:02:01.470
pixel within this image is
composed of three 8-bit pixels.

25
00:02:01.470 --> 00:02:06.130
These pixels are composed of three
elements, red, green, and blue.

26
00:02:06.130 --> 00:02:09.410
We can extract or
view the individual pixel elements

27
00:02:09.410 --> 00:02:13.110
at a specific location in the image
by using the pixel.py script.

28
00:02:14.440 --> 00:02:21.240
We can run pixel.py Australia.jpg 0
0 to see the value at one location.

29
00:02:29.430 --> 00:02:33.430
The 0 0 location is
the corner of the image.

30
00:02:33.430 --> 00:02:39.281
If we go back to the image, the corners
are all the ocean, so they're dark blue.

31
00:02:39.281 --> 00:02:43.995
If we look at the value that was
extracted, we see that blue has a high

32
00:02:43.995 --> 00:02:48.490
value of 50, whereas red and
green are low with 11 and 10.

33
00:02:48.490 --> 00:02:51.991
If we view it at another corner,
by looking at 5000 0,

34
00:02:51.991 --> 00:02:53.610
we'll see the same value.

35
00:03:01.136 --> 00:03:05.679
If we go back to the image, the middle
of the image, which is the land,

36
00:03:05.679 --> 00:03:07.070
is orange or yellow.

37
00:03:07.070 --> 00:03:12.261
It's definitely not blue, so
let's take a look at a pixel value there.

38
00:03:12.261 --> 00:03:17.010
Okay, run pixel.py
Australia.jpg 2000 2000.

39
00:03:23.750 --> 00:03:31.070
This says that the red has a value of 118,
green is 89, and the blue is 57.

40
00:03:31.070 --> 00:03:34.130
So the red and green are higher than blue,
so it's not ocean.