WEBVTT

1
00:00:00.770 --> 00:00:05.720
A very significant aspect of data
management is to document, define,

2
00:00:05.720 --> 00:00:09.580
implement, and test the set of
operations that are required for

3
00:00:09.580 --> 00:00:10.610
a specific application.

4
00:00:11.910 --> 00:00:16.570
As we'll see later in the specialization,
some operations are independent of

5
00:00:16.570 --> 00:00:21.770
the type of data and some others would
require us to know the nature of the data

6
00:00:21.770 --> 00:00:24.890
because the operations make use
of a particular data model.

7
00:00:24.890 --> 00:00:26.180
That is the way that it is structured.

8
00:00:27.760 --> 00:00:31.130
In general, there are two
broad divisions of operations.

9
00:00:32.620 --> 00:00:35.950
Those that work on a singular object and

10
00:00:35.950 --> 00:00:38.590
those that work on
collections of data objects.

11
00:00:40.020 --> 00:00:44.520
In the first case,
an operation that crops an image,

12
00:00:44.520 --> 00:00:49.120
that means extracts a sub
area from an area of pixels,

13
00:00:49.120 --> 00:00:53.280
is a single object operation because we
consider the image as a single object.

14
00:00:55.250 --> 00:00:58.860
One can think of many subclasses
of the second category

15
00:00:58.860 --> 00:01:01.790
where the operations
are on data collections.

16
00:01:01.790 --> 00:01:06.300
We briefly referred to three very
common operations that can be done

17
00:01:06.300 --> 00:01:07.640
regardless of the nature of the data.

18
00:01:08.820 --> 00:01:13.610
The first is to take a collection and
filter out a subset of that collection.

19
00:01:13.610 --> 00:01:17.180
The most obvious case is
selecting a subset from a set.

20
00:01:17.180 --> 00:01:21.010
In this example, we select circles
whose number is greater than three.

21
00:01:22.050 --> 00:01:26.830
A second case is merging two collections
together to form a larger collection.

22
00:01:28.220 --> 00:01:29.780
In the example shown,

23
00:01:29.780 --> 00:01:35.380
two three structure data items are merged
by fusing the node with a common property.

24
00:01:35.380 --> 00:01:35.880
That is two.

25
00:01:37.520 --> 00:01:41.650
In the last case,
we compute a function on a collection and

26
00:01:41.650 --> 00:01:43.530
return the value of the function.

27
00:01:43.530 --> 00:01:46.120
So in this example,
the function is a simple count.

28
00:01:47.450 --> 00:01:51.230
In the real world, this kind of aggregate
function can be very complicated.

29
00:01:52.540 --> 00:01:57.470
We will come back to this issue when
we talk more about map readings, but

30
00:01:57.470 --> 00:02:00.670
in this course, we'll talk about
many different data operations.

31
00:02:01.750 --> 00:02:04.580
Every operator must be efficient.

32
00:02:04.580 --> 00:02:09.550
That means every operator must
perform its task as fast as possible

33
00:02:09.550 --> 00:02:13.400
by taking up as little memory,
or our disk, as possible.

34
00:02:14.580 --> 00:02:17.170
Obviously, the time to
perform an operation

35
00:02:17.170 --> 00:02:20.490
will depend on the size of the input and
the size of the output.

36
00:02:21.590 --> 00:02:26.300
So, if there is an opportunity to use
concurrency where the operator can split

37
00:02:26.300 --> 00:02:30.880
its data and have different threads
operate on the pieces at the same time,

38
00:02:30.880 --> 00:02:32.080
it should definitely do so.

39
00:02:33.820 --> 00:02:37.120
We present a simple example of
an operator we saw on the previous slide.

40
00:02:38.290 --> 00:02:40.600
So this operator, called selection,

41
00:02:40.600 --> 00:02:45.390
refers to choosing a subset of
a set based on some conditions.

42
00:02:45.390 --> 00:02:49.120
Here we are choosing a subset of
circles whose numbers are even.

43
00:02:50.460 --> 00:02:55.080
To make it more efficient,
we can take the input data and

44
00:02:55.080 --> 00:02:59.150
partition it randomly into two groups.

45
00:02:59.150 --> 00:03:01.040
Now, for each group,

46
00:03:01.040 --> 00:03:05.850
we can concurrently run the subset
algorithm and get the partial results.

47
00:03:07.020 --> 00:03:10.880
For this operation, the partial results
can be directly sent to the output

48
00:03:10.880 --> 00:03:12.880
without any additional processing step.