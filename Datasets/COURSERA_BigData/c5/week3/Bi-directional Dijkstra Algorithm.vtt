WEBVTT

1
00:00:00.350 --> 00:00:05.040
So, we saw that the Dijkstra Algorithm
has a very high worst case complexity.

2
00:00:06.370 --> 00:00:09.770
Despite the high complexity of
the algorithm, there are several

3
00:00:09.770 --> 00:00:13.590
practical improvements that will
enhance the performance of the method.

4
00:00:13.590 --> 00:00:17.310
One of them is
Bi-directional Dijkstra Algorithm.

5
00:00:17.310 --> 00:00:21.340
The idea is very simple,
we will go forward from the source now and

6
00:00:21.340 --> 00:00:26.960
backward from the target node and stop
when the two expanding frontiers meet.

7
00:00:26.960 --> 00:00:29.840
We will briefly illustrate
the process without going deep into

8
00:00:29.840 --> 00:00:31.690
the details of every step.

9
00:00:31.690 --> 00:00:34.890
So the technique starts just
like the regular method.

10
00:00:34.890 --> 00:00:38.810
The control moves from
I to F at a cost of 5.

11
00:00:38.810 --> 00:00:40.500
But then, it switches and

12
00:00:40.500 --> 00:00:45.240
starts from the target, and
moves backward along the edges.

13
00:00:45.240 --> 00:00:47.950
So from A, it comes to D or C.

14
00:00:48.960 --> 00:00:53.460
We'll chose D,
because an AD is a least weight part.

15
00:00:53.460 --> 00:00:59.730
Now the forward step is performed again,
and we traverse from F to G.

16
00:00:59.730 --> 00:01:03.060
We are skipping the expansion
to J because as we saw before,

17
00:01:03.060 --> 00:01:05.040
it does not contribute to the path.

18
00:01:05.040 --> 00:01:08.510
So the total rate of the IFG path is 15.

19
00:01:08.510 --> 00:01:13.420
The backward process
then reaches G through D.

20
00:01:13.420 --> 00:01:16.000
The cost of the IFG is 15.

21
00:01:16.000 --> 00:01:18.930
And the cost of ADG is also 15.

22
00:01:18.930 --> 00:01:22.650
We stop because a common node is reached.

23
00:01:22.650 --> 00:01:25.570
We need to ensure that the weight
of the forward path and

24
00:01:25.570 --> 00:01:30.810
that of the reverse path are added, and
the total combined rate is minimal.

25
00:01:30.810 --> 00:01:34.701
At this point,
we can concatenate the partial paths

26
00:01:34.701 --> 00:01:38.777
to construct the full shortest path,
which is IFGDA.

27
00:01:38.777 --> 00:01:43.773
Now one point to remember is that
the length of the smallest weight path

28
00:01:43.773 --> 00:01:46.744
can be longer than the shortest hop path.

29
00:01:46.744 --> 00:01:52.444
Here the FCA path has 2 hops but
a weight of 20.

30
00:01:52.444 --> 00:01:57.366
But the weight of the 3 hop path,
FGDA, is 15.

31
00:01:57.366 --> 00:01:59.060
So just remember that.