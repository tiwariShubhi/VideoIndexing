WEBVTT

1
00:00:08.130 --> 00:00:12.340
So up until now we've been
calculating path length

2
00:00:12.340 --> 00:00:16.710
based on the number of hops between
our beginning node and our end node.

3
00:00:16.710 --> 00:00:21.590
This is roughly equivalent to counting
the number of towns between one town and

4
00:00:21.590 --> 00:00:22.820
another town.

5
00:00:22.820 --> 00:00:25.710
But it doesn't really get at
the value that is usually of

6
00:00:25.710 --> 00:00:27.110
greatest importance to us.

7
00:00:27.110 --> 00:00:32.220
And that is the actual distance between
one location and another location.

8
00:00:32.220 --> 00:00:37.220
Which is found in the values that we've
assigned to the edges between the nodes.

9
00:00:37.220 --> 00:00:41.980
So in this next example, we're going
to perform that kind of a calculation.

10
00:00:41.980 --> 00:00:45.430
So the first two lines of code
we're already fairly familiar with.

11
00:00:45.430 --> 00:00:49.312
We're matching a path between node a and
node c,

12
00:00:49.312 --> 00:00:53.396
where the first node is H,
and the second node is P.

13
00:00:53.396 --> 00:00:56.950
And this third line of code
is also fairly familiar.

14
00:00:56.950 --> 00:01:01.940
We're extracting the names of the nodes
and the path that's been returned, and

15
00:01:01.940 --> 00:01:06.140
we're returning a listing of those
names as well as a length of the path.

16
00:01:07.470 --> 00:01:10.870
All of that is being returned
as the variable pathLength.

17
00:01:10.870 --> 00:01:14.680
We've added a third element
to our return statement, and

18
00:01:14.680 --> 00:01:16.820
that is using the reduce statement.

19
00:01:16.820 --> 00:01:21.130
So what we're doing here is,
the purpose of the reduce statement,

20
00:01:21.130 --> 00:01:25.070
takes a set of values and
reduces them down to a single value.

21
00:01:26.270 --> 00:01:31.900
So in this line of code we begin by
setting a variable s equal to 0.

22
00:01:31.900 --> 00:01:36.200
And then we define a variable E, which
represents the set of relationships in

23
00:01:36.200 --> 00:01:39.389
a path that's returned, or
in other words, the edges.

24
00:01:39.389 --> 00:01:42.842
And we pass that into this variable s,
and add to it,

25
00:01:42.842 --> 00:01:46.860
the value of the distance that
we've assigned to that edge.

26
00:01:48.540 --> 00:01:53.060
So we're performing
an aggregate calculation.

27
00:01:53.060 --> 00:01:58.340
And returning the final results
to a variable called pathDist.

28
00:01:58.340 --> 00:02:00.193
And we're limiting that
results to a single value.

29
00:02:00.193 --> 00:02:05.573
And so when we do this, we should
get a value that is more indicative

30
00:02:05.573 --> 00:02:11.460
of the actual distance between
our source and our destination.

31
00:02:11.460 --> 00:02:12.959
And so here's the results.

32
00:02:12.959 --> 00:02:15.977
The path itself, as we know,
begins in H and ends in P.

33
00:02:15.977 --> 00:02:21.376
And it has a pathLength of 7,
but it has a pathDist of 39.

34
00:02:21.376 --> 00:02:25.864
So we could interpret this to mean
that even though there are 6 towns

35
00:02:25.864 --> 00:02:29.408
between the source town and
the destination town, or

36
00:02:29.408 --> 00:02:34.310
a pathLength of 7, the actual distance
in miles would be a value of 39.

37
00:02:36.446 --> 00:02:38.860
So with that we can apply
Dijkstra's algorithm.

38
00:02:39.950 --> 00:02:46.690
So here I'm going to match the node with
the name A, and the node with the name P.

39
00:02:46.690 --> 00:02:52.461
And we're going to find the shortest
path in terms of hops from A to P.

40
00:02:52.461 --> 00:02:56.050
And we'll set that equal
to the variable path.

41
00:02:56.050 --> 00:03:01.722
Then we'll perform a reduce command,
and set the variable dist = 0.

42
00:03:01.722 --> 00:03:03.602
And we'll go through, and

43
00:03:03.602 --> 00:03:08.960
sum all of the distances of each
of the edges in our shortest path.

44
00:03:08.960 --> 00:03:11.480
And return that value as a distance.

45
00:03:11.480 --> 00:03:15.060
And we'll also return the path variable.

46
00:03:15.060 --> 00:03:20.870
So remember, this is not the path in
our network with the least weights.

47
00:03:20.870 --> 00:03:27.260
It is the weight of the shortest
path based on numbers of hops.

48
00:03:27.260 --> 00:03:31.940
Now that's an inherent feature of
the shortest path command in Cipher.

49
00:03:31.940 --> 00:03:33.470
So here is the path that's returned.

50
00:03:33.470 --> 00:03:37.006
It's a five node path with four edges and

51
00:03:37.006 --> 00:03:42.730
the total sum of the weights of
those edges sums to a value of 22.

52
00:03:44.243 --> 00:03:48.493
So in our previous query,
we specified that we wanted a match for

53
00:03:48.493 --> 00:03:52.240
the source node and the destination node.

54
00:03:52.240 --> 00:03:57.670
But if I don't specify my destination
node, I can apply Dijkstra's single

55
00:03:57.670 --> 00:04:02.730
source shortest path algorithm
from node A to any other node.

56
00:04:03.870 --> 00:04:08.637
So when we apply this query,
the results displayed consist of

57
00:04:08.637 --> 00:04:13.233
the actual original path from
A to P with a distance of 22.

58
00:04:13.233 --> 00:04:18.318
And we'll see a display of all of
the intermediate paths generated in

59
00:04:18.318 --> 00:04:23.240
the process, all the way down to
a single edge path between A and C.

60
00:04:24.750 --> 00:04:30.830
So just to reiterate, what we've
calculated is the shortest hop path

61
00:04:30.830 --> 00:04:36.000
with the weights added, the sum of
the weights of the edges in that path.

62
00:04:36.000 --> 00:04:39.310
This is not the least weight
path of the entire network.

63
00:04:42.730 --> 00:04:45.470
Okay, so let's switch gears for a moment.

64
00:04:45.470 --> 00:04:50.320
As we learned in one of our previous
lectures, we can extract a subset

65
00:04:50.320 --> 00:04:55.070
of nodes and edges from a particular
graph for various reasons.

66
00:04:55.070 --> 00:04:59.210
Let's say for example that we want
to avoid a particular town or

67
00:04:59.210 --> 00:05:01.680
a particular area where
there might be congestion.

68
00:05:01.680 --> 00:05:05.040
And this would be represented
by one of our nodes.

69
00:05:05.040 --> 00:05:08.110
So we're going to perform a similar
match as we've done in the past,

70
00:05:08.110 --> 00:05:14.960
where we're going to match any node n with
any node m, with a two edge between them.

71
00:05:14.960 --> 00:05:19.243
But we want to apply an additional
constrained in which none of the n nodes

72
00:05:19.243 --> 00:05:21.150
are going to include the node D.

73
00:05:21.150 --> 00:05:26.920
And none of the m nodes are going
to include the node D as well.

74
00:05:26.920 --> 00:05:29.030
And then we'll return the resulting graph.

75
00:05:30.290 --> 00:05:34.500
So when we do that, we get a graph but
looks very much as we might expect.

76
00:05:34.500 --> 00:05:38.958
Very similar to our previous graph,
but it is missing node D, so

77
00:05:38.958 --> 00:05:43.183
it only has ten nodes and
it's now been reduced to ten edges.

78
00:05:46.005 --> 00:05:50.659
So now let's say we want to calculate
the shortest path over there graph that we

79
00:05:50.659 --> 00:05:53.590
just returned in the previous query.

80
00:05:53.590 --> 00:05:59.690
So in this case, we're going to match the
shortest path between node A and node P.

81
00:05:59.690 --> 00:06:03.830
But in the second line, we want to
issue sort of a negative statement

82
00:06:03.830 --> 00:06:08.530
in which the resulting list of
node names that we extract using

83
00:06:08.530 --> 00:06:12.780
the extract statement
cannot contain the node D.

84
00:06:14.020 --> 00:06:17.710
And then we'll return that path and
the length of that path.

85
00:06:17.710 --> 00:06:22.190
So when we issue this command,
here's our resulting path.

86
00:06:22.190 --> 00:06:25.730
It's a five node path of length four.

87
00:06:25.730 --> 00:06:29.540
As we recall from one of our earlier
queries where we were trying to calculate

88
00:06:29.540 --> 00:06:33.500
all of the shortest paths,
we returned two paths.

89
00:06:33.500 --> 00:06:37.594
One path that contained D, and this is
the second path, which did not contain D.

90
00:06:40.008 --> 00:06:43.538
So we can make this a little complicated.

91
00:06:43.538 --> 00:06:48.728
Instead of avoiding a single node in
our resulting path, we're looking for

92
00:06:48.728 --> 00:06:54.090
a graph that doesn't contain the immediate
neighborhood of a specific node.

93
00:06:54.090 --> 00:06:58.770
This means all of the nearest, or
the first neighbors of a specific node.

94
00:06:58.770 --> 00:07:03.390
So in this case we're going
to match the same node D, and

95
00:07:03.390 --> 00:07:07.010
all edges between D, and any other node.

96
00:07:07.010 --> 00:07:11.590
And then we are going to issue
a collect command to collect all of

97
00:07:11.590 --> 00:07:13.758
the distinct neighbors of D.

98
00:07:13.758 --> 00:07:18.654
And we'll apply a constraint to that,
in which the returned

99
00:07:18.654 --> 00:07:23.960
list of neighbors cannot contain
the node with the name D.

100
00:07:23.960 --> 00:07:27.050
Likewise, the neighbors list for

101
00:07:27.050 --> 00:07:31.070
the target nodes,
can also not contain the node D.

102
00:07:31.070 --> 00:07:35.800
And when we submit this command,
we see a network that looks like this.

103
00:07:35.800 --> 00:07:38.010
Five nodes and four edges.

104
00:07:38.010 --> 00:07:40.130
And that seems to makes sense.

105
00:07:40.130 --> 00:07:45.170
Node D isn't in the network,
nor are its first neighbors.

106
00:07:45.170 --> 00:07:47.590
But if you recall the original network,

107
00:07:47.590 --> 00:07:53.080
there may be a peculiar result that you
might find a little bit disconcerting.

108
00:07:53.080 --> 00:07:56.112
So let's look at our original network.

109
00:07:56.112 --> 00:07:59.720
Now here's the node D, and
here are all it's nearest neighbors.

110
00:07:59.720 --> 00:08:02.360
So these are the forbidden
neighbors that we want to

111
00:08:02.360 --> 00:08:04.040
remove from our resulting graph.

112
00:08:05.100 --> 00:08:07.360
And we seemed to have
done that successfully.

113
00:08:07.360 --> 00:08:11.700
These are the five nodes that
are retained in the resulting graph, but

114
00:08:11.700 --> 00:08:12.890
there's a node out here.

115
00:08:12.890 --> 00:08:19.440
The node p, which seems to be neglected or
not handled in the results.

116
00:08:19.440 --> 00:08:21.520
It's not a first neighbor of D.

117
00:08:22.620 --> 00:08:26.730
So it, in some ways arguably should
be returned in our results, but

118
00:08:26.730 --> 00:08:30.750
it's not part of the connected
graph that we saw returned.

119
00:08:30.750 --> 00:08:36.580
This is one area in which Cipher does
not handle these situations by default.

120
00:08:36.580 --> 00:08:41.640
So we'll need to supplement our
query with an additional query.

121
00:08:41.640 --> 00:08:46.848
In this case, the node P was a leaf node,
so we want to make sure that

122
00:08:46.848 --> 00:08:52.340
not only matching the nodes that
conform to these constraints above.

123
00:08:53.400 --> 00:08:58.890
But we also want to include the node or
any nodes which are leaf nodes,

124
00:08:58.890 --> 00:09:04.200
which may also be arguably part of the
results that you expect to be returned.

125
00:09:04.200 --> 00:09:07.120
Now in our network,
we do have one root node,

126
00:09:07.120 --> 00:09:10.990
but it doesn't impact the results
in this particular query.

127
00:09:10.990 --> 00:09:13.420
In the interests of being complete, for

128
00:09:13.420 --> 00:09:18.002
any network, most networks being much more
complex than the one we're working with.

129
00:09:18.002 --> 00:09:23.450
We'd want to take into account not only
those leaf nodes that might be left out,

130
00:09:23.450 --> 00:09:25.700
but also any root notes
that might be left out.

131
00:09:28.300 --> 00:09:33.400
And finally, our last query
example extends the previous query

132
00:09:33.400 --> 00:09:37.670
to find the graph which doesn't
contain a selective neighborhood,

133
00:09:37.670 --> 00:09:42.050
in this case,
the two neighborhood of a particular node.

134
00:09:42.050 --> 00:09:43.571
In this example we're
going to use the node F.

135
00:09:43.571 --> 00:09:50.020
And we want to eliminate all of
the second neighbors of that node.

136
00:09:50.020 --> 00:09:54.590
So initially we match all of those
nodes that are second neighbors of F,

137
00:09:54.590 --> 00:09:56.400
including F itself.

138
00:09:56.400 --> 00:10:00.750
And we'll place those in
a variable called MyList.

139
00:10:00.750 --> 00:10:03.850
Then we go back through the network and
match all of the nodes and

140
00:10:03.850 --> 00:10:08.690
edges, where the source nodes are not
part of the nodes in the MyList and

141
00:10:08.690 --> 00:10:11.740
the target nodes are not
contained in MyList.

142
00:10:11.740 --> 00:10:13.940
And then we return those nodes and edges.

143
00:10:15.580 --> 00:10:16.990
And here's the resulting graph.

144
00:10:19.020 --> 00:10:24.490
It does not contain F or
its first or second neighbors.

145
00:10:24.490 --> 00:10:31.574
If we scroll down to look at the original
graph, here's node F, nodes H,

146
00:10:31.574 --> 00:10:37.080
J, C, A and L are all the first and
second neighbors of F.

147
00:10:37.080 --> 00:10:42.070
So those should be eliminated from the
graph that gets returned from our results.

148
00:10:42.070 --> 00:10:43.600
And sure enough,

149
00:10:43.600 --> 00:10:49.520
this subset of nodes represents the
results that were returned from our query.

150
00:10:49.520 --> 00:10:54.040
It consists of nodes B, D, E, G, and P.

151
00:10:54.040 --> 00:10:57.440
And so this concludes our review
of some of the more advanced

152
00:10:57.440 --> 00:10:59.490
path analytics queries.

153
00:10:59.490 --> 00:11:01.645
We were using a simple network, but

154
00:11:01.645 --> 00:11:05.310
we're providing additional data
sets that are much larger and

155
00:11:05.310 --> 00:11:09.770
present a more realistic challenge
in applying pathanalythics queries.